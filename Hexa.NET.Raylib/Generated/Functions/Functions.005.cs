// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Raylib
{
	public unsafe partial class Raylib
	{

		[NativeName(NativeNameType.Func, "rlEnableDepthTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlEnableDepthTestNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[646])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[646])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableDepthTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableDepthTest()
		{
			RlEnableDepthTestNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableDepthTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlDisableDepthTestNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[647])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[647])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableDepthTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableDepthTest()
		{
			RlDisableDepthTestNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableDepthMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlEnableDepthMaskNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[648])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[648])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableDepthMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableDepthMask()
		{
			RlEnableDepthMaskNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableDepthMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlDisableDepthMaskNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[649])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[649])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableDepthMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableDepthMask()
		{
			RlDisableDepthMaskNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableBackfaceCulling")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlEnableBackfaceCullingNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[650])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[650])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableBackfaceCulling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableBackfaceCulling()
		{
			RlEnableBackfaceCullingNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableBackfaceCulling")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlDisableBackfaceCullingNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[651])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[651])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableBackfaceCulling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableBackfaceCulling()
		{
			RlDisableBackfaceCullingNative();
		}

		[NativeName(NativeNameType.Func, "rlColorMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlColorMaskNative([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "bool")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "bool")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "bool")] byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "bool")] byte a)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)funcTable[652])(r, g, b, a);
			#else
			((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)funcTable[652])(r, g, b, a);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlColorMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlColorMask([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "bool")] bool r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "bool")] bool g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "bool")] bool b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "bool")] bool a)
		{
			RlColorMaskNative(r ? (byte)1 : (byte)0, g ? (byte)1 : (byte)0, b ? (byte)1 : (byte)0, a ? (byte)1 : (byte)0);
		}

		[NativeName(NativeNameType.Func, "rlSetCullFace")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetCullFaceNative([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[653])(mode);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[653])(mode);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetCullFace")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetCullFace([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			RlSetCullFaceNative(mode);
		}

		[NativeName(NativeNameType.Func, "rlEnableScissorTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlEnableScissorTestNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[654])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[654])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableScissorTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableScissorTest()
		{
			RlEnableScissorTestNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableScissorTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlDisableScissorTestNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[655])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[655])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableScissorTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableScissorTest()
		{
			RlDisableScissorTestNative();
		}

		[NativeName(NativeNameType.Func, "rlScissor")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlScissorNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[656])(x, y, width, height);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[656])(x, y, width, height);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlScissor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlScissor([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			RlScissorNative(x, y, width, height);
		}

		[NativeName(NativeNameType.Func, "rlEnablePointMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlEnablePointModeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[657])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[657])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnablePointMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnablePointMode()
		{
			RlEnablePointModeNative();
		}

		[NativeName(NativeNameType.Func, "rlDisablePointMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlDisablePointModeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[658])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[658])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisablePointMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisablePointMode()
		{
			RlDisablePointModeNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableWireMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlEnableWireModeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[659])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[659])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableWireMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableWireMode()
		{
			RlEnableWireModeNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableWireMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlDisableWireModeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[660])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[660])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableWireMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableWireMode()
		{
			RlDisableWireModeNative();
		}

		[NativeName(NativeNameType.Func, "rlSetLineWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetLineWidthNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[661])(width);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[661])(width);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetLineWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetLineWidth([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			RlSetLineWidthNative(width);
		}

		[NativeName(NativeNameType.Func, "rlGetLineWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float RlGetLineWidthNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)funcTable[662])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)funcTable[662])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetLineWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float RlGetLineWidth()
		{
			float ret = RlGetLineWidthNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlEnableSmoothLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlEnableSmoothLinesNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[663])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[663])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableSmoothLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableSmoothLines()
		{
			RlEnableSmoothLinesNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableSmoothLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlDisableSmoothLinesNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[664])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[664])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableSmoothLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableSmoothLines()
		{
			RlDisableSmoothLinesNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableStereoRender")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlEnableStereoRenderNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[665])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[665])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableStereoRender")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableStereoRender()
		{
			RlEnableStereoRenderNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableStereoRender")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlDisableStereoRenderNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[666])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[666])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableStereoRender")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableStereoRender()
		{
			RlDisableStereoRenderNative();
		}

		[NativeName(NativeNameType.Func, "rlIsStereoRenderEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte RlIsStereoRenderEnabledNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[667])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[667])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlIsStereoRenderEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RlIsStereoRenderEnabled()
		{
			byte ret = RlIsStereoRenderEnabledNative();
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "rlClearColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlClearColorNative([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "unsigned char")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "unsigned char")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "unsigned char")] byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "unsigned char")] byte a)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)funcTable[668])(r, g, b, a);
			#else
			((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)funcTable[668])(r, g, b, a);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlClearColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlClearColor([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "unsigned char")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "unsigned char")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "unsigned char")] byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "unsigned char")] byte a)
		{
			RlClearColorNative(r, g, b, a);
		}

		[NativeName(NativeNameType.Func, "rlClearScreenBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlClearScreenBuffersNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[669])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[669])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlClearScreenBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlClearScreenBuffers()
		{
			RlClearScreenBuffersNative();
		}

		[NativeName(NativeNameType.Func, "rlCheckErrors")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlCheckErrorsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[670])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[670])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlCheckErrors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlCheckErrors()
		{
			RlCheckErrorsNative();
		}

		[NativeName(NativeNameType.Func, "rlSetBlendMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetBlendModeNative([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[671])(mode);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[671])(mode);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetBlendMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetBlendMode([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			RlSetBlendModeNative(mode);
		}

		[NativeName(NativeNameType.Func, "rlSetBlendFactors")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetBlendFactorsNative([NativeName(NativeNameType.Param, "glSrcFactor")] [NativeName(NativeNameType.Type, "int")] int glSrcFactor, [NativeName(NativeNameType.Param, "glDstFactor")] [NativeName(NativeNameType.Type, "int")] int glDstFactor, [NativeName(NativeNameType.Param, "glEquation")] [NativeName(NativeNameType.Type, "int")] int glEquation)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[672])(glSrcFactor, glDstFactor, glEquation);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[672])(glSrcFactor, glDstFactor, glEquation);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetBlendFactors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetBlendFactors([NativeName(NativeNameType.Param, "glSrcFactor")] [NativeName(NativeNameType.Type, "int")] int glSrcFactor, [NativeName(NativeNameType.Param, "glDstFactor")] [NativeName(NativeNameType.Type, "int")] int glDstFactor, [NativeName(NativeNameType.Param, "glEquation")] [NativeName(NativeNameType.Type, "int")] int glEquation)
		{
			RlSetBlendFactorsNative(glSrcFactor, glDstFactor, glEquation);
		}

		[NativeName(NativeNameType.Func, "rlSetBlendFactorsSeparate")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetBlendFactorsSeparateNative([NativeName(NativeNameType.Param, "glSrcRGB")] [NativeName(NativeNameType.Type, "int")] int glSrcRGB, [NativeName(NativeNameType.Param, "glDstRGB")] [NativeName(NativeNameType.Type, "int")] int glDstRGB, [NativeName(NativeNameType.Param, "glSrcAlpha")] [NativeName(NativeNameType.Type, "int")] int glSrcAlpha, [NativeName(NativeNameType.Param, "glDstAlpha")] [NativeName(NativeNameType.Type, "int")] int glDstAlpha, [NativeName(NativeNameType.Param, "glEqRGB")] [NativeName(NativeNameType.Type, "int")] int glEqRGB, [NativeName(NativeNameType.Param, "glEqAlpha")] [NativeName(NativeNameType.Type, "int")] int glEqAlpha)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, void>)funcTable[673])(glSrcRGB, glDstRGB, glSrcAlpha, glDstAlpha, glEqRGB, glEqAlpha);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, void>)funcTable[673])(glSrcRGB, glDstRGB, glSrcAlpha, glDstAlpha, glEqRGB, glEqAlpha);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetBlendFactorsSeparate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetBlendFactorsSeparate([NativeName(NativeNameType.Param, "glSrcRGB")] [NativeName(NativeNameType.Type, "int")] int glSrcRGB, [NativeName(NativeNameType.Param, "glDstRGB")] [NativeName(NativeNameType.Type, "int")] int glDstRGB, [NativeName(NativeNameType.Param, "glSrcAlpha")] [NativeName(NativeNameType.Type, "int")] int glSrcAlpha, [NativeName(NativeNameType.Param, "glDstAlpha")] [NativeName(NativeNameType.Type, "int")] int glDstAlpha, [NativeName(NativeNameType.Param, "glEqRGB")] [NativeName(NativeNameType.Type, "int")] int glEqRGB, [NativeName(NativeNameType.Param, "glEqAlpha")] [NativeName(NativeNameType.Type, "int")] int glEqAlpha)
		{
			RlSetBlendFactorsSeparateNative(glSrcRGB, glDstRGB, glSrcAlpha, glDstAlpha, glEqRGB, glEqAlpha);
		}

		/// <summary>
		/// ------------------------------------------------------------------------------------<br/>
		/// Functions Declaration - rlgl functionality<br/>
		/// ------------------------------------------------------------------------------------<br/>
		/// rlgl initialization functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlglInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlglInitNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[674])(width, height);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[674])(width, height);
			#endif
		}

		/// <summary>
		/// ------------------------------------------------------------------------------------<br/>
		/// Functions Declaration - rlgl functionality<br/>
		/// ------------------------------------------------------------------------------------<br/>
		/// rlgl initialization functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlglInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlglInit([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			RlglInitNative(width, height);
		}

		[NativeName(NativeNameType.Func, "rlglClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlglCloseNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[675])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[675])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlglClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlglClose()
		{
			RlglCloseNative();
		}

		[NativeName(NativeNameType.Func, "rlLoadExtensions")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlLoadExtensionsNative([NativeName(NativeNameType.Param, "loader")] [NativeName(NativeNameType.Type, "void *")] void* loader)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, void>)funcTable[676])(loader);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[676])((nint)loader);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadExtensions")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlLoadExtensions([NativeName(NativeNameType.Param, "loader")] [NativeName(NativeNameType.Type, "void *")] void* loader)
		{
			RlLoadExtensionsNative(loader);
		}

		[NativeName(NativeNameType.Func, "rlGetVersion")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int RlGetVersionNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[677])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[677])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetVersion")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetVersion()
		{
			int ret = RlGetVersionNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlSetFramebufferWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetFramebufferWidthNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[678])(width);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[678])(width);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetFramebufferWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetFramebufferWidth([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width)
		{
			RlSetFramebufferWidthNative(width);
		}

		[NativeName(NativeNameType.Func, "rlGetFramebufferWidth")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int RlGetFramebufferWidthNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[679])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[679])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetFramebufferWidth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetFramebufferWidth()
		{
			int ret = RlGetFramebufferWidthNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlSetFramebufferHeight")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetFramebufferHeightNative([NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[680])(height);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[680])(height);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetFramebufferHeight")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetFramebufferHeight([NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			RlSetFramebufferHeightNative(height);
		}

		[NativeName(NativeNameType.Func, "rlGetFramebufferHeight")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int RlGetFramebufferHeightNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[681])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[681])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetFramebufferHeight")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetFramebufferHeight()
		{
			int ret = RlGetFramebufferHeightNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetTextureIdDefault")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RlGetTextureIdDefaultNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)funcTable[682])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)funcTable[682])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetTextureIdDefault")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlGetTextureIdDefault()
		{
			uint ret = RlGetTextureIdDefaultNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetShaderIdDefault")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RlGetShaderIdDefaultNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)funcTable[683])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)funcTable[683])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetShaderIdDefault")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlGetShaderIdDefault()
		{
			uint ret = RlGetShaderIdDefaultNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetShaderLocsDefault")]
		[return: NativeName(NativeNameType.Type, "int *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int* RlGetShaderLocsDefaultNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int*>)funcTable[684])();
			#else
			return (int*)((delegate* unmanaged[Cdecl]<nint>)funcTable[684])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetShaderLocsDefault")]
		[return: NativeName(NativeNameType.Type, "int *")]
		public static int* RlGetShaderLocsDefault()
		{
			int* ret = RlGetShaderLocsDefaultNative();
			return ret;
		}

		/// <summary>
		/// Render batch management<br/>
		/// NOTE: rlgl provides a default render batch to behave like OpenGL 1.1 immediate mode<br/>
		/// but this render batch API is exposed in case of custom batches are required<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadRenderBatch")]
		[return: NativeName(NativeNameType.Type, "rlRenderBatch")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static RlRenderBatch RlLoadRenderBatchNative([NativeName(NativeNameType.Param, "numBuffers")] [NativeName(NativeNameType.Type, "int")] int numBuffers, [NativeName(NativeNameType.Param, "bufferElements")] [NativeName(NativeNameType.Type, "int")] int bufferElements)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, RlRenderBatch>)funcTable[685])(numBuffers, bufferElements);
			#else
			return (RlRenderBatch)((delegate* unmanaged[Cdecl]<int, int, RlRenderBatch>)funcTable[685])(numBuffers, bufferElements);
			#endif
		}

		/// <summary>
		/// Render batch management<br/>
		/// NOTE: rlgl provides a default render batch to behave like OpenGL 1.1 immediate mode<br/>
		/// but this render batch API is exposed in case of custom batches are required<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadRenderBatch")]
		[return: NativeName(NativeNameType.Type, "rlRenderBatch")]
		public static RlRenderBatch RlLoadRenderBatch([NativeName(NativeNameType.Param, "numBuffers")] [NativeName(NativeNameType.Type, "int")] int numBuffers, [NativeName(NativeNameType.Param, "bufferElements")] [NativeName(NativeNameType.Type, "int")] int bufferElements)
		{
			RlRenderBatch ret = RlLoadRenderBatchNative(numBuffers, bufferElements);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUnloadRenderBatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlUnloadRenderBatchNative([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch")] RlRenderBatch batch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<RlRenderBatch, void>)funcTable[686])(batch);
			#else
			((delegate* unmanaged[Cdecl]<RlRenderBatch, void>)funcTable[686])(batch);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadRenderBatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadRenderBatch([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch")] RlRenderBatch batch)
		{
			RlUnloadRenderBatchNative(batch);
		}

		[NativeName(NativeNameType.Func, "rlDrawRenderBatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlDrawRenderBatchNative([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch *")] RlRenderBatch* batch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<RlRenderBatch*, void>)funcTable[687])(batch);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[687])((nint)batch);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawRenderBatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawRenderBatch([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch *")] RlRenderBatch* batch)
		{
			RlDrawRenderBatchNative(batch);
		}

		[NativeName(NativeNameType.Func, "rlDrawRenderBatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawRenderBatch([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch *")] ref RlRenderBatch batch)
		{
			fixed (RlRenderBatch* pbatch = &batch)
			{
				RlDrawRenderBatchNative((RlRenderBatch*)pbatch);
			}
		}

		[NativeName(NativeNameType.Func, "rlSetRenderBatchActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetRenderBatchActiveNative([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch *")] RlRenderBatch* batch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<RlRenderBatch*, void>)funcTable[688])(batch);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[688])((nint)batch);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetRenderBatchActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetRenderBatchActive([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch *")] RlRenderBatch* batch)
		{
			RlSetRenderBatchActiveNative(batch);
		}

		[NativeName(NativeNameType.Func, "rlSetRenderBatchActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetRenderBatchActive([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch *")] ref RlRenderBatch batch)
		{
			fixed (RlRenderBatch* pbatch = &batch)
			{
				RlSetRenderBatchActiveNative((RlRenderBatch*)pbatch);
			}
		}

		[NativeName(NativeNameType.Func, "rlDrawRenderBatchActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlDrawRenderBatchActiveNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[689])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[689])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawRenderBatchActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawRenderBatchActive()
		{
			RlDrawRenderBatchActiveNative();
		}

		[NativeName(NativeNameType.Func, "rlCheckRenderBatchLimit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte RlCheckRenderBatchLimitNative([NativeName(NativeNameType.Param, "vCount")] [NativeName(NativeNameType.Type, "int")] int vCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)funcTable[690])(vCount);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)funcTable[690])(vCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlCheckRenderBatchLimit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RlCheckRenderBatchLimit([NativeName(NativeNameType.Param, "vCount")] [NativeName(NativeNameType.Type, "int")] int vCount)
		{
			byte ret = RlCheckRenderBatchLimitNative(vCount);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "rlSetTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetTextureNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[691])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[691])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetTexture([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlSetTextureNative(id);
		}

		/// <summary>
		/// Vertex buffers management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadVertexArray")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RlLoadVertexArrayNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)funcTable[692])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)funcTable[692])();
			#endif
		}

		/// <summary>
		/// Vertex buffers management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadVertexArray")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadVertexArray()
		{
			uint ret = RlLoadVertexArrayNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlLoadVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RlLoadVertexBufferNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "void const *")] void* buffer, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "dynamic")] [NativeName(NativeNameType.Type, "bool")] byte dynamic)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, byte, uint>)funcTable[693])(buffer, size, dynamic);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, byte, uint>)funcTable[693])((nint)buffer, size, dynamic);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadVertexBuffer([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "void const *")] void* buffer, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "dynamic")] [NativeName(NativeNameType.Type, "bool")] bool dynamic)
		{
			uint ret = RlLoadVertexBufferNative(buffer, size, dynamic ? (byte)1 : (byte)0);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlLoadVertexBufferElement")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RlLoadVertexBufferElementNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "void const *")] void* buffer, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "dynamic")] [NativeName(NativeNameType.Type, "bool")] byte dynamic)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, byte, uint>)funcTable[694])(buffer, size, dynamic);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, byte, uint>)funcTable[694])((nint)buffer, size, dynamic);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadVertexBufferElement")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadVertexBufferElement([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "void const *")] void* buffer, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "dynamic")] [NativeName(NativeNameType.Type, "bool")] bool dynamic)
		{
			uint ret = RlLoadVertexBufferElementNative(buffer, size, dynamic ? (byte)1 : (byte)0);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUpdateVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlUpdateVertexBufferNative([NativeName(NativeNameType.Param, "bufferId")] [NativeName(NativeNameType.Type, "unsigned int")] uint bufferId, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void*, int, int, void>)funcTable[695])(bufferId, data, dataSize, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, int, int, void>)funcTable[695])(bufferId, (nint)data, dataSize, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUpdateVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUpdateVertexBuffer([NativeName(NativeNameType.Param, "bufferId")] [NativeName(NativeNameType.Type, "unsigned int")] uint bufferId, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			RlUpdateVertexBufferNative(bufferId, data, dataSize, offset);
		}

		[NativeName(NativeNameType.Func, "rlUpdateVertexBufferElements")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlUpdateVertexBufferElementsNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void*, int, int, void>)funcTable[696])(id, data, dataSize, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, int, int, void>)funcTable[696])(id, (nint)data, dataSize, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUpdateVertexBufferElements")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUpdateVertexBufferElements([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			RlUpdateVertexBufferElementsNative(id, data, dataSize, offset);
		}

		[NativeName(NativeNameType.Func, "rlUnloadVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlUnloadVertexArrayNative([NativeName(NativeNameType.Param, "vaoId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vaoId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[697])(vaoId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[697])(vaoId);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadVertexArray([NativeName(NativeNameType.Param, "vaoId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vaoId)
		{
			RlUnloadVertexArrayNative(vaoId);
		}

		[NativeName(NativeNameType.Func, "rlUnloadVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlUnloadVertexBufferNative([NativeName(NativeNameType.Param, "vboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vboId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[698])(vboId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[698])(vboId);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadVertexBuffer([NativeName(NativeNameType.Param, "vboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vboId)
		{
			RlUnloadVertexBufferNative(vboId);
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttribute")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetVertexAttributeNative([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "compSize")] [NativeName(NativeNameType.Type, "int")] int compSize, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type, [NativeName(NativeNameType.Param, "normalized")] [NativeName(NativeNameType.Type, "bool")] byte normalized, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, int, int, void>)funcTable[699])(index, compSize, type, normalized, stride, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, int, int, void>)funcTable[699])(index, compSize, type, normalized, stride, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttribute")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetVertexAttribute([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "compSize")] [NativeName(NativeNameType.Type, "int")] int compSize, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type, [NativeName(NativeNameType.Param, "normalized")] [NativeName(NativeNameType.Type, "bool")] bool normalized, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			RlSetVertexAttributeNative(index, compSize, type, normalized ? (byte)1 : (byte)0, stride, offset);
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttributeDivisor")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetVertexAttributeDivisorNative([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "divisor")] [NativeName(NativeNameType.Type, "int")] int divisor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[700])(index, divisor);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[700])(index, divisor);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttributeDivisor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetVertexAttributeDivisor([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "divisor")] [NativeName(NativeNameType.Type, "int")] int divisor)
		{
			RlSetVertexAttributeDivisorNative(index, divisor);
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttributeDefault")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetVertexAttributeDefaultNative([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void const *")] void* value, [NativeName(NativeNameType.Param, "attribType")] [NativeName(NativeNameType.Type, "int")] int attribType, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void*, int, int, void>)funcTable[701])(locIndex, value, attribType, count);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, int, int, void>)funcTable[701])(locIndex, (nint)value, attribType, count);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttributeDefault")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetVertexAttributeDefault([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void const *")] void* value, [NativeName(NativeNameType.Param, "attribType")] [NativeName(NativeNameType.Type, "int")] int attribType, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			RlSetVertexAttributeDefaultNative(locIndex, value, attribType, count);
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlDrawVertexArrayNative([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[702])(offset, count);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[702])(offset, count);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawVertexArray([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			RlDrawVertexArrayNative(offset, count);
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayElements")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlDrawVertexArrayElementsNative([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "void const *")] void* buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void*, void>)funcTable[703])(offset, count, buffer);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[703])(offset, count, (nint)buffer);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayElements")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawVertexArrayElements([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "void const *")] void* buffer)
		{
			RlDrawVertexArrayElementsNative(offset, count, buffer);
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayInstanced")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlDrawVertexArrayInstancedNative([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "instances")] [NativeName(NativeNameType.Type, "int")] int instances)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[704])(offset, count, instances);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[704])(offset, count, instances);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayInstanced")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawVertexArrayInstanced([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "instances")] [NativeName(NativeNameType.Type, "int")] int instances)
		{
			RlDrawVertexArrayInstancedNative(offset, count, instances);
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayElementsInstanced")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlDrawVertexArrayElementsInstancedNative([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "void const *")] void* buffer, [NativeName(NativeNameType.Param, "instances")] [NativeName(NativeNameType.Type, "int")] int instances)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void*, int, void>)funcTable[705])(offset, count, buffer, instances);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, int, void>)funcTable[705])(offset, count, (nint)buffer, instances);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayElementsInstanced")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawVertexArrayElementsInstanced([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "void const *")] void* buffer, [NativeName(NativeNameType.Param, "instances")] [NativeName(NativeNameType.Type, "int")] int instances)
		{
			RlDrawVertexArrayElementsInstancedNative(offset, count, buffer, instances);
		}

		/// <summary>
		/// Textures management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadTexture")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RlLoadTextureNative([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmapCount")] [NativeName(NativeNameType.Type, "int")] int mipmapCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, int, int, int, uint>)funcTable[706])(data, width, height, format, mipmapCount);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, int, int, int, uint>)funcTable[706])((nint)data, width, height, format, mipmapCount);
			#endif
		}

		/// <summary>
		/// Textures management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadTexture")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadTexture([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmapCount")] [NativeName(NativeNameType.Type, "int")] int mipmapCount)
		{
			uint ret = RlLoadTextureNative(data, width, height, format, mipmapCount);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlLoadTextureDepth")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RlLoadTextureDepthNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "useRenderBuffer")] [NativeName(NativeNameType.Type, "bool")] byte useRenderBuffer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, byte, uint>)funcTable[707])(width, height, useRenderBuffer);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<int, int, byte, uint>)funcTable[707])(width, height, useRenderBuffer);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadTextureDepth")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadTextureDepth([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "useRenderBuffer")] [NativeName(NativeNameType.Type, "bool")] bool useRenderBuffer)
		{
			uint ret = RlLoadTextureDepthNative(width, height, useRenderBuffer ? (byte)1 : (byte)0);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlLoadTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RlLoadTextureCubemapNative([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmapCount")] [NativeName(NativeNameType.Type, "int")] int mipmapCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, int, int, uint>)funcTable[708])(data, size, format, mipmapCount);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, int, int, uint>)funcTable[708])((nint)data, size, format, mipmapCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadTextureCubemap([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmapCount")] [NativeName(NativeNameType.Type, "int")] int mipmapCount)
		{
			uint ret = RlLoadTextureCubemapNative(data, size, format, mipmapCount);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUpdateTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlUpdateTextureNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void*, void>)funcTable[709])(id, offsetX, offsetY, width, height, format, data);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, nint, void>)funcTable[709])(id, offsetX, offsetY, width, height, format, (nint)data);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUpdateTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUpdateTexture([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data)
		{
			RlUpdateTextureNative(id, offsetX, offsetY, width, height, format, data);
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlGetGlTextureFormatsNative([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* glType)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, uint*, uint*, void>)funcTable[710])(format, glInternalFormat, glFormat, glType);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, nint, nint, void>)funcTable[710])(format, (nint)glInternalFormat, (nint)glFormat, (nint)glType);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* glType)
		{
			RlGetGlTextureFormatsNative(format, glInternalFormat, glFormat, glType);
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* glType)
		{
			fixed (uint* pglInternalFormat = &glInternalFormat)
			{
				RlGetGlTextureFormatsNative(format, (uint*)pglInternalFormat, glFormat, glType);
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* glType)
		{
			fixed (uint* pglFormat = &glFormat)
			{
				RlGetGlTextureFormatsNative(format, glInternalFormat, (uint*)pglFormat, glType);
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* glType)
		{
			fixed (uint* pglInternalFormat = &glInternalFormat)
			{
				fixed (uint* pglFormat = &glFormat)
				{
					RlGetGlTextureFormatsNative(format, (uint*)pglInternalFormat, (uint*)pglFormat, glType);
				}
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint glType)
		{
			fixed (uint* pglType = &glType)
			{
				RlGetGlTextureFormatsNative(format, glInternalFormat, glFormat, (uint*)pglType);
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint glType)
		{
			fixed (uint* pglInternalFormat = &glInternalFormat)
			{
				fixed (uint* pglType = &glType)
				{
					RlGetGlTextureFormatsNative(format, (uint*)pglInternalFormat, glFormat, (uint*)pglType);
				}
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint glType)
		{
			fixed (uint* pglFormat = &glFormat)
			{
				fixed (uint* pglType = &glType)
				{
					RlGetGlTextureFormatsNative(format, glInternalFormat, (uint*)pglFormat, (uint*)pglType);
				}
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint glType)
		{
			fixed (uint* pglInternalFormat = &glInternalFormat)
			{
				fixed (uint* pglFormat = &glFormat)
				{
					fixed (uint* pglType = &glType)
					{
						RlGetGlTextureFormatsNative(format, (uint*)pglInternalFormat, (uint*)pglFormat, (uint*)pglType);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "rlGetPixelFormatName")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* RlGetPixelFormatNameNative([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "unsigned int")] uint format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte*>)funcTable[711])(format);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<uint, nint>)funcTable[711])(format);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetPixelFormatName")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* RlGetPixelFormatName([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "unsigned int")] uint format)
		{
			byte* ret = RlGetPixelFormatNameNative(format);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetPixelFormatName")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string RlGetPixelFormatNameS([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "unsigned int")] uint format)
		{
			string ret = Utils.DecodeStringUTF8(RlGetPixelFormatNameNative(format));
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUnloadTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlUnloadTextureNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[712])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[712])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadTexture([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlUnloadTextureNative(id);
		}

		[NativeName(NativeNameType.Func, "rlGenTextureMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlGenTextureMipmapsNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmaps")] [NativeName(NativeNameType.Type, "int *")] int* mipmaps)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int*, void>)funcTable[713])(id, width, height, format, mipmaps);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, nint, void>)funcTable[713])(id, width, height, format, (nint)mipmaps);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGenTextureMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGenTextureMipmaps([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmaps")] [NativeName(NativeNameType.Type, "int *")] int* mipmaps)
		{
			RlGenTextureMipmapsNative(id, width, height, format, mipmaps);
		}

		[NativeName(NativeNameType.Func, "rlGenTextureMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGenTextureMipmaps([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmaps")] [NativeName(NativeNameType.Type, "int *")] ref int mipmaps)
		{
			fixed (int* pmipmaps = &mipmaps)
			{
				RlGenTextureMipmapsNative(id, width, height, format, (int*)pmipmaps);
			}
		}

		[NativeName(NativeNameType.Func, "rlReadTexturePixels")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* RlReadTexturePixelsNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, int, int, int, void*>)funcTable[714])(id, width, height, format);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<uint, int, int, int, nint>)funcTable[714])(id, width, height, format);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlReadTexturePixels")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* RlReadTexturePixels([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			void* ret = RlReadTexturePixelsNative(id, width, height, format);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlReadScreenPixels")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* RlReadScreenPixelsNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, byte*>)funcTable[715])(width, height);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, int, nint>)funcTable[715])(width, height);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlReadScreenPixels")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static byte* RlReadScreenPixels([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			byte* ret = RlReadScreenPixelsNative(width, height);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlReadScreenPixels")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static string RlReadScreenPixelsS([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			string ret = Utils.DecodeStringUTF8(RlReadScreenPixelsNative(width, height));
			return ret;
		}

		/// <summary>
		/// Framebuffer management (fbo)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadFramebuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RlLoadFramebufferNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)funcTable[716])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)funcTable[716])();
			#endif
		}

		/// <summary>
		/// Framebuffer management (fbo)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadFramebuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadFramebuffer()
		{
			uint ret = RlLoadFramebufferNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlFramebufferAttach")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlFramebufferAttachNative([NativeName(NativeNameType.Param, "fboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint fboId, [NativeName(NativeNameType.Param, "texId")] [NativeName(NativeNameType.Type, "unsigned int")] uint texId, [NativeName(NativeNameType.Param, "attachType")] [NativeName(NativeNameType.Type, "int")] int attachType, [NativeName(NativeNameType.Param, "texType")] [NativeName(NativeNameType.Type, "int")] int texType, [NativeName(NativeNameType.Param, "mipLevel")] [NativeName(NativeNameType.Type, "int")] int mipLevel)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, void>)funcTable[717])(fboId, texId, attachType, texType, mipLevel);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, void>)funcTable[717])(fboId, texId, attachType, texType, mipLevel);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlFramebufferAttach")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlFramebufferAttach([NativeName(NativeNameType.Param, "fboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint fboId, [NativeName(NativeNameType.Param, "texId")] [NativeName(NativeNameType.Type, "unsigned int")] uint texId, [NativeName(NativeNameType.Param, "attachType")] [NativeName(NativeNameType.Type, "int")] int attachType, [NativeName(NativeNameType.Param, "texType")] [NativeName(NativeNameType.Type, "int")] int texType, [NativeName(NativeNameType.Param, "mipLevel")] [NativeName(NativeNameType.Type, "int")] int mipLevel)
		{
			RlFramebufferAttachNative(fboId, texId, attachType, texType, mipLevel);
		}

		[NativeName(NativeNameType.Func, "rlFramebufferComplete")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte RlFramebufferCompleteNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[718])(id);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[718])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlFramebufferComplete")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RlFramebufferComplete([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			byte ret = RlFramebufferCompleteNative(id);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "rlUnloadFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlUnloadFramebufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[719])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[719])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadFramebuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlUnloadFramebufferNative(id);
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RlLoadShaderCodeNative([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "char const *")] byte* vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "char const *")] byte* fsCode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, uint>)funcTable[720])(vsCode, fsCode);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, uint>)funcTable[720])((nint)vsCode, (nint)fsCode);
			#endif
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "char const *")] byte* vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "char const *")] byte* fsCode)
		{
			uint ret = RlLoadShaderCodeNative(vsCode, fsCode);
			return ret;
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "char const *")] ref byte vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "char const *")] byte* fsCode)
		{
			fixed (byte* pvsCode = &vsCode)
			{
				uint ret = RlLoadShaderCodeNative((byte*)pvsCode, fsCode);
				return ret;
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "char const *")] byte* fsCode)
		{
			fixed (byte* pvsCode = vsCode)
			{
				uint ret = RlLoadShaderCodeNative((byte*)pvsCode, fsCode);
				return ret;
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "char const *")] string vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "char const *")] byte* fsCode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (vsCode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(vsCode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(vsCode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = RlLoadShaderCodeNative(pStr0, fsCode);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "char const *")] byte* vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "char const *")] ref byte fsCode)
		{
			fixed (byte* pfsCode = &fsCode)
			{
				uint ret = RlLoadShaderCodeNative(vsCode, (byte*)pfsCode);
				return ret;
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "char const *")] byte* vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fsCode)
		{
			fixed (byte* pfsCode = fsCode)
			{
				uint ret = RlLoadShaderCodeNative(vsCode, (byte*)pfsCode);
				return ret;
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "char const *")] byte* vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "char const *")] string fsCode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fsCode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fsCode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fsCode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = RlLoadShaderCodeNative(vsCode, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "char const *")] ref byte vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "char const *")] ref byte fsCode)
		{
			fixed (byte* pvsCode = &vsCode)
			{
				fixed (byte* pfsCode = &fsCode)
				{
					uint ret = RlLoadShaderCodeNative((byte*)pvsCode, (byte*)pfsCode);
					return ret;
				}
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fsCode)
		{
			fixed (byte* pvsCode = vsCode)
			{
				fixed (byte* pfsCode = fsCode)
				{
					uint ret = RlLoadShaderCodeNative((byte*)pvsCode, (byte*)pfsCode);
					return ret;
				}
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "char const *")] string vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "char const *")] string fsCode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (vsCode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(vsCode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(vsCode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (fsCode != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(fsCode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(fsCode, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			uint ret = RlLoadShaderCodeNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlCompileShader")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RlCompileShaderNative([NativeName(NativeNameType.Param, "shaderCode")] [NativeName(NativeNameType.Type, "char const *")] byte* shaderCode, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, uint>)funcTable[721])(shaderCode, type);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, uint>)funcTable[721])((nint)shaderCode, type);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlCompileShader")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlCompileShader([NativeName(NativeNameType.Param, "shaderCode")] [NativeName(NativeNameType.Type, "char const *")] byte* shaderCode, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			uint ret = RlCompileShaderNative(shaderCode, type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlCompileShader")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlCompileShader([NativeName(NativeNameType.Param, "shaderCode")] [NativeName(NativeNameType.Type, "char const *")] ref byte shaderCode, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pshaderCode = &shaderCode)
			{
				uint ret = RlCompileShaderNative((byte*)pshaderCode, type);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlCompileShader")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlCompileShader([NativeName(NativeNameType.Param, "shaderCode")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> shaderCode, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pshaderCode = shaderCode)
			{
				uint ret = RlCompileShaderNative((byte*)pshaderCode, type);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlCompileShader")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlCompileShader([NativeName(NativeNameType.Param, "shaderCode")] [NativeName(NativeNameType.Type, "char const *")] string shaderCode, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (shaderCode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(shaderCode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(shaderCode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = RlCompileShaderNative(pStr0, type);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlLoadShaderProgram")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RlLoadShaderProgramNative([NativeName(NativeNameType.Param, "vShaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vShaderId, [NativeName(NativeNameType.Param, "fShaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint fShaderId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint, uint>)funcTable[722])(vShaderId, fShaderId);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, uint, uint>)funcTable[722])(vShaderId, fShaderId);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadShaderProgram")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderProgram([NativeName(NativeNameType.Param, "vShaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vShaderId, [NativeName(NativeNameType.Param, "fShaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint fShaderId)
		{
			uint ret = RlLoadShaderProgramNative(vShaderId, fShaderId);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUnloadShaderProgram")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlUnloadShaderProgramNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[723])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[723])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadShaderProgram")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadShaderProgram([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlUnloadShaderProgramNative(id);
		}

		[NativeName(NativeNameType.Func, "rlGetLocationUniform")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int RlGetLocationUniformNative([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "uniformName")] [NativeName(NativeNameType.Type, "char const *")] byte* uniformName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte*, int>)funcTable[724])(shaderId, uniformName);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, nint, int>)funcTable[724])(shaderId, (nint)uniformName);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetLocationUniform")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationUniform([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "uniformName")] [NativeName(NativeNameType.Type, "char const *")] byte* uniformName)
		{
			int ret = RlGetLocationUniformNative(shaderId, uniformName);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetLocationUniform")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationUniform([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "uniformName")] [NativeName(NativeNameType.Type, "char const *")] ref byte uniformName)
		{
			fixed (byte* puniformName = &uniformName)
			{
				int ret = RlGetLocationUniformNative(shaderId, (byte*)puniformName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlGetLocationUniform")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationUniform([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "uniformName")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> uniformName)
		{
			fixed (byte* puniformName = uniformName)
			{
				int ret = RlGetLocationUniformNative(shaderId, (byte*)puniformName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlGetLocationUniform")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationUniform([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "uniformName")] [NativeName(NativeNameType.Type, "char const *")] string uniformName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (uniformName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(uniformName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(uniformName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = RlGetLocationUniformNative(shaderId, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetLocationAttrib")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int RlGetLocationAttribNative([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "attribName")] [NativeName(NativeNameType.Type, "char const *")] byte* attribName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte*, int>)funcTable[725])(shaderId, attribName);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, nint, int>)funcTable[725])(shaderId, (nint)attribName);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetLocationAttrib")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationAttrib([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "attribName")] [NativeName(NativeNameType.Type, "char const *")] byte* attribName)
		{
			int ret = RlGetLocationAttribNative(shaderId, attribName);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetLocationAttrib")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationAttrib([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "attribName")] [NativeName(NativeNameType.Type, "char const *")] ref byte attribName)
		{
			fixed (byte* pattribName = &attribName)
			{
				int ret = RlGetLocationAttribNative(shaderId, (byte*)pattribName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlGetLocationAttrib")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationAttrib([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "attribName")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> attribName)
		{
			fixed (byte* pattribName = attribName)
			{
				int ret = RlGetLocationAttribNative(shaderId, (byte*)pattribName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlGetLocationAttrib")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationAttrib([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "attribName")] [NativeName(NativeNameType.Type, "char const *")] string attribName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (attribName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(attribName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(attribName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = RlGetLocationAttribNative(shaderId, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlSetUniform")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetUniformNative([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void const *")] void* value, [NativeName(NativeNameType.Param, "uniformType")] [NativeName(NativeNameType.Type, "int")] int uniformType, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void*, int, int, void>)funcTable[726])(locIndex, value, uniformType, count);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, int, int, void>)funcTable[726])(locIndex, (nint)value, uniformType, count);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetUniform")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetUniform([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void const *")] void* value, [NativeName(NativeNameType.Param, "uniformType")] [NativeName(NativeNameType.Type, "int")] int uniformType, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			RlSetUniformNative(locIndex, value, uniformType, count);
		}

		[NativeName(NativeNameType.Func, "rlSetUniformMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetUniformMatrixNative([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "mat")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 mat)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, Matrix4x4, void>)funcTable[727])(locIndex, mat);
			#else
			((delegate* unmanaged[Cdecl]<int, Matrix4x4, void>)funcTable[727])(locIndex, mat);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetUniformMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetUniformMatrix([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "mat")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 mat)
		{
			RlSetUniformMatrixNative(locIndex, mat);
		}

		[NativeName(NativeNameType.Func, "rlSetUniformMatrices")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetUniformMatricesNative([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "mat")] [NativeName(NativeNameType.Type, "Matrix const *")] Matrix4x4* mat, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, Matrix4x4*, int, void>)funcTable[728])(locIndex, mat, count);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, int, void>)funcTable[728])(locIndex, (nint)mat, count);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetUniformMatrices")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetUniformMatrices([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "mat")] [NativeName(NativeNameType.Type, "Matrix const *")] Matrix4x4* mat, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			RlSetUniformMatricesNative(locIndex, mat, count);
		}

		[NativeName(NativeNameType.Func, "rlSetUniformMatrices")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetUniformMatrices([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "mat")] [NativeName(NativeNameType.Type, "Matrix const *")] ref Matrix4x4 mat, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (Matrix4x4* pmat = &mat)
			{
				RlSetUniformMatricesNative(locIndex, (Matrix4x4*)pmat, count);
			}
		}

		[NativeName(NativeNameType.Func, "rlSetUniformSampler")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetUniformSamplerNative([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "textureId")] [NativeName(NativeNameType.Type, "unsigned int")] uint textureId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[729])(locIndex, textureId);
			#else
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[729])(locIndex, textureId);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetUniformSampler")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetUniformSampler([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "textureId")] [NativeName(NativeNameType.Type, "unsigned int")] uint textureId)
		{
			RlSetUniformSamplerNative(locIndex, textureId);
		}

		[NativeName(NativeNameType.Func, "rlSetShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetShaderNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "locs")] [NativeName(NativeNameType.Type, "int *")] int* locs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[730])(id, locs);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[730])(id, (nint)locs);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetShader([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "locs")] [NativeName(NativeNameType.Type, "int *")] int* locs)
		{
			RlSetShaderNative(id, locs);
		}

		[NativeName(NativeNameType.Func, "rlSetShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetShader([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "locs")] [NativeName(NativeNameType.Type, "int *")] ref int locs)
		{
			fixed (int* plocs = &locs)
			{
				RlSetShaderNative(id, (int*)plocs);
			}
		}

		/// <summary>
		/// Compute shader management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadComputeShaderProgram")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RlLoadComputeShaderProgramNative([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint>)funcTable[731])(shaderId);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, uint>)funcTable[731])(shaderId);
			#endif
		}

		/// <summary>
		/// Compute shader management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadComputeShaderProgram")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadComputeShaderProgram([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId)
		{
			uint ret = RlLoadComputeShaderProgramNative(shaderId);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlComputeShaderDispatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlComputeShaderDispatchNative([NativeName(NativeNameType.Param, "groupX")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupX, [NativeName(NativeNameType.Param, "groupY")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupY, [NativeName(NativeNameType.Param, "groupZ")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupZ)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[732])(groupX, groupY, groupZ);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[732])(groupX, groupY, groupZ);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlComputeShaderDispatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlComputeShaderDispatch([NativeName(NativeNameType.Param, "groupX")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupX, [NativeName(NativeNameType.Param, "groupY")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupY, [NativeName(NativeNameType.Param, "groupZ")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupZ)
		{
			RlComputeShaderDispatchNative(groupX, groupY, groupZ);
		}

		/// <summary>
		/// Shader buffer storage object management (ssbo)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RlLoadShaderBufferNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "unsigned int")] uint size, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "usageHint")] [NativeName(NativeNameType.Type, "int")] int usageHint)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, void*, int, uint>)funcTable[733])(size, data, usageHint);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, nint, int, uint>)funcTable[733])(size, (nint)data, usageHint);
			#endif
		}

		/// <summary>
		/// Shader buffer storage object management (ssbo)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderBuffer([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "unsigned int")] uint size, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "usageHint")] [NativeName(NativeNameType.Type, "int")] int usageHint)
		{
			uint ret = RlLoadShaderBufferNative(size, data, usageHint);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUnloadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlUnloadShaderBufferNative([NativeName(NativeNameType.Param, "ssboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint ssboId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[734])(ssboId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[734])(ssboId);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadShaderBuffer([NativeName(NativeNameType.Param, "ssboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint ssboId)
		{
			RlUnloadShaderBufferNative(ssboId);
		}

		[NativeName(NativeNameType.Func, "rlUpdateShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlUpdateShaderBufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "unsigned int")] uint dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int")] uint offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void*, uint, uint, void>)funcTable[735])(id, data, dataSize, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, uint, uint, void>)funcTable[735])(id, (nint)data, dataSize, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUpdateShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUpdateShaderBuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "unsigned int")] uint dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int")] uint offset)
		{
			RlUpdateShaderBufferNative(id, data, dataSize, offset);
		}

		[NativeName(NativeNameType.Func, "rlBindShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlBindShaderBufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[736])(id, index);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[736])(id, index);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlBindShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlBindShaderBuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			RlBindShaderBufferNative(id, index);
		}

		[NativeName(NativeNameType.Func, "rlReadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlReadShaderBufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "void *")] void* dest, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "unsigned int")] uint count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int")] uint offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void*, uint, uint, void>)funcTable[737])(id, dest, count, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, uint, uint, void>)funcTable[737])(id, (nint)dest, count, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlReadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlReadShaderBuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "void *")] void* dest, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "unsigned int")] uint count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int")] uint offset)
		{
			RlReadShaderBufferNative(id, dest, count, offset);
		}

		[NativeName(NativeNameType.Func, "rlCopyShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlCopyShaderBufferNative([NativeName(NativeNameType.Param, "destId")] [NativeName(NativeNameType.Type, "unsigned int")] uint destId, [NativeName(NativeNameType.Param, "srcId")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcId, [NativeName(NativeNameType.Param, "destOffset")] [NativeName(NativeNameType.Type, "unsigned int")] uint destOffset, [NativeName(NativeNameType.Param, "srcOffset")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcOffset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "unsigned int")] uint count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)funcTable[738])(destId, srcId, destOffset, srcOffset, count);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)funcTable[738])(destId, srcId, destOffset, srcOffset, count);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlCopyShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlCopyShaderBuffer([NativeName(NativeNameType.Param, "destId")] [NativeName(NativeNameType.Type, "unsigned int")] uint destId, [NativeName(NativeNameType.Param, "srcId")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcId, [NativeName(NativeNameType.Param, "destOffset")] [NativeName(NativeNameType.Type, "unsigned int")] uint destOffset, [NativeName(NativeNameType.Param, "srcOffset")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcOffset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "unsigned int")] uint count)
		{
			RlCopyShaderBufferNative(destId, srcId, destOffset, srcOffset, count);
		}

		[NativeName(NativeNameType.Func, "rlGetShaderBufferSize")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RlGetShaderBufferSizeNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint>)funcTable[739])(id);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, uint>)funcTable[739])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetShaderBufferSize")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlGetShaderBufferSize([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			uint ret = RlGetShaderBufferSizeNative(id);
			return ret;
		}

		/// <summary>
		/// Buffer management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlBindImageTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlBindImageTextureNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "readonly")] [NativeName(NativeNameType.Type, "bool")] byte @readonly)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, byte, void>)funcTable[740])(id, index, format, @readonly);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, byte, void>)funcTable[740])(id, index, format, @readonly);
			#endif
		}

		/// <summary>
		/// Buffer management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlBindImageTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlBindImageTexture([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "readonly")] [NativeName(NativeNameType.Type, "bool")] bool @readonly)
		{
			RlBindImageTextureNative(id, index, format, @readonly ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Matrix state management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlGetMatrixModelview")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Matrix4x4 RlGetMatrixModelviewNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Matrix4x4>)funcTable[741])();
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<Matrix4x4>)funcTable[741])();
			#endif
		}

		/// <summary>
		/// Matrix state management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlGetMatrixModelview")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 RlGetMatrixModelview()
		{
			Matrix4x4 ret = RlGetMatrixModelviewNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixProjection")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Matrix4x4 RlGetMatrixProjectionNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Matrix4x4>)funcTable[742])();
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<Matrix4x4>)funcTable[742])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixProjection")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 RlGetMatrixProjection()
		{
			Matrix4x4 ret = RlGetMatrixProjectionNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixTransform")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Matrix4x4 RlGetMatrixTransformNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Matrix4x4>)funcTable[743])();
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<Matrix4x4>)funcTable[743])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixTransform")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 RlGetMatrixTransform()
		{
			Matrix4x4 ret = RlGetMatrixTransformNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixProjectionStereo")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Matrix4x4 RlGetMatrixProjectionStereoNative([NativeName(NativeNameType.Param, "eye")] [NativeName(NativeNameType.Type, "int")] int eye)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, Matrix4x4>)funcTable[744])(eye);
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<int, Matrix4x4>)funcTable[744])(eye);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixProjectionStereo")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 RlGetMatrixProjectionStereo([NativeName(NativeNameType.Param, "eye")] [NativeName(NativeNameType.Type, "int")] int eye)
		{
			Matrix4x4 ret = RlGetMatrixProjectionStereoNative(eye);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixViewOffsetStereo")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Matrix4x4 RlGetMatrixViewOffsetStereoNative([NativeName(NativeNameType.Param, "eye")] [NativeName(NativeNameType.Type, "int")] int eye)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, Matrix4x4>)funcTable[745])(eye);
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<int, Matrix4x4>)funcTable[745])(eye);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixViewOffsetStereo")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 RlGetMatrixViewOffsetStereo([NativeName(NativeNameType.Param, "eye")] [NativeName(NativeNameType.Type, "int")] int eye)
		{
			Matrix4x4 ret = RlGetMatrixViewOffsetStereoNative(eye);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixProjection")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetMatrixProjectionNative([NativeName(NativeNameType.Param, "proj")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 proj)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Matrix4x4, void>)funcTable[746])(proj);
			#else
			((delegate* unmanaged[Cdecl]<Matrix4x4, void>)funcTable[746])(proj);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixProjection")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetMatrixProjection([NativeName(NativeNameType.Param, "proj")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 proj)
		{
			RlSetMatrixProjectionNative(proj);
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixModelview")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetMatrixModelviewNative([NativeName(NativeNameType.Param, "view")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 view)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Matrix4x4, void>)funcTable[747])(view);
			#else
			((delegate* unmanaged[Cdecl]<Matrix4x4, void>)funcTable[747])(view);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixModelview")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetMatrixModelview([NativeName(NativeNameType.Param, "view")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 view)
		{
			RlSetMatrixModelviewNative(view);
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixProjectionStereo")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetMatrixProjectionStereoNative([NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 right, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 left)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Matrix4x4, Matrix4x4, void>)funcTable[748])(right, left);
			#else
			((delegate* unmanaged[Cdecl]<Matrix4x4, Matrix4x4, void>)funcTable[748])(right, left);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixProjectionStereo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetMatrixProjectionStereo([NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 right, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 left)
		{
			RlSetMatrixProjectionStereoNative(right, left);
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixViewOffsetStereo")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlSetMatrixViewOffsetStereoNative([NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 right, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 left)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Matrix4x4, Matrix4x4, void>)funcTable[749])(right, left);
			#else
			((delegate* unmanaged[Cdecl]<Matrix4x4, Matrix4x4, void>)funcTable[749])(right, left);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixViewOffsetStereo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetMatrixViewOffsetStereo([NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 right, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 left)
		{
			RlSetMatrixViewOffsetStereoNative(right, left);
		}

		/// <summary>
		/// Quick and dirty cube/quad buffers load->draw->unload<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadDrawCube")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlLoadDrawCubeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[750])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[750])();
			#endif
		}

		/// <summary>
		/// Quick and dirty cube/quad buffers load->draw->unload<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadDrawCube")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlLoadDrawCube()
		{
			RlLoadDrawCubeNative();
		}

		[NativeName(NativeNameType.Func, "rlLoadDrawQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RlLoadDrawQuadNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[751])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[751])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadDrawQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlLoadDrawQuad()
		{
			RlLoadDrawQuadNative();
		}

	}
}
