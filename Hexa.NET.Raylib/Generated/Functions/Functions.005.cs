// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Raylib
{
	public unsafe partial class Raylib
	{

		[NativeName(NativeNameType.Func, "rlSetVertexAttributeDivisor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetVertexAttributeDivisor([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "divisor")] [NativeName(NativeNameType.Type, "int")] int divisor)
		{
			RlSetVertexAttributeDivisorNative(index, divisor);
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttributeDefault")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetVertexAttributeDefaultNative([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const void*")] void* value, [NativeName(NativeNameType.Param, "attribType")] [NativeName(NativeNameType.Type, "int")] int attribType, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void*, int, int, void>)vt[689])(locIndex, value, attribType, count);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, int, int, void>)vt[689])(locIndex, (nint)value, attribType, count);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttributeDefault")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetVertexAttributeDefault([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const void*")] void* value, [NativeName(NativeNameType.Param, "attribType")] [NativeName(NativeNameType.Type, "int")] int attribType, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			RlSetVertexAttributeDefaultNative(locIndex, value, attribType, count);
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDrawVertexArrayNative([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[690])(offset, count);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[690])(offset, count);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawVertexArray([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			RlDrawVertexArrayNative(offset, count);
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayElements")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDrawVertexArrayElementsNative([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void*, void>)vt[691])(offset, count, buffer);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)vt[691])(offset, count, (nint)buffer);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayElements")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawVertexArrayElements([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer)
		{
			RlDrawVertexArrayElementsNative(offset, count, buffer);
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayInstanced")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDrawVertexArrayInstancedNative([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "instances")] [NativeName(NativeNameType.Type, "int")] int instances)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)vt[692])(offset, count, instances);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)vt[692])(offset, count, instances);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayInstanced")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawVertexArrayInstanced([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "instances")] [NativeName(NativeNameType.Type, "int")] int instances)
		{
			RlDrawVertexArrayInstancedNative(offset, count, instances);
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayElementsInstanced")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDrawVertexArrayElementsInstancedNative([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer, [NativeName(NativeNameType.Param, "instances")] [NativeName(NativeNameType.Type, "int")] int instances)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void*, int, void>)vt[693])(offset, count, buffer, instances);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, int, void>)vt[693])(offset, count, (nint)buffer, instances);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayElementsInstanced")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawVertexArrayElementsInstanced([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer, [NativeName(NativeNameType.Param, "instances")] [NativeName(NativeNameType.Type, "int")] int instances)
		{
			RlDrawVertexArrayElementsInstancedNative(offset, count, buffer, instances);
		}

		/// <summary>
		/// Textures management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadTexture")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadTextureNative([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmapCount")] [NativeName(NativeNameType.Type, "int")] int mipmapCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, int, int, int, uint>)vt[694])(data, width, height, format, mipmapCount);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, int, int, int, uint>)vt[694])((nint)data, width, height, format, mipmapCount);
			#endif
		}

		/// <summary>
		/// Textures management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadTexture")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadTexture([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmapCount")] [NativeName(NativeNameType.Type, "int")] int mipmapCount)
		{
			uint ret = RlLoadTextureNative(data, width, height, format, mipmapCount);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlLoadTextureDepth")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadTextureDepthNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "useRenderBuffer")] [NativeName(NativeNameType.Type, "bool")] byte useRenderBuffer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, byte, uint>)vt[695])(width, height, useRenderBuffer);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<int, int, byte, uint>)vt[695])(width, height, useRenderBuffer);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadTextureDepth")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadTextureDepth([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "useRenderBuffer")] [NativeName(NativeNameType.Type, "bool")] bool useRenderBuffer)
		{
			uint ret = RlLoadTextureDepthNative(width, height, useRenderBuffer ? (byte)1 : (byte)0);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlLoadTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadTextureCubemapNative([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, int, uint>)vt[696])(data, size, format);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, int, uint>)vt[696])((nint)data, size, format);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadTextureCubemap([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			uint ret = RlLoadTextureCubemapNative(data, size, format);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUpdateTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUpdateTextureNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void*, void>)vt[697])(id, offsetX, offsetY, width, height, format, data);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, nint, void>)vt[697])(id, offsetX, offsetY, width, height, format, (nint)data);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUpdateTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUpdateTexture([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			RlUpdateTextureNative(id, offsetX, offsetY, width, height, format, data);
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlGetGlTextureFormatsNative([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glType)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, uint*, uint*, void>)vt[698])(format, glInternalFormat, glFormat, glType);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, nint, nint, void>)vt[698])(format, (nint)glInternalFormat, (nint)glFormat, (nint)glType);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glType)
		{
			RlGetGlTextureFormatsNative(format, glInternalFormat, glFormat, glType);
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glType)
		{
			fixed (uint* pglInternalFormat = &glInternalFormat)
			{
				RlGetGlTextureFormatsNative(format, (uint*)pglInternalFormat, glFormat, glType);
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glType)
		{
			fixed (uint* pglFormat = &glFormat)
			{
				RlGetGlTextureFormatsNative(format, glInternalFormat, (uint*)pglFormat, glType);
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glType)
		{
			fixed (uint* pglInternalFormat = &glInternalFormat)
			{
				fixed (uint* pglFormat = &glFormat)
				{
					RlGetGlTextureFormatsNative(format, (uint*)pglInternalFormat, (uint*)pglFormat, glType);
				}
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glType)
		{
			fixed (uint* pglType = &glType)
			{
				RlGetGlTextureFormatsNative(format, glInternalFormat, glFormat, (uint*)pglType);
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glType)
		{
			fixed (uint* pglInternalFormat = &glInternalFormat)
			{
				fixed (uint* pglType = &glType)
				{
					RlGetGlTextureFormatsNative(format, (uint*)pglInternalFormat, glFormat, (uint*)pglType);
				}
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glType)
		{
			fixed (uint* pglFormat = &glFormat)
			{
				fixed (uint* pglType = &glType)
				{
					RlGetGlTextureFormatsNative(format, glInternalFormat, (uint*)pglFormat, (uint*)pglType);
				}
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glType)
		{
			fixed (uint* pglInternalFormat = &glInternalFormat)
			{
				fixed (uint* pglFormat = &glFormat)
				{
					fixed (uint* pglType = &glType)
					{
						RlGetGlTextureFormatsNative(format, (uint*)pglInternalFormat, (uint*)pglFormat, (uint*)pglType);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "rlGetPixelFormatName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* RlGetPixelFormatNameNative([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "unsigned int")] uint format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte*>)vt[699])(format);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<uint, nint>)vt[699])(format);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetPixelFormatName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* RlGetPixelFormatName([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "unsigned int")] uint format)
		{
			byte* ret = RlGetPixelFormatNameNative(format);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetPixelFormatName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string RlGetPixelFormatNameS([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "unsigned int")] uint format)
		{
			string ret = Utils.DecodeStringUTF8(RlGetPixelFormatNameNative(format));
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUnloadTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUnloadTextureNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[700])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[700])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadTexture([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlUnloadTextureNative(id);
		}

		[NativeName(NativeNameType.Func, "rlGenTextureMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlGenTextureMipmapsNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmaps")] [NativeName(NativeNameType.Type, "int*")] int* mipmaps)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int*, void>)vt[701])(id, width, height, format, mipmaps);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, nint, void>)vt[701])(id, width, height, format, (nint)mipmaps);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGenTextureMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGenTextureMipmaps([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmaps")] [NativeName(NativeNameType.Type, "int*")] int* mipmaps)
		{
			RlGenTextureMipmapsNative(id, width, height, format, mipmaps);
		}

		[NativeName(NativeNameType.Func, "rlGenTextureMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGenTextureMipmaps([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmaps")] [NativeName(NativeNameType.Type, "int*")] ref int mipmaps)
		{
			fixed (int* pmipmaps = &mipmaps)
			{
				RlGenTextureMipmapsNative(id, width, height, format, (int*)pmipmaps);
			}
		}

		[NativeName(NativeNameType.Func, "rlReadTexturePixels")]
		[return: NativeName(NativeNameType.Type, "void*")]
		internal static void* RlReadTexturePixelsNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, int, int, int, void*>)vt[702])(id, width, height, format);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<uint, int, int, int, nint>)vt[702])(id, width, height, format);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlReadTexturePixels")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* RlReadTexturePixels([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			void* ret = RlReadTexturePixelsNative(id, width, height, format);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlReadScreenPixels")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		internal static byte* RlReadScreenPixelsNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, byte*>)vt[703])(width, height);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, int, nint>)vt[703])(width, height);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlReadScreenPixels")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* RlReadScreenPixels([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			byte* ret = RlReadScreenPixelsNative(width, height);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlReadScreenPixels")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string RlReadScreenPixelsS([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			string ret = Utils.DecodeStringUTF8(RlReadScreenPixelsNative(width, height));
			return ret;
		}

		/// <summary>
		/// Framebuffer management (fbo)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadFramebuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadFramebufferNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)vt[704])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)vt[704])();
			#endif
		}

		/// <summary>
		/// Framebuffer management (fbo)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadFramebuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadFramebuffer()
		{
			uint ret = RlLoadFramebufferNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlFramebufferAttach")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlFramebufferAttachNative([NativeName(NativeNameType.Param, "fboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint fboId, [NativeName(NativeNameType.Param, "texId")] [NativeName(NativeNameType.Type, "unsigned int")] uint texId, [NativeName(NativeNameType.Param, "attachType")] [NativeName(NativeNameType.Type, "int")] int attachType, [NativeName(NativeNameType.Param, "texType")] [NativeName(NativeNameType.Type, "int")] int texType, [NativeName(NativeNameType.Param, "mipLevel")] [NativeName(NativeNameType.Type, "int")] int mipLevel)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, void>)vt[705])(fboId, texId, attachType, texType, mipLevel);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, void>)vt[705])(fboId, texId, attachType, texType, mipLevel);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlFramebufferAttach")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlFramebufferAttach([NativeName(NativeNameType.Param, "fboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint fboId, [NativeName(NativeNameType.Param, "texId")] [NativeName(NativeNameType.Type, "unsigned int")] uint texId, [NativeName(NativeNameType.Param, "attachType")] [NativeName(NativeNameType.Type, "int")] int attachType, [NativeName(NativeNameType.Param, "texType")] [NativeName(NativeNameType.Type, "int")] int texType, [NativeName(NativeNameType.Param, "mipLevel")] [NativeName(NativeNameType.Type, "int")] int mipLevel)
		{
			RlFramebufferAttachNative(fboId, texId, attachType, texType, mipLevel);
		}

		[NativeName(NativeNameType.Func, "rlFramebufferComplete")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte RlFramebufferCompleteNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)vt[706])(id);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)vt[706])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlFramebufferComplete")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RlFramebufferComplete([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			byte ret = RlFramebufferCompleteNative(id);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "rlUnloadFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUnloadFramebufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[707])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[707])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadFramebuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlUnloadFramebufferNative(id);
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadShaderCodeNative([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* fsCode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, uint>)vt[708])(vsCode, fsCode);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, uint>)vt[708])((nint)vsCode, (nint)fsCode);
			#endif
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* fsCode)
		{
			uint ret = RlLoadShaderCodeNative(vsCode, fsCode);
			return ret;
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] ref byte vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* fsCode)
		{
			fixed (byte* pvsCode = &vsCode)
			{
				uint ret = RlLoadShaderCodeNative((byte*)pvsCode, fsCode);
				return ret;
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* fsCode)
		{
			fixed (byte* pvsCode = vsCode)
			{
				uint ret = RlLoadShaderCodeNative((byte*)pvsCode, fsCode);
				return ret;
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] string vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* fsCode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (vsCode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(vsCode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(vsCode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = RlLoadShaderCodeNative(pStr0, fsCode);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] ref byte fsCode)
		{
			fixed (byte* pfsCode = &fsCode)
			{
				uint ret = RlLoadShaderCodeNative(vsCode, (byte*)pfsCode);
				return ret;
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fsCode)
		{
			fixed (byte* pfsCode = fsCode)
			{
				uint ret = RlLoadShaderCodeNative(vsCode, (byte*)pfsCode);
				return ret;
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] string fsCode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fsCode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fsCode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fsCode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = RlLoadShaderCodeNative(vsCode, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] ref byte vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] ref byte fsCode)
		{
			fixed (byte* pvsCode = &vsCode)
			{
				fixed (byte* pfsCode = &fsCode)
				{
					uint ret = RlLoadShaderCodeNative((byte*)pvsCode, (byte*)pfsCode);
					return ret;
				}
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fsCode)
		{
			fixed (byte* pvsCode = vsCode)
			{
				fixed (byte* pfsCode = fsCode)
				{
					uint ret = RlLoadShaderCodeNative((byte*)pvsCode, (byte*)pfsCode);
					return ret;
				}
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] string vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] string fsCode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (vsCode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(vsCode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(vsCode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (fsCode != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(fsCode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(fsCode, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			uint ret = RlLoadShaderCodeNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlCompileShader")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlCompileShaderNative([NativeName(NativeNameType.Param, "shaderCode")] [NativeName(NativeNameType.Type, "const char*")] byte* shaderCode, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, uint>)vt[709])(shaderCode, type);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, uint>)vt[709])((nint)shaderCode, type);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlCompileShader")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlCompileShader([NativeName(NativeNameType.Param, "shaderCode")] [NativeName(NativeNameType.Type, "const char*")] byte* shaderCode, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			uint ret = RlCompileShaderNative(shaderCode, type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlCompileShader")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlCompileShader([NativeName(NativeNameType.Param, "shaderCode")] [NativeName(NativeNameType.Type, "const char*")] ref byte shaderCode, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pshaderCode = &shaderCode)
			{
				uint ret = RlCompileShaderNative((byte*)pshaderCode, type);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlCompileShader")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlCompileShader([NativeName(NativeNameType.Param, "shaderCode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> shaderCode, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pshaderCode = shaderCode)
			{
				uint ret = RlCompileShaderNative((byte*)pshaderCode, type);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlCompileShader")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlCompileShader([NativeName(NativeNameType.Param, "shaderCode")] [NativeName(NativeNameType.Type, "const char*")] string shaderCode, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (shaderCode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(shaderCode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(shaderCode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = RlCompileShaderNative(pStr0, type);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlLoadShaderProgram")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadShaderProgramNative([NativeName(NativeNameType.Param, "vShaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vShaderId, [NativeName(NativeNameType.Param, "fShaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint fShaderId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint, uint>)vt[710])(vShaderId, fShaderId);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, uint, uint>)vt[710])(vShaderId, fShaderId);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadShaderProgram")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderProgram([NativeName(NativeNameType.Param, "vShaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vShaderId, [NativeName(NativeNameType.Param, "fShaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint fShaderId)
		{
			uint ret = RlLoadShaderProgramNative(vShaderId, fShaderId);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUnloadShaderProgram")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUnloadShaderProgramNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[711])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[711])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadShaderProgram")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadShaderProgram([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlUnloadShaderProgramNative(id);
		}

		[NativeName(NativeNameType.Func, "rlGetLocationUniform")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int RlGetLocationUniformNative([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "uniformName")] [NativeName(NativeNameType.Type, "const char*")] byte* uniformName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte*, int>)vt[712])(shaderId, uniformName);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, nint, int>)vt[712])(shaderId, (nint)uniformName);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetLocationUniform")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationUniform([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "uniformName")] [NativeName(NativeNameType.Type, "const char*")] byte* uniformName)
		{
			int ret = RlGetLocationUniformNative(shaderId, uniformName);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetLocationUniform")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationUniform([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "uniformName")] [NativeName(NativeNameType.Type, "const char*")] ref byte uniformName)
		{
			fixed (byte* puniformName = &uniformName)
			{
				int ret = RlGetLocationUniformNative(shaderId, (byte*)puniformName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlGetLocationUniform")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationUniform([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "uniformName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> uniformName)
		{
			fixed (byte* puniformName = uniformName)
			{
				int ret = RlGetLocationUniformNative(shaderId, (byte*)puniformName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlGetLocationUniform")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationUniform([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "uniformName")] [NativeName(NativeNameType.Type, "const char*")] string uniformName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (uniformName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(uniformName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(uniformName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = RlGetLocationUniformNative(shaderId, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetLocationAttrib")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int RlGetLocationAttribNative([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "attribName")] [NativeName(NativeNameType.Type, "const char*")] byte* attribName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte*, int>)vt[713])(shaderId, attribName);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, nint, int>)vt[713])(shaderId, (nint)attribName);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetLocationAttrib")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationAttrib([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "attribName")] [NativeName(NativeNameType.Type, "const char*")] byte* attribName)
		{
			int ret = RlGetLocationAttribNative(shaderId, attribName);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetLocationAttrib")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationAttrib([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "attribName")] [NativeName(NativeNameType.Type, "const char*")] ref byte attribName)
		{
			fixed (byte* pattribName = &attribName)
			{
				int ret = RlGetLocationAttribNative(shaderId, (byte*)pattribName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlGetLocationAttrib")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationAttrib([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "attribName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> attribName)
		{
			fixed (byte* pattribName = attribName)
			{
				int ret = RlGetLocationAttribNative(shaderId, (byte*)pattribName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlGetLocationAttrib")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationAttrib([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "attribName")] [NativeName(NativeNameType.Type, "const char*")] string attribName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (attribName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(attribName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(attribName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = RlGetLocationAttribNative(shaderId, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlSetUniform")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetUniformNative([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const void*")] void* value, [NativeName(NativeNameType.Param, "uniformType")] [NativeName(NativeNameType.Type, "int")] int uniformType, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void*, int, int, void>)vt[714])(locIndex, value, uniformType, count);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, int, int, void>)vt[714])(locIndex, (nint)value, uniformType, count);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetUniform")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetUniform([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const void*")] void* value, [NativeName(NativeNameType.Param, "uniformType")] [NativeName(NativeNameType.Type, "int")] int uniformType, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			RlSetUniformNative(locIndex, value, uniformType, count);
		}

		[NativeName(NativeNameType.Func, "rlSetUniformMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetUniformMatrixNative([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "mat")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 mat)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, Matrix4x4, void>)vt[715])(locIndex, mat);
			#else
			((delegate* unmanaged[Cdecl]<int, Matrix4x4, void>)vt[715])(locIndex, mat);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetUniformMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetUniformMatrix([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "mat")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 mat)
		{
			RlSetUniformMatrixNative(locIndex, mat);
		}

		[NativeName(NativeNameType.Func, "rlSetUniformSampler")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetUniformSamplerNative([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "textureId")] [NativeName(NativeNameType.Type, "unsigned int")] uint textureId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint, void>)vt[716])(locIndex, textureId);
			#else
			((delegate* unmanaged[Cdecl]<int, uint, void>)vt[716])(locIndex, textureId);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetUniformSampler")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetUniformSampler([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "textureId")] [NativeName(NativeNameType.Type, "unsigned int")] uint textureId)
		{
			RlSetUniformSamplerNative(locIndex, textureId);
		}

		[NativeName(NativeNameType.Func, "rlSetShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetShaderNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "locs")] [NativeName(NativeNameType.Type, "int*")] int* locs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)vt[717])(id, locs);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)vt[717])(id, (nint)locs);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetShader([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "locs")] [NativeName(NativeNameType.Type, "int*")] int* locs)
		{
			RlSetShaderNative(id, locs);
		}

		[NativeName(NativeNameType.Func, "rlSetShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetShader([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "locs")] [NativeName(NativeNameType.Type, "int*")] ref int locs)
		{
			fixed (int* plocs = &locs)
			{
				RlSetShaderNative(id, (int*)plocs);
			}
		}

		/// <summary>
		/// Compute shader management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadComputeShaderProgram")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadComputeShaderProgramNative([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint>)vt[718])(shaderId);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, uint>)vt[718])(shaderId);
			#endif
		}

		/// <summary>
		/// Compute shader management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadComputeShaderProgram")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadComputeShaderProgram([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId)
		{
			uint ret = RlLoadComputeShaderProgramNative(shaderId);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlComputeShaderDispatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlComputeShaderDispatchNative([NativeName(NativeNameType.Param, "groupX")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupX, [NativeName(NativeNameType.Param, "groupY")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupY, [NativeName(NativeNameType.Param, "groupZ")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupZ)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vt[719])(groupX, groupY, groupZ);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vt[719])(groupX, groupY, groupZ);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlComputeShaderDispatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlComputeShaderDispatch([NativeName(NativeNameType.Param, "groupX")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupX, [NativeName(NativeNameType.Param, "groupY")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupY, [NativeName(NativeNameType.Param, "groupZ")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupZ)
		{
			RlComputeShaderDispatchNative(groupX, groupY, groupZ);
		}

		/// <summary>
		/// Shader buffer storage object management (ssbo)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadShaderBufferNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "unsigned int")] uint size, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "usageHint")] [NativeName(NativeNameType.Type, "int")] int usageHint)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, void*, int, uint>)vt[720])(size, data, usageHint);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, nint, int, uint>)vt[720])(size, (nint)data, usageHint);
			#endif
		}

		/// <summary>
		/// Shader buffer storage object management (ssbo)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderBuffer([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "unsigned int")] uint size, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "usageHint")] [NativeName(NativeNameType.Type, "int")] int usageHint)
		{
			uint ret = RlLoadShaderBufferNative(size, data, usageHint);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUnloadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUnloadShaderBufferNative([NativeName(NativeNameType.Param, "ssboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint ssboId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[721])(ssboId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[721])(ssboId);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadShaderBuffer([NativeName(NativeNameType.Param, "ssboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint ssboId)
		{
			RlUnloadShaderBufferNative(ssboId);
		}

		[NativeName(NativeNameType.Func, "rlUpdateShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUpdateShaderBufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "unsigned int")] uint dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int")] uint offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void*, uint, uint, void>)vt[722])(id, data, dataSize, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, uint, uint, void>)vt[722])(id, (nint)data, dataSize, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUpdateShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUpdateShaderBuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "unsigned int")] uint dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int")] uint offset)
		{
			RlUpdateShaderBufferNative(id, data, dataSize, offset);
		}

		[NativeName(NativeNameType.Func, "rlBindShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlBindShaderBufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)vt[723])(id, index);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)vt[723])(id, index);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlBindShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlBindShaderBuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			RlBindShaderBufferNative(id, index);
		}

		[NativeName(NativeNameType.Func, "rlReadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlReadShaderBufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "void*")] void* dest, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "unsigned int")] uint count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int")] uint offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void*, uint, uint, void>)vt[724])(id, dest, count, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, uint, uint, void>)vt[724])(id, (nint)dest, count, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlReadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlReadShaderBuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "void*")] void* dest, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "unsigned int")] uint count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int")] uint offset)
		{
			RlReadShaderBufferNative(id, dest, count, offset);
		}

		[NativeName(NativeNameType.Func, "rlCopyShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlCopyShaderBufferNative([NativeName(NativeNameType.Param, "destId")] [NativeName(NativeNameType.Type, "unsigned int")] uint destId, [NativeName(NativeNameType.Param, "srcId")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcId, [NativeName(NativeNameType.Param, "destOffset")] [NativeName(NativeNameType.Type, "unsigned int")] uint destOffset, [NativeName(NativeNameType.Param, "srcOffset")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcOffset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "unsigned int")] uint count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)vt[725])(destId, srcId, destOffset, srcOffset, count);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)vt[725])(destId, srcId, destOffset, srcOffset, count);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlCopyShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlCopyShaderBuffer([NativeName(NativeNameType.Param, "destId")] [NativeName(NativeNameType.Type, "unsigned int")] uint destId, [NativeName(NativeNameType.Param, "srcId")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcId, [NativeName(NativeNameType.Param, "destOffset")] [NativeName(NativeNameType.Type, "unsigned int")] uint destOffset, [NativeName(NativeNameType.Param, "srcOffset")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcOffset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "unsigned int")] uint count)
		{
			RlCopyShaderBufferNative(destId, srcId, destOffset, srcOffset, count);
		}

		[NativeName(NativeNameType.Func, "rlGetShaderBufferSize")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlGetShaderBufferSizeNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint>)vt[726])(id);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, uint>)vt[726])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetShaderBufferSize")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlGetShaderBufferSize([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			uint ret = RlGetShaderBufferSizeNative(id);
			return ret;
		}

		/// <summary>
		/// Buffer management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlBindImageTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlBindImageTextureNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "readonly")] [NativeName(NativeNameType.Type, "bool")] byte @readonly)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, byte, void>)vt[727])(id, index, format, @readonly);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, byte, void>)vt[727])(id, index, format, @readonly);
			#endif
		}

		/// <summary>
		/// Buffer management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlBindImageTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlBindImageTexture([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "readonly")] [NativeName(NativeNameType.Type, "bool")] bool @readonly)
		{
			RlBindImageTextureNative(id, index, format, @readonly ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Matrix state management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlGetMatrixModelview")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		internal static Matrix4x4 RlGetMatrixModelviewNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Matrix4x4>)vt[728])();
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<Matrix4x4>)vt[728])();
			#endif
		}

		/// <summary>
		/// Matrix state management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlGetMatrixModelview")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 RlGetMatrixModelview()
		{
			Matrix4x4 ret = RlGetMatrixModelviewNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixProjection")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		internal static Matrix4x4 RlGetMatrixProjectionNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Matrix4x4>)vt[729])();
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<Matrix4x4>)vt[729])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixProjection")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 RlGetMatrixProjection()
		{
			Matrix4x4 ret = RlGetMatrixProjectionNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixTransform")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		internal static Matrix4x4 RlGetMatrixTransformNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Matrix4x4>)vt[730])();
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<Matrix4x4>)vt[730])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixTransform")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 RlGetMatrixTransform()
		{
			Matrix4x4 ret = RlGetMatrixTransformNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixProjectionStereo")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		internal static Matrix4x4 RlGetMatrixProjectionStereoNative([NativeName(NativeNameType.Param, "eye")] [NativeName(NativeNameType.Type, "int")] int eye)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, Matrix4x4>)vt[731])(eye);
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<int, Matrix4x4>)vt[731])(eye);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixProjectionStereo")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 RlGetMatrixProjectionStereo([NativeName(NativeNameType.Param, "eye")] [NativeName(NativeNameType.Type, "int")] int eye)
		{
			Matrix4x4 ret = RlGetMatrixProjectionStereoNative(eye);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixViewOffsetStereo")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		internal static Matrix4x4 RlGetMatrixViewOffsetStereoNative([NativeName(NativeNameType.Param, "eye")] [NativeName(NativeNameType.Type, "int")] int eye)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, Matrix4x4>)vt[732])(eye);
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<int, Matrix4x4>)vt[732])(eye);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixViewOffsetStereo")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 RlGetMatrixViewOffsetStereo([NativeName(NativeNameType.Param, "eye")] [NativeName(NativeNameType.Type, "int")] int eye)
		{
			Matrix4x4 ret = RlGetMatrixViewOffsetStereoNative(eye);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixProjection")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetMatrixProjectionNative([NativeName(NativeNameType.Param, "proj")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 proj)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Matrix4x4, void>)vt[733])(proj);
			#else
			((delegate* unmanaged[Cdecl]<Matrix4x4, void>)vt[733])(proj);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixProjection")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetMatrixProjection([NativeName(NativeNameType.Param, "proj")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 proj)
		{
			RlSetMatrixProjectionNative(proj);
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixModelview")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetMatrixModelviewNative([NativeName(NativeNameType.Param, "view")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 view)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Matrix4x4, void>)vt[734])(view);
			#else
			((delegate* unmanaged[Cdecl]<Matrix4x4, void>)vt[734])(view);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixModelview")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetMatrixModelview([NativeName(NativeNameType.Param, "view")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 view)
		{
			RlSetMatrixModelviewNative(view);
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixProjectionStereo")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetMatrixProjectionStereoNative([NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 right, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 left)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Matrix4x4, Matrix4x4, void>)vt[735])(right, left);
			#else
			((delegate* unmanaged[Cdecl]<Matrix4x4, Matrix4x4, void>)vt[735])(right, left);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixProjectionStereo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetMatrixProjectionStereo([NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 right, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 left)
		{
			RlSetMatrixProjectionStereoNative(right, left);
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixViewOffsetStereo")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetMatrixViewOffsetStereoNative([NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 right, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 left)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Matrix4x4, Matrix4x4, void>)vt[736])(right, left);
			#else
			((delegate* unmanaged[Cdecl]<Matrix4x4, Matrix4x4, void>)vt[736])(right, left);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixViewOffsetStereo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetMatrixViewOffsetStereo([NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 right, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 left)
		{
			RlSetMatrixViewOffsetStereoNative(right, left);
		}

		/// <summary>
		/// Quick and dirty cube/quad buffers load->draw->unload<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadDrawCube")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlLoadDrawCubeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[737])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[737])();
			#endif
		}

		/// <summary>
		/// Quick and dirty cube/quad buffers load->draw->unload<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadDrawCube")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlLoadDrawCube()
		{
			RlLoadDrawCubeNative();
		}

		[NativeName(NativeNameType.Func, "rlLoadDrawQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlLoadDrawQuadNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[738])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[738])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadDrawQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlLoadDrawQuad()
		{
			RlLoadDrawQuadNative();
		}

	}
}
