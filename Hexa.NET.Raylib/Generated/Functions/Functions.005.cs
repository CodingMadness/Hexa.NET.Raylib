// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Raylib
{
	public unsafe partial class Raylib
	{

		[NativeName(NativeNameType.Func, "rlGetMatrixProjectionStereo")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		internal static Matrix4x4 RlGetMatrixProjectionStereoNative([NativeName(NativeNameType.Param, "eye")] [NativeName(NativeNameType.Type, "int")] int eye)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, Matrix4x4>)vt[704])(eye);
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<int, Matrix4x4>)vt[704])(eye);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixProjectionStereo")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 RlGetMatrixProjectionStereo([NativeName(NativeNameType.Param, "eye")] [NativeName(NativeNameType.Type, "int")] int eye)
		{
			Matrix4x4 ret = RlGetMatrixProjectionStereoNative(eye);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixViewOffsetStereo")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		internal static Matrix4x4 RlGetMatrixViewOffsetStereoNative([NativeName(NativeNameType.Param, "eye")] [NativeName(NativeNameType.Type, "int")] int eye)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, Matrix4x4>)vt[705])(eye);
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<int, Matrix4x4>)vt[705])(eye);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixViewOffsetStereo")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 RlGetMatrixViewOffsetStereo([NativeName(NativeNameType.Param, "eye")] [NativeName(NativeNameType.Type, "int")] int eye)
		{
			Matrix4x4 ret = RlGetMatrixViewOffsetStereoNative(eye);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixProjection")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetMatrixProjectionNative([NativeName(NativeNameType.Param, "proj")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 proj)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Matrix4x4, void>)vt[706])(proj);
			#else
			((delegate* unmanaged[Cdecl]<Matrix4x4, void>)vt[706])(proj);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixProjection")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetMatrixProjection([NativeName(NativeNameType.Param, "proj")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 proj)
		{
			RlSetMatrixProjectionNative(proj);
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixModelview")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetMatrixModelviewNative([NativeName(NativeNameType.Param, "view")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 view)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Matrix4x4, void>)vt[707])(view);
			#else
			((delegate* unmanaged[Cdecl]<Matrix4x4, void>)vt[707])(view);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixModelview")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetMatrixModelview([NativeName(NativeNameType.Param, "view")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 view)
		{
			RlSetMatrixModelviewNative(view);
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixProjectionStereo")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetMatrixProjectionStereoNative([NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 right, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 left)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Matrix4x4, Matrix4x4, void>)vt[708])(right, left);
			#else
			((delegate* unmanaged[Cdecl]<Matrix4x4, Matrix4x4, void>)vt[708])(right, left);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixProjectionStereo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetMatrixProjectionStereo([NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 right, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 left)
		{
			RlSetMatrixProjectionStereoNative(right, left);
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixViewOffsetStereo")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetMatrixViewOffsetStereoNative([NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 right, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 left)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Matrix4x4, Matrix4x4, void>)vt[709])(right, left);
			#else
			((delegate* unmanaged[Cdecl]<Matrix4x4, Matrix4x4, void>)vt[709])(right, left);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetMatrixViewOffsetStereo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetMatrixViewOffsetStereo([NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 right, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 left)
		{
			RlSetMatrixViewOffsetStereoNative(right, left);
		}

		/// <summary>
		/// Quick and dirty cube/quad buffers load->draw->unload<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadDrawCube")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlLoadDrawCubeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[710])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[710])();
			#endif
		}

		/// <summary>
		/// Quick and dirty cube/quad buffers load->draw->unload<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadDrawCube")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlLoadDrawCube()
		{
			RlLoadDrawCubeNative();
		}

		[NativeName(NativeNameType.Func, "rlLoadDrawQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlLoadDrawQuadNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[711])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[711])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadDrawQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlLoadDrawQuad()
		{
			RlLoadDrawQuadNative();
		}

	}
}
