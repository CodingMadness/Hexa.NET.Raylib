// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Raylib
{
	public unsafe partial class Raylib
	{

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string ExportImageToMemoryS([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] string fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int*")] ref int fileSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pfileSize = &fileSize)
			{
				string ret = Utils.DecodeStringUTF8(ExportImageToMemoryNative(image, pStr0, (int*)pfileSize));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ExportImageAsCodeNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, byte*, byte>)vt[281])(image, fileName);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Image, nint, byte>)vt[281])(image, (nint)fileName);
			#endif
		}

		[NativeName(NativeNameType.Func, "ExportImageAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportImageAsCode([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			byte ret = ExportImageAsCodeNative(image, fileName);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "ExportImageAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportImageAsCode([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				byte ret = ExportImageAsCodeNative(image, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportImageAsCode([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				byte ret = ExportImageAsCodeNative(image, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportImageAsCode([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ExportImageAsCodeNative(image, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Image generation functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GenImageColor")]
		[return: NativeName(NativeNameType.Type, "Image")]
		internal static Image GenImageColorNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, Color, Image>)vt[282])(width, height, color);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, Color, Image>)vt[282])(width, height, color);
			#endif
		}

		/// <summary>
		/// Image generation functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GenImageColor")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageColor([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			Image ret = GenImageColorNative(width, height, color);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageGradientLinear")]
		[return: NativeName(NativeNameType.Type, "Image")]
		internal static Image GenImageGradientLinearNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "direction")] [NativeName(NativeNameType.Type, "int")] int direction, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Color")] Color start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Color")] Color end)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int, Color, Color, Image>)vt[283])(width, height, direction, start, end);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, int, Color, Color, Image>)vt[283])(width, height, direction, start, end);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageGradientLinear")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageGradientLinear([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "direction")] [NativeName(NativeNameType.Type, "int")] int direction, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Color")] Color start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Color")] Color end)
		{
			Image ret = GenImageGradientLinearNative(width, height, direction, start, end);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageGradientRadial")]
		[return: NativeName(NativeNameType.Type, "Image")]
		internal static Image GenImageGradientRadialNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "density")] [NativeName(NativeNameType.Type, "float")] float density, [NativeName(NativeNameType.Param, "inner")] [NativeName(NativeNameType.Type, "Color")] Color inner, [NativeName(NativeNameType.Param, "outer")] [NativeName(NativeNameType.Type, "Color")] Color outer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, float, Color, Color, Image>)vt[284])(width, height, density, inner, outer);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, float, Color, Color, Image>)vt[284])(width, height, density, inner, outer);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageGradientRadial")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageGradientRadial([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "density")] [NativeName(NativeNameType.Type, "float")] float density, [NativeName(NativeNameType.Param, "inner")] [NativeName(NativeNameType.Type, "Color")] Color inner, [NativeName(NativeNameType.Param, "outer")] [NativeName(NativeNameType.Type, "Color")] Color outer)
		{
			Image ret = GenImageGradientRadialNative(width, height, density, inner, outer);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageGradientSquare")]
		[return: NativeName(NativeNameType.Type, "Image")]
		internal static Image GenImageGradientSquareNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "density")] [NativeName(NativeNameType.Type, "float")] float density, [NativeName(NativeNameType.Param, "inner")] [NativeName(NativeNameType.Type, "Color")] Color inner, [NativeName(NativeNameType.Param, "outer")] [NativeName(NativeNameType.Type, "Color")] Color outer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, float, Color, Color, Image>)vt[285])(width, height, density, inner, outer);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, float, Color, Color, Image>)vt[285])(width, height, density, inner, outer);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageGradientSquare")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageGradientSquare([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "density")] [NativeName(NativeNameType.Type, "float")] float density, [NativeName(NativeNameType.Param, "inner")] [NativeName(NativeNameType.Type, "Color")] Color inner, [NativeName(NativeNameType.Param, "outer")] [NativeName(NativeNameType.Type, "Color")] Color outer)
		{
			Image ret = GenImageGradientSquareNative(width, height, density, inner, outer);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageChecked")]
		[return: NativeName(NativeNameType.Type, "Image")]
		internal static Image GenImageCheckedNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "checksX")] [NativeName(NativeNameType.Type, "int")] int checksX, [NativeName(NativeNameType.Param, "checksY")] [NativeName(NativeNameType.Type, "int")] int checksY, [NativeName(NativeNameType.Param, "col1")] [NativeName(NativeNameType.Type, "Color")] Color col1, [NativeName(NativeNameType.Param, "col2")] [NativeName(NativeNameType.Type, "Color")] Color col2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int, int, Color, Color, Image>)vt[286])(width, height, checksX, checksY, col1, col2);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, int, int, Color, Color, Image>)vt[286])(width, height, checksX, checksY, col1, col2);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageChecked")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageChecked([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "checksX")] [NativeName(NativeNameType.Type, "int")] int checksX, [NativeName(NativeNameType.Param, "checksY")] [NativeName(NativeNameType.Type, "int")] int checksY, [NativeName(NativeNameType.Param, "col1")] [NativeName(NativeNameType.Type, "Color")] Color col1, [NativeName(NativeNameType.Param, "col2")] [NativeName(NativeNameType.Type, "Color")] Color col2)
		{
			Image ret = GenImageCheckedNative(width, height, checksX, checksY, col1, col2);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageWhiteNoise")]
		[return: NativeName(NativeNameType.Type, "Image")]
		internal static Image GenImageWhiteNoiseNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "factor")] [NativeName(NativeNameType.Type, "float")] float factor)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, float, Image>)vt[287])(width, height, factor);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, float, Image>)vt[287])(width, height, factor);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageWhiteNoise")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageWhiteNoise([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "factor")] [NativeName(NativeNameType.Type, "float")] float factor)
		{
			Image ret = GenImageWhiteNoiseNative(width, height, factor);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImagePerlinNoise")]
		[return: NativeName(NativeNameType.Type, "Image")]
		internal static Image GenImagePerlinNoiseNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int, int, float, Image>)vt[288])(width, height, offsetX, offsetY, scale);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, int, int, float, Image>)vt[288])(width, height, offsetX, offsetY, scale);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImagePerlinNoise")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImagePerlinNoise([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale)
		{
			Image ret = GenImagePerlinNoiseNative(width, height, offsetX, offsetY, scale);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageCellular")]
		[return: NativeName(NativeNameType.Type, "Image")]
		internal static Image GenImageCellularNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "tileSize")] [NativeName(NativeNameType.Type, "int")] int tileSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int, Image>)vt[289])(width, height, tileSize);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, int, Image>)vt[289])(width, height, tileSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageCellular")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageCellular([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "tileSize")] [NativeName(NativeNameType.Type, "int")] int tileSize)
		{
			Image ret = GenImageCellularNative(width, height, tileSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		internal static Image GenImageTextNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, byte*, Image>)vt[290])(width, height, text);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, nint, Image>)vt[290])(width, height, (nint)text);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageText([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			Image ret = GenImageTextNative(width, height, text);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageText([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				Image ret = GenImageTextNative(width, height, (byte*)ptext);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GenImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageText([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text)
		{
			fixed (byte* ptext = text)
			{
				Image ret = GenImageTextNative(width, height, (byte*)ptext);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GenImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageText([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Image ret = GenImageTextNative(width, height, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Image manipulation functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImageCopy")]
		[return: NativeName(NativeNameType.Type, "Image")]
		internal static Image ImageCopyNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, Image>)vt[291])(image);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<Image, Image>)vt[291])(image);
			#endif
		}

		/// <summary>
		/// Image manipulation functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImageCopy")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageCopy([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			Image ret = ImageCopyNative(image);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ImageFromImage")]
		[return: NativeName(NativeNameType.Type, "Image")]
		internal static Image ImageFromImageNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, Rectangle, Image>)vt[292])(image, rec);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<Image, Rectangle, Image>)vt[292])(image, rec);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageFromImage")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageFromImage([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec)
		{
			Image ret = ImageFromImageNative(image, rec);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ImageFromChannel")]
		[return: NativeName(NativeNameType.Type, "Image")]
		internal static Image ImageFromChannelNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "selectedChannel")] [NativeName(NativeNameType.Type, "int")] int selectedChannel)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, int, Image>)vt[293])(image, selectedChannel);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<Image, int, Image>)vt[293])(image, selectedChannel);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageFromChannel")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageFromChannel([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "selectedChannel")] [NativeName(NativeNameType.Type, "int")] int selectedChannel)
		{
			Image ret = ImageFromChannelNative(image, selectedChannel);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		internal static Image ImageTextNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, Color, Image>)vt[294])(text, fontSize, color);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<nint, int, Color, Image>)vt[294])((nint)text, fontSize, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			Image ret = ImageTextNative(text, fontSize, color);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (byte* ptext = &text)
			{
				Image ret = ImageTextNative((byte*)ptext, fontSize, color);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (byte* ptext = text)
			{
				Image ret = ImageTextNative((byte*)ptext, fontSize, color);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Image ret = ImageTextNative(pStr0, fontSize, color);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "ImageTextEx")]
		[return: NativeName(NativeNameType.Type, "Image")]
		internal static Image ImageTextExNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Font, byte*, float, float, Color, Image>)vt[295])(font, text, fontSize, spacing, tint);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<Font, nint, float, float, Color, Image>)vt[295])(font, (nint)text, fontSize, spacing, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageTextEx")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			Image ret = ImageTextExNative(font, text, fontSize, spacing, tint);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ImageTextEx")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = &text)
			{
				Image ret = ImageTextExNative(font, (byte*)ptext, fontSize, spacing, tint);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImageTextEx")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = text)
			{
				Image ret = ImageTextExNative(font, (byte*)ptext, fontSize, spacing, tint);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImageTextEx")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Image ret = ImageTextExNative(font, pStr0, fontSize, spacing, tint);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "ImageFormat")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageFormatNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "newFormat")] [NativeName(NativeNameType.Type, "int")] int newFormat)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, void>)vt[296])(image, newFormat);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[296])((nint)image, newFormat);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageFormat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageFormat([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "newFormat")] [NativeName(NativeNameType.Type, "int")] int newFormat)
		{
			ImageFormatNative(image, newFormat);
		}

		[NativeName(NativeNameType.Func, "ImageFormat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageFormat([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "newFormat")] [NativeName(NativeNameType.Type, "int")] int newFormat)
		{
			fixed (Image* pimage = &image)
			{
				ImageFormatNative((Image*)pimage, newFormat);
			}
		}

		[NativeName(NativeNameType.Func, "ImageToPOT")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageToPOTNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "fill")] [NativeName(NativeNameType.Type, "Color")] Color fill)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Color, void>)vt[297])(image, fill);
			#else
			((delegate* unmanaged[Cdecl]<nint, Color, void>)vt[297])((nint)image, fill);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageToPOT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageToPOT([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "fill")] [NativeName(NativeNameType.Type, "Color")] Color fill)
		{
			ImageToPOTNative(image, fill);
		}

		[NativeName(NativeNameType.Func, "ImageToPOT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageToPOT([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "fill")] [NativeName(NativeNameType.Type, "Color")] Color fill)
		{
			fixed (Image* pimage = &image)
			{
				ImageToPOTNative((Image*)pimage, fill);
			}
		}

		[NativeName(NativeNameType.Func, "ImageCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageCropNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "crop")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle crop)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Rectangle, void>)vt[298])(image, crop);
			#else
			((delegate* unmanaged[Cdecl]<nint, Rectangle, void>)vt[298])((nint)image, crop);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageCrop([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "crop")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle crop)
		{
			ImageCropNative(image, crop);
		}

		[NativeName(NativeNameType.Func, "ImageCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageCrop([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "crop")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle crop)
		{
			fixed (Image* pimage = &image)
			{
				ImageCropNative((Image*)pimage, crop);
			}
		}

		[NativeName(NativeNameType.Func, "ImageAlphaCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageAlphaCropNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, float, void>)vt[299])(image, threshold);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[299])((nint)image, threshold);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageAlphaCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaCrop([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			ImageAlphaCropNative(image, threshold);
		}

		[NativeName(NativeNameType.Func, "ImageAlphaCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaCrop([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			fixed (Image* pimage = &image)
			{
				ImageAlphaCropNative((Image*)pimage, threshold);
			}
		}

		[NativeName(NativeNameType.Func, "ImageAlphaClear")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageAlphaClearNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Color, float, void>)vt[300])(image, color, threshold);
			#else
			((delegate* unmanaged[Cdecl]<nint, Color, float, void>)vt[300])((nint)image, color, threshold);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageAlphaClear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaClear([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			ImageAlphaClearNative(image, color, threshold);
		}

		[NativeName(NativeNameType.Func, "ImageAlphaClear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaClear([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			fixed (Image* pimage = &image)
			{
				ImageAlphaClearNative((Image*)pimage, color, threshold);
			}
		}

		[NativeName(NativeNameType.Func, "ImageAlphaMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageAlphaMaskNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "alphaMask")] [NativeName(NativeNameType.Type, "Image")] Image alphaMask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Image, void>)vt[301])(image, alphaMask);
			#else
			((delegate* unmanaged[Cdecl]<nint, Image, void>)vt[301])((nint)image, alphaMask);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageAlphaMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaMask([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "alphaMask")] [NativeName(NativeNameType.Type, "Image")] Image alphaMask)
		{
			ImageAlphaMaskNative(image, alphaMask);
		}

		[NativeName(NativeNameType.Func, "ImageAlphaMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaMask([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "alphaMask")] [NativeName(NativeNameType.Type, "Image")] Image alphaMask)
		{
			fixed (Image* pimage = &image)
			{
				ImageAlphaMaskNative((Image*)pimage, alphaMask);
			}
		}

		[NativeName(NativeNameType.Func, "ImageAlphaPremultiply")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageAlphaPremultiplyNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)vt[302])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[302])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageAlphaPremultiply")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaPremultiply([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			ImageAlphaPremultiplyNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageAlphaPremultiply")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaPremultiply([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageAlphaPremultiplyNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageBlurGaussian")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageBlurGaussianNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "blurSize")] [NativeName(NativeNameType.Type, "int")] int blurSize)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, void>)vt[303])(image, blurSize);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[303])((nint)image, blurSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageBlurGaussian")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageBlurGaussian([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "blurSize")] [NativeName(NativeNameType.Type, "int")] int blurSize)
		{
			ImageBlurGaussianNative(image, blurSize);
		}

		[NativeName(NativeNameType.Func, "ImageBlurGaussian")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageBlurGaussian([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "blurSize")] [NativeName(NativeNameType.Type, "int")] int blurSize)
		{
			fixed (Image* pimage = &image)
			{
				ImageBlurGaussianNative((Image*)pimage, blurSize);
			}
		}

		[NativeName(NativeNameType.Func, "ImageKernelConvolution")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageKernelConvolutionNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "kernel")] [NativeName(NativeNameType.Type, "const float*")] float* kernel, [NativeName(NativeNameType.Param, "kernelSize")] [NativeName(NativeNameType.Type, "int")] int kernelSize)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, float*, int, void>)vt[304])(image, kernel, kernelSize);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, void>)vt[304])((nint)image, (nint)kernel, kernelSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageKernelConvolution")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageKernelConvolution([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "kernel")] [NativeName(NativeNameType.Type, "const float*")] float* kernel, [NativeName(NativeNameType.Param, "kernelSize")] [NativeName(NativeNameType.Type, "int")] int kernelSize)
		{
			ImageKernelConvolutionNative(image, kernel, kernelSize);
		}

		[NativeName(NativeNameType.Func, "ImageKernelConvolution")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageKernelConvolution([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "kernel")] [NativeName(NativeNameType.Type, "const float*")] float* kernel, [NativeName(NativeNameType.Param, "kernelSize")] [NativeName(NativeNameType.Type, "int")] int kernelSize)
		{
			fixed (Image* pimage = &image)
			{
				ImageKernelConvolutionNative((Image*)pimage, kernel, kernelSize);
			}
		}

		[NativeName(NativeNameType.Func, "ImageKernelConvolution")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageKernelConvolution([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "kernel")] [NativeName(NativeNameType.Type, "const float*")] ref float kernel, [NativeName(NativeNameType.Param, "kernelSize")] [NativeName(NativeNameType.Type, "int")] int kernelSize)
		{
			fixed (float* pkernel = &kernel)
			{
				ImageKernelConvolutionNative(image, (float*)pkernel, kernelSize);
			}
		}

		[NativeName(NativeNameType.Func, "ImageKernelConvolution")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageKernelConvolution([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "kernel")] [NativeName(NativeNameType.Type, "const float*")] ref float kernel, [NativeName(NativeNameType.Param, "kernelSize")] [NativeName(NativeNameType.Type, "int")] int kernelSize)
		{
			fixed (Image* pimage = &image)
			{
				fixed (float* pkernel = &kernel)
				{
					ImageKernelConvolutionNative((Image*)pimage, (float*)pkernel, kernelSize);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageResize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageResizeNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, void>)vt[305])(image, newWidth, newHeight);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)vt[305])((nint)image, newWidth, newHeight);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageResize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageResize([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight)
		{
			ImageResizeNative(image, newWidth, newHeight);
		}

		[NativeName(NativeNameType.Func, "ImageResize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageResize([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight)
		{
			fixed (Image* pimage = &image)
			{
				ImageResizeNative((Image*)pimage, newWidth, newHeight);
			}
		}

		[NativeName(NativeNameType.Func, "ImageResizeNN")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageResizeNNNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, void>)vt[306])(image, newWidth, newHeight);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)vt[306])((nint)image, newWidth, newHeight);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageResizeNN")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageResizeNN([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight)
		{
			ImageResizeNNNative(image, newWidth, newHeight);
		}

		[NativeName(NativeNameType.Func, "ImageResizeNN")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageResizeNN([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight)
		{
			fixed (Image* pimage = &image)
			{
				ImageResizeNNNative((Image*)pimage, newWidth, newHeight);
			}
		}

		[NativeName(NativeNameType.Func, "ImageResizeCanvas")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageResizeCanvasNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "fill")] [NativeName(NativeNameType.Type, "Color")] Color fill)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, int, int, Color, void>)vt[307])(image, newWidth, newHeight, offsetX, offsetY, fill);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, Color, void>)vt[307])((nint)image, newWidth, newHeight, offsetX, offsetY, fill);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageResizeCanvas")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageResizeCanvas([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "fill")] [NativeName(NativeNameType.Type, "Color")] Color fill)
		{
			ImageResizeCanvasNative(image, newWidth, newHeight, offsetX, offsetY, fill);
		}

		[NativeName(NativeNameType.Func, "ImageResizeCanvas")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageResizeCanvas([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "fill")] [NativeName(NativeNameType.Type, "Color")] Color fill)
		{
			fixed (Image* pimage = &image)
			{
				ImageResizeCanvasNative((Image*)pimage, newWidth, newHeight, offsetX, offsetY, fill);
			}
		}

		[NativeName(NativeNameType.Func, "ImageMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageMipmapsNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)vt[308])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[308])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageMipmaps([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			ImageMipmapsNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageMipmaps([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageMipmapsNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDither")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDitherNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "rBpp")] [NativeName(NativeNameType.Type, "int")] int rBpp, [NativeName(NativeNameType.Param, "gBpp")] [NativeName(NativeNameType.Type, "int")] int gBpp, [NativeName(NativeNameType.Param, "bBpp")] [NativeName(NativeNameType.Type, "int")] int bBpp, [NativeName(NativeNameType.Param, "aBpp")] [NativeName(NativeNameType.Type, "int")] int aBpp)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, int, int, void>)vt[309])(image, rBpp, gBpp, bBpp, aBpp);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, void>)vt[309])((nint)image, rBpp, gBpp, bBpp, aBpp);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDither")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDither([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "rBpp")] [NativeName(NativeNameType.Type, "int")] int rBpp, [NativeName(NativeNameType.Param, "gBpp")] [NativeName(NativeNameType.Type, "int")] int gBpp, [NativeName(NativeNameType.Param, "bBpp")] [NativeName(NativeNameType.Type, "int")] int bBpp, [NativeName(NativeNameType.Param, "aBpp")] [NativeName(NativeNameType.Type, "int")] int aBpp)
		{
			ImageDitherNative(image, rBpp, gBpp, bBpp, aBpp);
		}

		[NativeName(NativeNameType.Func, "ImageDither")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDither([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "rBpp")] [NativeName(NativeNameType.Type, "int")] int rBpp, [NativeName(NativeNameType.Param, "gBpp")] [NativeName(NativeNameType.Type, "int")] int gBpp, [NativeName(NativeNameType.Param, "bBpp")] [NativeName(NativeNameType.Type, "int")] int bBpp, [NativeName(NativeNameType.Param, "aBpp")] [NativeName(NativeNameType.Type, "int")] int aBpp)
		{
			fixed (Image* pimage = &image)
			{
				ImageDitherNative((Image*)pimage, rBpp, gBpp, bBpp, aBpp);
			}
		}

		[NativeName(NativeNameType.Func, "ImageFlipVertical")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageFlipVerticalNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)vt[310])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[310])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageFlipVertical")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageFlipVertical([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			ImageFlipVerticalNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageFlipVertical")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageFlipVertical([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageFlipVerticalNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageFlipHorizontal")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageFlipHorizontalNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)vt[311])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[311])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageFlipHorizontal")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageFlipHorizontal([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			ImageFlipHorizontalNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageFlipHorizontal")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageFlipHorizontal([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageFlipHorizontalNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageRotate")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageRotateNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "degrees")] [NativeName(NativeNameType.Type, "int")] int degrees)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, void>)vt[312])(image, degrees);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[312])((nint)image, degrees);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageRotate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageRotate([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "degrees")] [NativeName(NativeNameType.Type, "int")] int degrees)
		{
			ImageRotateNative(image, degrees);
		}

		[NativeName(NativeNameType.Func, "ImageRotate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageRotate([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "degrees")] [NativeName(NativeNameType.Type, "int")] int degrees)
		{
			fixed (Image* pimage = &image)
			{
				ImageRotateNative((Image*)pimage, degrees);
			}
		}

		[NativeName(NativeNameType.Func, "ImageRotateCW")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageRotateCWNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)vt[313])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[313])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageRotateCW")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageRotateCW([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			ImageRotateCWNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageRotateCW")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageRotateCW([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageRotateCWNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageRotateCCW")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageRotateCCWNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)vt[314])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[314])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageRotateCCW")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageRotateCCW([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			ImageRotateCCWNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageRotateCCW")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageRotateCCW([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageRotateCCWNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageColorTint")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageColorTintNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Color, void>)vt[315])(image, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Color, void>)vt[315])((nint)image, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageColorTint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorTint([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageColorTintNative(image, color);
		}

		[NativeName(NativeNameType.Func, "ImageColorTint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorTint([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pimage = &image)
			{
				ImageColorTintNative((Image*)pimage, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageColorInvert")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageColorInvertNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)vt[316])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[316])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageColorInvert")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorInvert([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			ImageColorInvertNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageColorInvert")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorInvert([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageColorInvertNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageColorGrayscale")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageColorGrayscaleNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)vt[317])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[317])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageColorGrayscale")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorGrayscale([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image)
		{
			ImageColorGrayscaleNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageColorGrayscale")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorGrayscale([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageColorGrayscaleNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageColorContrast")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageColorContrastNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "contrast")] [NativeName(NativeNameType.Type, "float")] float contrast)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, float, void>)vt[318])(image, contrast);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[318])((nint)image, contrast);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageColorContrast")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorContrast([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "contrast")] [NativeName(NativeNameType.Type, "float")] float contrast)
		{
			ImageColorContrastNative(image, contrast);
		}

		[NativeName(NativeNameType.Func, "ImageColorContrast")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorContrast([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "contrast")] [NativeName(NativeNameType.Type, "float")] float contrast)
		{
			fixed (Image* pimage = &image)
			{
				ImageColorContrastNative((Image*)pimage, contrast);
			}
		}

		[NativeName(NativeNameType.Func, "ImageColorBrightness")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageColorBrightnessNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "brightness")] [NativeName(NativeNameType.Type, "int")] int brightness)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, void>)vt[319])(image, brightness);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[319])((nint)image, brightness);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageColorBrightness")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorBrightness([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "brightness")] [NativeName(NativeNameType.Type, "int")] int brightness)
		{
			ImageColorBrightnessNative(image, brightness);
		}

		[NativeName(NativeNameType.Func, "ImageColorBrightness")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorBrightness([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "brightness")] [NativeName(NativeNameType.Type, "int")] int brightness)
		{
			fixed (Image* pimage = &image)
			{
				ImageColorBrightnessNative((Image*)pimage, brightness);
			}
		}

		[NativeName(NativeNameType.Func, "ImageColorReplace")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageColorReplaceNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "replace")] [NativeName(NativeNameType.Type, "Color")] Color replace)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Color, Color, void>)vt[320])(image, color, replace);
			#else
			((delegate* unmanaged[Cdecl]<nint, Color, Color, void>)vt[320])((nint)image, color, replace);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageColorReplace")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorReplace([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] Image* image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "replace")] [NativeName(NativeNameType.Type, "Color")] Color replace)
		{
			ImageColorReplaceNative(image, color, replace);
		}

		[NativeName(NativeNameType.Func, "ImageColorReplace")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorReplace([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image*")] ref Image image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "replace")] [NativeName(NativeNameType.Type, "Color")] Color replace)
		{
			fixed (Image* pimage = &image)
			{
				ImageColorReplaceNative((Image*)pimage, color, replace);
			}
		}

		[NativeName(NativeNameType.Func, "LoadImageColors")]
		[return: NativeName(NativeNameType.Type, "Color*")]
		internal static Color* LoadImageColorsNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, Color*>)vt[321])(image);
			#else
			return (Color*)((delegate* unmanaged[Cdecl]<Image, nint>)vt[321])(image);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadImageColors")]
		[return: NativeName(NativeNameType.Type, "Color*")]
		public static Color* LoadImageColors([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			Color* ret = LoadImageColorsNative(image);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadImagePalette")]
		[return: NativeName(NativeNameType.Type, "Color*")]
		internal static Color* LoadImagePaletteNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "maxPaletteSize")] [NativeName(NativeNameType.Type, "int")] int maxPaletteSize, [NativeName(NativeNameType.Param, "colorCount")] [NativeName(NativeNameType.Type, "int*")] int* colorCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, int, int*, Color*>)vt[322])(image, maxPaletteSize, colorCount);
			#else
			return (Color*)((delegate* unmanaged[Cdecl]<Image, int, nint, nint>)vt[322])(image, maxPaletteSize, (nint)colorCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadImagePalette")]
		[return: NativeName(NativeNameType.Type, "Color*")]
		public static Color* LoadImagePalette([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "maxPaletteSize")] [NativeName(NativeNameType.Type, "int")] int maxPaletteSize, [NativeName(NativeNameType.Param, "colorCount")] [NativeName(NativeNameType.Type, "int*")] int* colorCount)
		{
			Color* ret = LoadImagePaletteNative(image, maxPaletteSize, colorCount);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadImagePalette")]
		[return: NativeName(NativeNameType.Type, "Color*")]
		public static Color* LoadImagePalette([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "maxPaletteSize")] [NativeName(NativeNameType.Type, "int")] int maxPaletteSize, [NativeName(NativeNameType.Param, "colorCount")] [NativeName(NativeNameType.Type, "int*")] ref int colorCount)
		{
			fixed (int* pcolorCount = &colorCount)
			{
				Color* ret = LoadImagePaletteNative(image, maxPaletteSize, (int*)pcolorCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "UnloadImageColors")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadImageColorsNative([NativeName(NativeNameType.Param, "colors")] [NativeName(NativeNameType.Type, "Color*")] Color* colors)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Color*, void>)vt[323])(colors);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[323])((nint)colors);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadImageColors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadImageColors([NativeName(NativeNameType.Param, "colors")] [NativeName(NativeNameType.Type, "Color*")] Color* colors)
		{
			UnloadImageColorsNative(colors);
		}

		[NativeName(NativeNameType.Func, "UnloadImageColors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadImageColors([NativeName(NativeNameType.Param, "colors")] [NativeName(NativeNameType.Type, "Color*")] ref Color colors)
		{
			fixed (Color* pcolors = &colors)
			{
				UnloadImageColorsNative((Color*)pcolors);
			}
		}

		[NativeName(NativeNameType.Func, "UnloadImagePalette")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadImagePaletteNative([NativeName(NativeNameType.Param, "colors")] [NativeName(NativeNameType.Type, "Color*")] Color* colors)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Color*, void>)vt[324])(colors);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[324])((nint)colors);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadImagePalette")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadImagePalette([NativeName(NativeNameType.Param, "colors")] [NativeName(NativeNameType.Type, "Color*")] Color* colors)
		{
			UnloadImagePaletteNative(colors);
		}

		[NativeName(NativeNameType.Func, "UnloadImagePalette")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadImagePalette([NativeName(NativeNameType.Param, "colors")] [NativeName(NativeNameType.Type, "Color*")] ref Color colors)
		{
			fixed (Color* pcolors = &colors)
			{
				UnloadImagePaletteNative((Color*)pcolors);
			}
		}

		[NativeName(NativeNameType.Func, "GetImageAlphaBorder")]
		[return: NativeName(NativeNameType.Type, "Rectangle")]
		internal static Rectangle GetImageAlphaBorderNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, float, Rectangle>)vt[325])(image, threshold);
			#else
			return (Rectangle)((delegate* unmanaged[Cdecl]<Image, float, Rectangle>)vt[325])(image, threshold);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetImageAlphaBorder")]
		[return: NativeName(NativeNameType.Type, "Rectangle")]
		public static Rectangle GetImageAlphaBorder([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			Rectangle ret = GetImageAlphaBorderNative(image, threshold);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetImageColor")]
		[return: NativeName(NativeNameType.Type, "Color")]
		internal static Color GetImageColorNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, int, int, Color>)vt[326])(image, x, y);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Image, int, int, Color>)vt[326])(image, x, y);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetImageColor")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color GetImageColor([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			Color ret = GetImageColorNative(image, x, y);
			return ret;
		}

		/// <summary>
		/// Image drawing functions<br/>
		/// NOTE: Image software-rendering functions (CPU)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImageClearBackground")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageClearBackgroundNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Color, void>)vt[327])(dst, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Color, void>)vt[327])((nint)dst, color);
			#endif
		}

		/// <summary>
		/// Image drawing functions<br/>
		/// NOTE: Image software-rendering functions (CPU)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImageClearBackground")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageClearBackground([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageClearBackgroundNative(dst, color);
		}

		/// <summary>
		/// Image drawing functions<br/>
		/// NOTE: Image software-rendering functions (CPU)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImageClearBackground")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageClearBackground([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageClearBackgroundNative((Image*)pdst, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawPixel")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawPixelNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, Color, void>)vt[328])(dst, posX, posY, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, Color, void>)vt[328])((nint)dst, posX, posY, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawPixel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawPixel([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawPixelNative(dst, posX, posY, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawPixel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawPixel([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawPixelNative((Image*)pdst, posX, posY, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawPixelV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawPixelVNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, Color, void>)vt[329])(dst, position, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Color, void>)vt[329])((nint)dst, position, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawPixelV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawPixelV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawPixelVNative(dst, position, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawPixelV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawPixelV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawPixelVNative((Image*)pdst, position, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawLineNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "startPosX")] [NativeName(NativeNameType.Type, "int")] int startPosX, [NativeName(NativeNameType.Param, "startPosY")] [NativeName(NativeNameType.Type, "int")] int startPosY, [NativeName(NativeNameType.Param, "endPosX")] [NativeName(NativeNameType.Type, "int")] int endPosX, [NativeName(NativeNameType.Param, "endPosY")] [NativeName(NativeNameType.Type, "int")] int endPosY, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, int, int, Color, void>)vt[330])(dst, startPosX, startPosY, endPosX, endPosY, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, Color, void>)vt[330])((nint)dst, startPosX, startPosY, endPosX, endPosY, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawLine([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "startPosX")] [NativeName(NativeNameType.Type, "int")] int startPosX, [NativeName(NativeNameType.Param, "startPosY")] [NativeName(NativeNameType.Type, "int")] int startPosY, [NativeName(NativeNameType.Param, "endPosX")] [NativeName(NativeNameType.Type, "int")] int endPosX, [NativeName(NativeNameType.Param, "endPosY")] [NativeName(NativeNameType.Type, "int")] int endPosY, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawLineNative(dst, startPosX, startPosY, endPosX, endPosY, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawLine([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "startPosX")] [NativeName(NativeNameType.Type, "int")] int startPosX, [NativeName(NativeNameType.Param, "startPosY")] [NativeName(NativeNameType.Type, "int")] int startPosY, [NativeName(NativeNameType.Param, "endPosX")] [NativeName(NativeNameType.Type, "int")] int endPosX, [NativeName(NativeNameType.Param, "endPosY")] [NativeName(NativeNameType.Type, "int")] int endPosY, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawLineNative((Image*)pdst, startPosX, startPosY, endPosX, endPosY, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawLineV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawLineVNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 end, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, Vector2, Color, void>)vt[331])(dst, start, end, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Color, void>)vt[331])((nint)dst, start, end, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawLineV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawLineV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 end, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawLineVNative(dst, start, end, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawLineV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawLineV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 end, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawLineVNative((Image*)pdst, start, end, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawLineEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawLineExNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 end, [NativeName(NativeNameType.Param, "thick")] [NativeName(NativeNameType.Type, "int")] int thick, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, Vector2, int, Color, void>)vt[332])(dst, start, end, thick, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, int, Color, void>)vt[332])((nint)dst, start, end, thick, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawLineEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawLineEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 end, [NativeName(NativeNameType.Param, "thick")] [NativeName(NativeNameType.Type, "int")] int thick, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawLineExNative(dst, start, end, thick, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawLineEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawLineEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 end, [NativeName(NativeNameType.Param, "thick")] [NativeName(NativeNameType.Type, "int")] int thick, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawLineExNative((Image*)pdst, start, end, thick, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawCircleNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "centerX")] [NativeName(NativeNameType.Type, "int")] int centerX, [NativeName(NativeNameType.Param, "centerY")] [NativeName(NativeNameType.Type, "int")] int centerY, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, int, Color, void>)vt[333])(dst, centerX, centerY, radius, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, Color, void>)vt[333])((nint)dst, centerX, centerY, radius, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircle([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "centerX")] [NativeName(NativeNameType.Type, "int")] int centerX, [NativeName(NativeNameType.Param, "centerY")] [NativeName(NativeNameType.Type, "int")] int centerY, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawCircleNative(dst, centerX, centerY, radius, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircle([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "centerX")] [NativeName(NativeNameType.Type, "int")] int centerX, [NativeName(NativeNameType.Param, "centerY")] [NativeName(NativeNameType.Type, "int")] int centerY, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawCircleNative((Image*)pdst, centerX, centerY, radius, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawCircleVNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, int, Color, void>)vt[334])(dst, center, radius, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, int, Color, void>)vt[334])((nint)dst, center, radius, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircleV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawCircleVNative(dst, center, radius, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircleV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawCircleVNative((Image*)pdst, center, radius, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawCircleLinesNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "centerX")] [NativeName(NativeNameType.Type, "int")] int centerX, [NativeName(NativeNameType.Param, "centerY")] [NativeName(NativeNameType.Type, "int")] int centerY, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, int, Color, void>)vt[335])(dst, centerX, centerY, radius, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, Color, void>)vt[335])((nint)dst, centerX, centerY, radius, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircleLines([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "centerX")] [NativeName(NativeNameType.Type, "int")] int centerX, [NativeName(NativeNameType.Param, "centerY")] [NativeName(NativeNameType.Type, "int")] int centerY, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawCircleLinesNative(dst, centerX, centerY, radius, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircleLines([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "centerX")] [NativeName(NativeNameType.Type, "int")] int centerX, [NativeName(NativeNameType.Param, "centerY")] [NativeName(NativeNameType.Type, "int")] int centerY, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawCircleLinesNative((Image*)pdst, centerX, centerY, radius, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleLinesV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawCircleLinesVNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, int, Color, void>)vt[336])(dst, center, radius, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, int, Color, void>)vt[336])((nint)dst, center, radius, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleLinesV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircleLinesV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawCircleLinesVNative(dst, center, radius, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleLinesV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircleLinesV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawCircleLinesVNative((Image*)pdst, center, radius, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawRectangleNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, int, int, Color, void>)vt[337])(dst, posX, posY, width, height, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, Color, void>)vt[337])((nint)dst, posX, posY, width, height, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangle([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawRectangleNative(dst, posX, posY, width, height, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangle([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawRectangleNative((Image*)pdst, posX, posY, width, height, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawRectangleVNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 size, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, Vector2, Color, void>)vt[338])(dst, position, size, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Color, void>)vt[338])((nint)dst, position, size, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangleV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 size, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawRectangleVNative(dst, position, size, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangleV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 size, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawRectangleVNative((Image*)pdst, position, size, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleRec")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawRectangleRecNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Rectangle, Color, void>)vt[339])(dst, rec, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Rectangle, Color, void>)vt[339])((nint)dst, rec, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleRec")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangleRec([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawRectangleRecNative(dst, rec, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleRec")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangleRec([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawRectangleRecNative((Image*)pdst, rec, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawRectangleLinesNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "thick")] [NativeName(NativeNameType.Type, "int")] int thick, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Rectangle, int, Color, void>)vt[340])(dst, rec, thick, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Rectangle, int, Color, void>)vt[340])((nint)dst, rec, thick, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangleLines([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "thick")] [NativeName(NativeNameType.Type, "int")] int thick, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawRectangleLinesNative(dst, rec, thick, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangleLines([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "thick")] [NativeName(NativeNameType.Type, "int")] int thick, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawRectangleLinesNative((Image*)pdst, rec, thick, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawTriangleNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, Vector2, Vector2, Color, void>)vt[341])(dst, v1, v2, v3, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Color, void>)vt[341])((nint)dst, v1, v2, v3, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangle([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawTriangleNative(dst, v1, v2, v3, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangle([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawTriangleNative((Image*)pdst, v1, v2, v3, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawTriangleExNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "c1")] [NativeName(NativeNameType.Type, "Color")] Color c1, [NativeName(NativeNameType.Param, "c2")] [NativeName(NativeNameType.Type, "Color")] Color c2, [NativeName(NativeNameType.Param, "c3")] [NativeName(NativeNameType.Type, "Color")] Color c3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, Vector2, Vector2, Color, Color, Color, void>)vt[342])(dst, v1, v2, v3, c1, c2, c3);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Color, Color, Color, void>)vt[342])((nint)dst, v1, v2, v3, c1, c2, c3);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "c1")] [NativeName(NativeNameType.Type, "Color")] Color c1, [NativeName(NativeNameType.Param, "c2")] [NativeName(NativeNameType.Type, "Color")] Color c2, [NativeName(NativeNameType.Param, "c3")] [NativeName(NativeNameType.Type, "Color")] Color c3)
		{
			ImageDrawTriangleExNative(dst, v1, v2, v3, c1, c2, c3);
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "c1")] [NativeName(NativeNameType.Type, "Color")] Color c1, [NativeName(NativeNameType.Param, "c2")] [NativeName(NativeNameType.Type, "Color")] Color c2, [NativeName(NativeNameType.Param, "c3")] [NativeName(NativeNameType.Type, "Color")] Color c3)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawTriangleExNative((Image*)pdst, v1, v2, v3, c1, c2, c3);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawTriangleLinesNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, Vector2, Vector2, Color, void>)vt[343])(dst, v1, v2, v3, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Color, void>)vt[343])((nint)dst, v1, v2, v3, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleLines([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawTriangleLinesNative(dst, v1, v2, v3, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleLines([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawTriangleLinesNative((Image*)pdst, v1, v2, v3, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleFan")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawTriangleFanNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2*")] Vector2* points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2*, int, Color, void>)vt[344])(dst, points, pointCount, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, Color, void>)vt[344])((nint)dst, (nint)points, pointCount, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleFan")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleFan([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2*")] Vector2* points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawTriangleFanNative(dst, points, pointCount, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleFan")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleFan([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2*")] Vector2* points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawTriangleFanNative((Image*)pdst, points, pointCount, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleFan")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleFan([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2*")] ref Vector2 points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Vector2* ppoints = &points)
			{
				ImageDrawTriangleFanNative(dst, (Vector2*)ppoints, pointCount, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleFan")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleFan([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2*")] ref Vector2 points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				fixed (Vector2* ppoints = &points)
				{
					ImageDrawTriangleFanNative((Image*)pdst, (Vector2*)ppoints, pointCount, color);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleStrip")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawTriangleStripNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2*")] Vector2* points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2*, int, Color, void>)vt[345])(dst, points, pointCount, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, Color, void>)vt[345])((nint)dst, (nint)points, pointCount, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleStrip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleStrip([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2*")] Vector2* points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawTriangleStripNative(dst, points, pointCount, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleStrip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleStrip([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2*")] Vector2* points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawTriangleStripNative((Image*)pdst, points, pointCount, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleStrip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleStrip([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2*")] ref Vector2 points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Vector2* ppoints = &points)
			{
				ImageDrawTriangleStripNative(dst, (Vector2*)ppoints, pointCount, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleStrip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleStrip([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2*")] ref Vector2 points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				fixed (Vector2* ppoints = &points)
				{
					ImageDrawTriangleStripNative((Image*)pdst, (Vector2*)ppoints, pointCount, color);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageDraw")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "Image")] Image src, [NativeName(NativeNameType.Param, "srcRec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle srcRec, [NativeName(NativeNameType.Param, "dstRec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle dstRec, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Image, Rectangle, Rectangle, Color, void>)vt[346])(dst, src, srcRec, dstRec, tint);
			#else
			((delegate* unmanaged[Cdecl]<nint, Image, Rectangle, Rectangle, Color, void>)vt[346])((nint)dst, src, srcRec, dstRec, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDraw")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDraw([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "Image")] Image src, [NativeName(NativeNameType.Param, "srcRec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle srcRec, [NativeName(NativeNameType.Param, "dstRec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle dstRec, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			ImageDrawNative(dst, src, srcRec, dstRec, tint);
		}

		[NativeName(NativeNameType.Func, "ImageDraw")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDraw([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "Image")] Image src, [NativeName(NativeNameType.Param, "srcRec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle srcRec, [NativeName(NativeNameType.Param, "dstRec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle dstRec, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawNative((Image*)pdst, src, srcRec, dstRec, tint);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawTextNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, byte*, int, int, int, Color, void>)vt[347])(dst, text, posX, posY, fontSize, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, Color, void>)vt[347])((nint)dst, (nint)text, posX, posY, fontSize, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawTextNative(dst, text, posX, posY, fontSize, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawTextNative((Image*)pdst, text, posX, posY, fontSize, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (byte* ptext = &text)
			{
				ImageDrawTextNative(dst, (byte*)ptext, posX, posY, fontSize, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (byte* ptext = text)
			{
				ImageDrawTextNative(dst, (byte*)ptext, posX, posY, fontSize, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImageDrawTextNative(dst, pStr0, posX, posY, fontSize, color);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				fixed (byte* ptext = &text)
				{
					ImageDrawTextNative((Image*)pdst, (byte*)ptext, posX, posY, fontSize, color);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				fixed (byte* ptext = text)
				{
					ImageDrawTextNative((Image*)pdst, (byte*)ptext, posX, posY, fontSize, color);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImageDrawTextNative((Image*)pdst, pStr0, posX, posY, fontSize, color);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageDrawTextExNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Font, byte*, Vector2, float, float, Color, void>)vt[348])(dst, font, text, position, fontSize, spacing, tint);
			#else
			((delegate* unmanaged[Cdecl]<nint, Font, nint, Vector2, float, float, Color, void>)vt[348])((nint)dst, font, (nint)text, position, fontSize, spacing, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			ImageDrawTextExNative(dst, font, text, position, fontSize, spacing, tint);
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawTextExNative((Image*)pdst, font, text, position, fontSize, spacing, tint);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = &text)
			{
				ImageDrawTextExNative(dst, font, (byte*)ptext, position, fontSize, spacing, tint);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = text)
			{
				ImageDrawTextExNative(dst, font, (byte*)ptext, position, fontSize, spacing, tint);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] Image* dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImageDrawTextExNative(dst, font, pStr0, position, fontSize, spacing, tint);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (Image* pdst = &dst)
			{
				fixed (byte* ptext = &text)
				{
					ImageDrawTextExNative((Image*)pdst, font, (byte*)ptext, position, fontSize, spacing, tint);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (Image* pdst = &dst)
			{
				fixed (byte* ptext = text)
				{
					ImageDrawTextExNative((Image*)pdst, font, (byte*)ptext, position, fontSize, spacing, tint);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image*")] ref Image dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (Image* pdst = &dst)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImageDrawTextExNative((Image*)pdst, font, pStr0, position, fontSize, spacing, tint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// Texture loading functions<br/>
		/// NOTE: These functions require GPU access<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadTexture")]
		[return: NativeName(NativeNameType.Type, "Texture2D")]
		internal static Texture LoadTextureNative([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Texture>)vt[349])(fileName);
			#else
			return (Texture)((delegate* unmanaged[Cdecl]<nint, Texture>)vt[349])((nint)fileName);
			#endif
		}

		/// <summary>
		/// Texture loading functions<br/>
		/// NOTE: These functions require GPU access<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadTexture")]
		[return: NativeName(NativeNameType.Type, "Texture2D")]
		public static Texture LoadTexture([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			Texture ret = LoadTextureNative(fileName);
			return ret;
		}

		/// <summary>
		/// Texture loading functions<br/>
		/// NOTE: These functions require GPU access<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadTexture")]
		[return: NativeName(NativeNameType.Type, "Texture2D")]
		public static Texture LoadTexture([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				Texture ret = LoadTextureNative((byte*)pfileName);
				return ret;
			}
		}

		/// <summary>
		/// Texture loading functions<br/>
		/// NOTE: These functions require GPU access<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadTexture")]
		[return: NativeName(NativeNameType.Type, "Texture2D")]
		public static Texture LoadTexture([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				Texture ret = LoadTextureNative((byte*)pfileName);
				return ret;
			}
		}

		/// <summary>
		/// Texture loading functions<br/>
		/// NOTE: These functions require GPU access<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadTexture")]
		[return: NativeName(NativeNameType.Type, "Texture2D")]
		public static Texture LoadTexture([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Texture ret = LoadTextureNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadTextureFromImage")]
		[return: NativeName(NativeNameType.Type, "Texture2D")]
		internal static Texture LoadTextureFromImageNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, Texture>)vt[350])(image);
			#else
			return (Texture)((delegate* unmanaged[Cdecl]<Image, Texture>)vt[350])(image);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadTextureFromImage")]
		[return: NativeName(NativeNameType.Type, "Texture2D")]
		public static Texture LoadTextureFromImage([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			Texture ret = LoadTextureFromImageNative(image);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "TextureCubemap")]
		internal static Texture LoadTextureCubemapNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "layout")] [NativeName(NativeNameType.Type, "int")] int layout)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, int, Texture>)vt[351])(image, layout);
			#else
			return (Texture)((delegate* unmanaged[Cdecl]<Image, int, Texture>)vt[351])(image, layout);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "TextureCubemap")]
		public static Texture LoadTextureCubemap([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "layout")] [NativeName(NativeNameType.Type, "int")] int layout)
		{
			Texture ret = LoadTextureCubemapNative(image, layout);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadRenderTexture")]
		[return: NativeName(NativeNameType.Type, "RenderTexture2D")]
		internal static RenderTexture LoadRenderTextureNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, RenderTexture>)vt[352])(width, height);
			#else
			return (RenderTexture)((delegate* unmanaged[Cdecl]<int, int, RenderTexture>)vt[352])(width, height);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadRenderTexture")]
		[return: NativeName(NativeNameType.Type, "RenderTexture2D")]
		public static RenderTexture LoadRenderTexture([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			RenderTexture ret = LoadRenderTextureNative(width, height);
			return ret;
		}

		[NativeName(NativeNameType.Func, "IsTextureReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsTextureReadyNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Texture, byte>)vt[353])(texture);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Texture, byte>)vt[353])(texture);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsTextureReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsTextureReady([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture)
		{
			byte ret = IsTextureReadyNative(texture);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "UnloadTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadTextureNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, void>)vt[354])(texture);
			#else
			((delegate* unmanaged[Cdecl]<Texture, void>)vt[354])(texture);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadTexture([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture)
		{
			UnloadTextureNative(texture);
		}

		[NativeName(NativeNameType.Func, "IsRenderTextureReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsRenderTextureReadyNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "RenderTexture2D")] RenderTexture target)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<RenderTexture, byte>)vt[355])(target);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<RenderTexture, byte>)vt[355])(target);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsRenderTextureReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsRenderTextureReady([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "RenderTexture2D")] RenderTexture target)
		{
			byte ret = IsRenderTextureReadyNative(target);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "UnloadRenderTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadRenderTextureNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "RenderTexture2D")] RenderTexture target)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<RenderTexture, void>)vt[356])(target);
			#else
			((delegate* unmanaged[Cdecl]<RenderTexture, void>)vt[356])(target);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadRenderTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadRenderTexture([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "RenderTexture2D")] RenderTexture target)
		{
			UnloadRenderTextureNative(target);
		}

		[NativeName(NativeNameType.Func, "UpdateTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateTextureNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const void*")] void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, void*, void>)vt[357])(texture, pixels);
			#else
			((delegate* unmanaged[Cdecl]<Texture, nint, void>)vt[357])(texture, (nint)pixels);
			#endif
		}

		[NativeName(NativeNameType.Func, "UpdateTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateTexture([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const void*")] void* pixels)
		{
			UpdateTextureNative(texture, pixels);
		}

		[NativeName(NativeNameType.Func, "UpdateTextureRec")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateTextureRecNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const void*")] void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, Rectangle, void*, void>)vt[358])(texture, rec, pixels);
			#else
			((delegate* unmanaged[Cdecl]<Texture, Rectangle, nint, void>)vt[358])(texture, rec, (nint)pixels);
			#endif
		}

		[NativeName(NativeNameType.Func, "UpdateTextureRec")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateTextureRec([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const void*")] void* pixels)
		{
			UpdateTextureRecNative(texture, rec, pixels);
		}

		/// <summary>
		/// Texture configuration functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GenTextureMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void GenTextureMipmapsNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D*")] Texture* texture)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture*, void>)vt[359])(texture);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[359])((nint)texture);
			#endif
		}

		/// <summary>
		/// Texture configuration functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GenTextureMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GenTextureMipmaps([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D*")] Texture* texture)
		{
			GenTextureMipmapsNative(texture);
		}

		/// <summary>
		/// Texture configuration functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GenTextureMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GenTextureMipmaps([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D*")] ref Texture texture)
		{
			fixed (Texture* ptexture = &texture)
			{
				GenTextureMipmapsNative((Texture*)ptexture);
			}
		}

		[NativeName(NativeNameType.Func, "SetTextureFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetTextureFilterNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "int")] int filter)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, int, void>)vt[360])(texture, filter);
			#else
			((delegate* unmanaged[Cdecl]<Texture, int, void>)vt[360])(texture, filter);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetTextureFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetTextureFilter([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "int")] int filter)
		{
			SetTextureFilterNative(texture, filter);
		}

		[NativeName(NativeNameType.Func, "SetTextureWrap")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetTextureWrapNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "wrap")] [NativeName(NativeNameType.Type, "int")] int wrap)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, int, void>)vt[361])(texture, wrap);
			#else
			((delegate* unmanaged[Cdecl]<Texture, int, void>)vt[361])(texture, wrap);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetTextureWrap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetTextureWrap([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "wrap")] [NativeName(NativeNameType.Type, "int")] int wrap)
		{
			SetTextureWrapNative(texture, wrap);
		}

		/// <summary>
		/// Texture drawing functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "DrawTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DrawTextureNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, int, int, Color, void>)vt[362])(texture, posX, posY, tint);
			#else
			((delegate* unmanaged[Cdecl]<Texture, int, int, Color, void>)vt[362])(texture, posX, posY, tint);
			#endif
		}

		/// <summary>
		/// Texture drawing functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "DrawTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTexture([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextureNative(texture, posX, posY, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextureV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DrawTextureVNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, Vector2, Color, void>)vt[363])(texture, position, tint);
			#else
			((delegate* unmanaged[Cdecl]<Texture, Vector2, Color, void>)vt[363])(texture, position, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextureV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextureV([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextureVNative(texture, position, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextureEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DrawTextureExNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, Vector2, float, float, Color, void>)vt[364])(texture, position, rotation, scale, tint);
			#else
			((delegate* unmanaged[Cdecl]<Texture, Vector2, float, float, Color, void>)vt[364])(texture, position, rotation, scale, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextureEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextureEx([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextureExNative(texture, position, rotation, scale, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextureRec")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DrawTextureRecNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle source, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, Rectangle, Vector2, Color, void>)vt[365])(texture, source, position, tint);
			#else
			((delegate* unmanaged[Cdecl]<Texture, Rectangle, Vector2, Color, void>)vt[365])(texture, source, position, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextureRec")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextureRec([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle source, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextureRecNative(texture, source, position, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTexturePro")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DrawTextureProNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle source, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle dest, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, Rectangle, Rectangle, Vector2, float, Color, void>)vt[366])(texture, source, dest, origin, rotation, tint);
			#else
			((delegate* unmanaged[Cdecl]<Texture, Rectangle, Rectangle, Vector2, float, Color, void>)vt[366])(texture, source, dest, origin, rotation, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTexturePro")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTexturePro([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle source, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle dest, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextureProNative(texture, source, dest, origin, rotation, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextureNPatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DrawTextureNPatchNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "nPatchInfo")] [NativeName(NativeNameType.Type, "NPatchInfo")] NPatchInfo nPatchInfo, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle dest, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, NPatchInfo, Rectangle, Vector2, float, Color, void>)vt[367])(texture, nPatchInfo, dest, origin, rotation, tint);
			#else
			((delegate* unmanaged[Cdecl]<Texture, NPatchInfo, Rectangle, Vector2, float, Color, void>)vt[367])(texture, nPatchInfo, dest, origin, rotation, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextureNPatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextureNPatch([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "nPatchInfo")] [NativeName(NativeNameType.Type, "NPatchInfo")] NPatchInfo nPatchInfo, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle dest, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextureNPatchNative(texture, nPatchInfo, dest, origin, rotation, tint);
		}

		/// <summary>
		/// Color/pixel related functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ColorIsEqual")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ColorIsEqualNative([NativeName(NativeNameType.Param, "col1")] [NativeName(NativeNameType.Type, "Color")] Color col1, [NativeName(NativeNameType.Param, "col2")] [NativeName(NativeNameType.Type, "Color")] Color col2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, Color, byte>)vt[368])(col1, col2);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Color, Color, byte>)vt[368])(col1, col2);
			#endif
		}

		/// <summary>
		/// Color/pixel related functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ColorIsEqual")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorIsEqual([NativeName(NativeNameType.Param, "col1")] [NativeName(NativeNameType.Type, "Color")] Color col1, [NativeName(NativeNameType.Param, "col2")] [NativeName(NativeNameType.Type, "Color")] Color col2)
		{
			byte ret = ColorIsEqualNative(col1, col2);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "Fade")]
		[return: NativeName(NativeNameType.Type, "Color")]
		internal static Color FadeNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "float")] float alpha)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, float, Color>)vt[369])(color, alpha);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Color, float, Color>)vt[369])(color, alpha);
			#endif
		}

		[NativeName(NativeNameType.Func, "Fade")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color Fade([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "float")] float alpha)
		{
			Color ret = FadeNative(color, alpha);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorToInt")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ColorToIntNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, int>)vt[370])(color);
			#else
			return (int)((delegate* unmanaged[Cdecl]<Color, int>)vt[370])(color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorToInt")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ColorToInt([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			int ret = ColorToIntNative(color);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorNormalize")]
		[return: NativeName(NativeNameType.Type, "Vector4")]
		internal static Vector4 ColorNormalizeNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, Vector4>)vt[371])(color);
			#else
			return (Vector4)((delegate* unmanaged[Cdecl]<Color, Vector4>)vt[371])(color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorNormalize")]
		[return: NativeName(NativeNameType.Type, "Vector4")]
		public static Vector4 ColorNormalize([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			Vector4 ret = ColorNormalizeNative(color);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorFromNormalized")]
		[return: NativeName(NativeNameType.Type, "Color")]
		internal static Color ColorFromNormalizedNative([NativeName(NativeNameType.Param, "normalized")] [NativeName(NativeNameType.Type, "Vector4")] Vector4 normalized)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector4, Color>)vt[372])(normalized);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Vector4, Color>)vt[372])(normalized);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorFromNormalized")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color ColorFromNormalized([NativeName(NativeNameType.Param, "normalized")] [NativeName(NativeNameType.Type, "Vector4")] Vector4 normalized)
		{
			Color ret = ColorFromNormalizedNative(normalized);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorToHSV")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		internal static Vector3 ColorToHSVNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, Vector3>)vt[373])(color);
			#else
			return (Vector3)((delegate* unmanaged[Cdecl]<Color, Vector3>)vt[373])(color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorToHSV")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		public static Vector3 ColorToHSV([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			Vector3 ret = ColorToHSVNative(color);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorFromHSV")]
		[return: NativeName(NativeNameType.Type, "Color")]
		internal static Color ColorFromHSVNative([NativeName(NativeNameType.Param, "hue")] [NativeName(NativeNameType.Type, "float")] float hue, [NativeName(NativeNameType.Param, "saturation")] [NativeName(NativeNameType.Type, "float")] float saturation, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float, Color>)vt[374])(hue, saturation, value);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<float, float, float, Color>)vt[374])(hue, saturation, value);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorFromHSV")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color ColorFromHSV([NativeName(NativeNameType.Param, "hue")] [NativeName(NativeNameType.Type, "float")] float hue, [NativeName(NativeNameType.Param, "saturation")] [NativeName(NativeNameType.Type, "float")] float saturation, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			Color ret = ColorFromHSVNative(hue, saturation, value);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorTint")]
		[return: NativeName(NativeNameType.Type, "Color")]
		internal static Color ColorTintNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, Color, Color>)vt[375])(color, tint);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Color, Color, Color>)vt[375])(color, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorTint")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color ColorTint([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			Color ret = ColorTintNative(color, tint);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorBrightness")]
		[return: NativeName(NativeNameType.Type, "Color")]
		internal static Color ColorBrightnessNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "factor")] [NativeName(NativeNameType.Type, "float")] float factor)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, float, Color>)vt[376])(color, factor);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Color, float, Color>)vt[376])(color, factor);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorBrightness")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color ColorBrightness([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "factor")] [NativeName(NativeNameType.Type, "float")] float factor)
		{
			Color ret = ColorBrightnessNative(color, factor);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorContrast")]
		[return: NativeName(NativeNameType.Type, "Color")]
		internal static Color ColorContrastNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "contrast")] [NativeName(NativeNameType.Type, "float")] float contrast)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, float, Color>)vt[377])(color, contrast);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Color, float, Color>)vt[377])(color, contrast);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorContrast")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color ColorContrast([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "contrast")] [NativeName(NativeNameType.Type, "float")] float contrast)
		{
			Color ret = ColorContrastNative(color, contrast);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorAlpha")]
		[return: NativeName(NativeNameType.Type, "Color")]
		internal static Color ColorAlphaNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "float")] float alpha)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, float, Color>)vt[378])(color, alpha);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Color, float, Color>)vt[378])(color, alpha);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorAlpha")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color ColorAlpha([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "float")] float alpha)
		{
			Color ret = ColorAlphaNative(color, alpha);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorAlphaBlend")]
		[return: NativeName(NativeNameType.Type, "Color")]
		internal static Color ColorAlphaBlendNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Color")] Color dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "Color")] Color src, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, Color, Color, Color>)vt[379])(dst, src, tint);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Color, Color, Color, Color>)vt[379])(dst, src, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorAlphaBlend")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color ColorAlphaBlend([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Color")] Color dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "Color")] Color src, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			Color ret = ColorAlphaBlendNative(dst, src, tint);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetColor")]
		[return: NativeName(NativeNameType.Type, "Color")]
		internal static Color GetColorNative([NativeName(NativeNameType.Param, "hexValue")] [NativeName(NativeNameType.Type, "unsigned int")] uint hexValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, Color>)vt[380])(hexValue);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<uint, Color>)vt[380])(hexValue);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetColor")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color GetColor([NativeName(NativeNameType.Param, "hexValue")] [NativeName(NativeNameType.Type, "unsigned int")] uint hexValue)
		{
			Color ret = GetColorNative(hexValue);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetPixelColor")]
		[return: NativeName(NativeNameType.Type, "Color")]
		internal static Color GetPixelColorNative([NativeName(NativeNameType.Param, "srcPtr")] [NativeName(NativeNameType.Type, "void*")] void* srcPtr, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, Color>)vt[381])(srcPtr, format);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<nint, int, Color>)vt[381])((nint)srcPtr, format);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetPixelColor")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color GetPixelColor([NativeName(NativeNameType.Param, "srcPtr")] [NativeName(NativeNameType.Type, "void*")] void* srcPtr, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			Color ret = GetPixelColorNative(srcPtr, format);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SetPixelColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetPixelColorNative([NativeName(NativeNameType.Param, "dstPtr")] [NativeName(NativeNameType.Type, "void*")] void* dstPtr, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, Color, int, void>)vt[382])(dstPtr, color, format);
			#else
			((delegate* unmanaged[Cdecl]<nint, Color, int, void>)vt[382])((nint)dstPtr, color, format);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetPixelColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetPixelColor([NativeName(NativeNameType.Param, "dstPtr")] [NativeName(NativeNameType.Type, "void*")] void* dstPtr, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			SetPixelColorNative(dstPtr, color, format);
		}

		[NativeName(NativeNameType.Func, "GetPixelDataSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int GetPixelDataSizeNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int, int>)vt[383])(width, height, format);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int, int, int>)vt[383])(width, height, format);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetPixelDataSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetPixelDataSize([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			int ret = GetPixelDataSizeNative(width, height, format);
			return ret;
		}

		/// <summary>
		/// Font loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetFontDefault")]
		[return: NativeName(NativeNameType.Type, "Font")]
		internal static Font GetFontDefaultNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Font>)vt[384])();
			#else
			return (Font)((delegate* unmanaged[Cdecl]<Font>)vt[384])();
			#endif
		}

		/// <summary>
		/// Font loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetFontDefault")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font GetFontDefault()
		{
			Font ret = GetFontDefaultNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFont")]
		[return: NativeName(NativeNameType.Type, "Font")]
		internal static Font LoadFontNative([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Font>)vt[385])(fileName);
			#else
			return (Font)((delegate* unmanaged[Cdecl]<nint, Font>)vt[385])((nint)fileName);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadFont")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFont([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			Font ret = LoadFontNative(fileName);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFont")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFont([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				Font ret = LoadFontNative((byte*)pfileName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFont")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFont([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				Font ret = LoadFontNative((byte*)pfileName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFont")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFont([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Font ret = LoadFontNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		internal static Font LoadFontExNative([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int*, int, Font>)vt[386])(fileName, fontSize, codepoints, codepointCount);
			#else
			return (Font)((delegate* unmanaged[Cdecl]<nint, int, nint, int, Font>)vt[386])((nint)fileName, fontSize, (nint)codepoints, codepointCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			Font ret = LoadFontExNative(fileName, fontSize, codepoints, codepointCount);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileName = &fileName)
			{
				Font ret = LoadFontExNative((byte*)pfileName, fontSize, codepoints, codepointCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileName = fileName)
			{
				Font ret = LoadFontExNative((byte*)pfileName, fontSize, codepoints, codepointCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Font ret = LoadFontExNative(pStr0, fontSize, codepoints, codepointCount);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (int* pcodepoints = &codepoints)
			{
				Font ret = LoadFontExNative(fileName, fontSize, (int*)pcodepoints, codepointCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileName = &fileName)
			{
				fixed (int* pcodepoints = &codepoints)
				{
					Font ret = LoadFontExNative((byte*)pfileName, fontSize, (int*)pcodepoints, codepointCount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileName = fileName)
			{
				fixed (int* pcodepoints = &codepoints)
				{
					Font ret = LoadFontExNative((byte*)pfileName, fontSize, (int*)pcodepoints, codepointCount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcodepoints = &codepoints)
			{
				Font ret = LoadFontExNative(pStr0, fontSize, (int*)pcodepoints, codepointCount);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromImage")]
		[return: NativeName(NativeNameType.Type, "Font")]
		internal static Font LoadFontFromImageNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "Color")] Color key, [NativeName(NativeNameType.Param, "firstChar")] [NativeName(NativeNameType.Type, "int")] int firstChar)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, Color, int, Font>)vt[387])(image, key, firstChar);
			#else
			return (Font)((delegate* unmanaged[Cdecl]<Image, Color, int, Font>)vt[387])(image, key, firstChar);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadFontFromImage")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromImage([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "Color")] Color key, [NativeName(NativeNameType.Param, "firstChar")] [NativeName(NativeNameType.Type, "int")] int firstChar)
		{
			Font ret = LoadFontFromImageNative(image, key, firstChar);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		internal static Font LoadFontFromMemoryNative([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int, int, int*, int, Font>)vt[388])(fileType, fileData, dataSize, fontSize, codepoints, codepointCount);
			#else
			return (Font)((delegate* unmanaged[Cdecl]<nint, nint, int, int, nint, int, Font>)vt[388])((nint)fileType, (nint)fileData, dataSize, fontSize, (nint)codepoints, codepointCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			Font ret = LoadFontFromMemoryNative(fileType, fileData, dataSize, fontSize, codepoints, codepointCount);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = &fileType)
			{
				Font ret = LoadFontFromMemoryNative((byte*)pfileType, fileData, dataSize, fontSize, codepoints, codepointCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = fileType)
			{
				Font ret = LoadFontFromMemoryNative((byte*)pfileType, fileData, dataSize, fontSize, codepoints, codepointCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] string fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Font ret = LoadFontFromMemoryNative(pStr0, fileData, dataSize, fontSize, codepoints, codepointCount);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileData = &fileData)
			{
				Font ret = LoadFontFromMemoryNative(fileType, (byte*)pfileData, dataSize, fontSize, codepoints, codepointCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = &fileType)
			{
				fixed (byte* pfileData = &fileData)
				{
					Font ret = LoadFontFromMemoryNative((byte*)pfileType, (byte*)pfileData, dataSize, fontSize, codepoints, codepointCount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = fileType)
			{
				fixed (byte* pfileData = &fileData)
				{
					Font ret = LoadFontFromMemoryNative((byte*)pfileType, (byte*)pfileData, dataSize, fontSize, codepoints, codepointCount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] string fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pfileData = &fileData)
			{
				Font ret = LoadFontFromMemoryNative(pStr0, (byte*)pfileData, dataSize, fontSize, codepoints, codepointCount);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (int* pcodepoints = &codepoints)
			{
				Font ret = LoadFontFromMemoryNative(fileType, fileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = &fileType)
			{
				fixed (int* pcodepoints = &codepoints)
				{
					Font ret = LoadFontFromMemoryNative((byte*)pfileType, fileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = fileType)
			{
				fixed (int* pcodepoints = &codepoints)
				{
					Font ret = LoadFontFromMemoryNative((byte*)pfileType, fileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] string fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcodepoints = &codepoints)
			{
				Font ret = LoadFontFromMemoryNative(pStr0, fileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileData = &fileData)
			{
				fixed (int* pcodepoints = &codepoints)
				{
					Font ret = LoadFontFromMemoryNative(fileType, (byte*)pfileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = &fileType)
			{
				fixed (byte* pfileData = &fileData)
				{
					fixed (int* pcodepoints = &codepoints)
					{
						Font ret = LoadFontFromMemoryNative((byte*)pfileType, (byte*)pfileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = fileType)
			{
				fixed (byte* pfileData = &fileData)
				{
					fixed (int* pcodepoints = &codepoints)
					{
						Font ret = LoadFontFromMemoryNative((byte*)pfileType, (byte*)pfileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] string fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pfileData = &fileData)
			{
				fixed (int* pcodepoints = &codepoints)
				{
					Font ret = LoadFontFromMemoryNative(pStr0, (byte*)pfileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "IsFontReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsFontReadyNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Font, byte>)vt[389])(font);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Font, byte>)vt[389])(font);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsFontReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsFontReady([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font)
		{
			byte ret = IsFontReadyNative(font);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "LoadFontData")]
		[return: NativeName(NativeNameType.Type, "GlyphInfo*")]
		internal static GlyphInfo* LoadFontDataNative([NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int, int*, int, int, GlyphInfo*>)vt[390])(fileData, dataSize, fontSize, codepoints, codepointCount, type);
			#else
			return (GlyphInfo*)((delegate* unmanaged[Cdecl]<nint, int, int, nint, int, int, nint>)vt[390])((nint)fileData, dataSize, fontSize, (nint)codepoints, codepointCount, type);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadFontData")]
		[return: NativeName(NativeNameType.Type, "GlyphInfo*")]
		public static GlyphInfo* LoadFontData([NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			GlyphInfo* ret = LoadFontDataNative(fileData, dataSize, fontSize, codepoints, codepointCount, type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFontData")]
		[return: NativeName(NativeNameType.Type, "GlyphInfo*")]
		public static GlyphInfo* LoadFontData([NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pfileData = &fileData)
			{
				GlyphInfo* ret = LoadFontDataNative((byte*)pfileData, dataSize, fontSize, codepoints, codepointCount, type);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontData")]
		[return: NativeName(NativeNameType.Type, "GlyphInfo*")]
		public static GlyphInfo* LoadFontData([NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (int* pcodepoints = &codepoints)
			{
				GlyphInfo* ret = LoadFontDataNative(fileData, dataSize, fontSize, (int*)pcodepoints, codepointCount, type);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontData")]
		[return: NativeName(NativeNameType.Type, "GlyphInfo*")]
		public static GlyphInfo* LoadFontData([NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pfileData = &fileData)
			{
				fixed (int* pcodepoints = &codepoints)
				{
					GlyphInfo* ret = LoadFontDataNative((byte*)pfileData, dataSize, fontSize, (int*)pcodepoints, codepointCount, type);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "GenImageFontAtlas")]
		[return: NativeName(NativeNameType.Type, "Image")]
		internal static Image GenImageFontAtlasNative([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "const GlyphInfo*")] GlyphInfo* glyphs, [NativeName(NativeNameType.Param, "glyphRecs")] [NativeName(NativeNameType.Type, "Rectangle**")] Rectangle** glyphRecs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "padding")] [NativeName(NativeNameType.Type, "int")] int padding, [NativeName(NativeNameType.Param, "packMethod")] [NativeName(NativeNameType.Type, "int")] int packMethod)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GlyphInfo*, Rectangle**, int, int, int, int, Image>)vt[391])(glyphs, glyphRecs, glyphCount, fontSize, padding, packMethod);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, int, Image>)vt[391])((nint)glyphs, (nint)glyphRecs, glyphCount, fontSize, padding, packMethod);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageFontAtlas")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageFontAtlas([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "const GlyphInfo*")] GlyphInfo* glyphs, [NativeName(NativeNameType.Param, "glyphRecs")] [NativeName(NativeNameType.Type, "Rectangle**")] Rectangle** glyphRecs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "padding")] [NativeName(NativeNameType.Type, "int")] int padding, [NativeName(NativeNameType.Param, "packMethod")] [NativeName(NativeNameType.Type, "int")] int packMethod)
		{
			Image ret = GenImageFontAtlasNative(glyphs, glyphRecs, glyphCount, fontSize, padding, packMethod);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageFontAtlas")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageFontAtlas([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "const GlyphInfo*")] ref GlyphInfo glyphs, [NativeName(NativeNameType.Param, "glyphRecs")] [NativeName(NativeNameType.Type, "Rectangle**")] Rectangle** glyphRecs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "padding")] [NativeName(NativeNameType.Type, "int")] int padding, [NativeName(NativeNameType.Param, "packMethod")] [NativeName(NativeNameType.Type, "int")] int packMethod)
		{
			fixed (GlyphInfo* pglyphs = &glyphs)
			{
				Image ret = GenImageFontAtlasNative((GlyphInfo*)pglyphs, glyphRecs, glyphCount, fontSize, padding, packMethod);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GenImageFontAtlas")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageFontAtlas([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "const GlyphInfo*")] GlyphInfo* glyphs, [NativeName(NativeNameType.Param, "glyphRecs")] [NativeName(NativeNameType.Type, "Rectangle**")] ref Rectangle* glyphRecs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "padding")] [NativeName(NativeNameType.Type, "int")] int padding, [NativeName(NativeNameType.Param, "packMethod")] [NativeName(NativeNameType.Type, "int")] int packMethod)
		{
			fixed (Rectangle** pglyphRecs = &glyphRecs)
			{
				Image ret = GenImageFontAtlasNative(glyphs, (Rectangle**)pglyphRecs, glyphCount, fontSize, padding, packMethod);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GenImageFontAtlas")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageFontAtlas([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "const GlyphInfo*")] ref GlyphInfo glyphs, [NativeName(NativeNameType.Param, "glyphRecs")] [NativeName(NativeNameType.Type, "Rectangle**")] ref Rectangle* glyphRecs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "padding")] [NativeName(NativeNameType.Type, "int")] int padding, [NativeName(NativeNameType.Param, "packMethod")] [NativeName(NativeNameType.Type, "int")] int packMethod)
		{
			fixed (GlyphInfo* pglyphs = &glyphs)
			{
				fixed (Rectangle** pglyphRecs = &glyphRecs)
				{
					Image ret = GenImageFontAtlasNative((GlyphInfo*)pglyphs, (Rectangle**)pglyphRecs, glyphCount, fontSize, padding, packMethod);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "UnloadFontData")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadFontDataNative([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "GlyphInfo*")] GlyphInfo* glyphs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GlyphInfo*, int, void>)vt[392])(glyphs, glyphCount);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[392])((nint)glyphs, glyphCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadFontData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadFontData([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "GlyphInfo*")] GlyphInfo* glyphs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount)
		{
			UnloadFontDataNative(glyphs, glyphCount);
		}

		[NativeName(NativeNameType.Func, "UnloadFontData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadFontData([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "GlyphInfo*")] ref GlyphInfo glyphs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount)
		{
			fixed (GlyphInfo* pglyphs = &glyphs)
			{
				UnloadFontDataNative((GlyphInfo*)pglyphs, glyphCount);
			}
		}

		[NativeName(NativeNameType.Func, "UnloadFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadFontNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Font, void>)vt[393])(font);
			#else
			((delegate* unmanaged[Cdecl]<Font, void>)vt[393])(font);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadFont([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font)
		{
			UnloadFontNative(font);
		}

		[NativeName(NativeNameType.Func, "ExportFontAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ExportFontAsCodeNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Font, byte*, byte>)vt[394])(font, fileName);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Font, nint, byte>)vt[394])(font, (nint)fileName);
			#endif
		}

		[NativeName(NativeNameType.Func, "ExportFontAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportFontAsCode([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			byte ret = ExportFontAsCodeNative(font, fileName);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "ExportFontAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportFontAsCode([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				byte ret = ExportFontAsCodeNative(font, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportFontAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportFontAsCode([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				byte ret = ExportFontAsCodeNative(font, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportFontAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportFontAsCode([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ExportFontAsCodeNative(font, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Text drawing functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "DrawFPS")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DrawFPSNative([NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[395])(posX, posY);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[395])(posX, posY);
			#endif
		}

		/// <summary>
		/// Text drawing functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "DrawFPS")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawFPS([NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY)
		{
			DrawFPSNative(posX, posY);
		}

		[NativeName(NativeNameType.Func, "DrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DrawTextNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, int, int, int, Color, void>)vt[396])(text, posX, posY, fontSize, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, Color, void>)vt[396])((nint)text, posX, posY, fontSize, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			DrawTextNative(text, posX, posY, fontSize, color);
		}

		[NativeName(NativeNameType.Func, "DrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (byte* ptext = &text)
			{
				DrawTextNative((byte*)ptext, posX, posY, fontSize, color);
			}
		}

		[NativeName(NativeNameType.Func, "DrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (byte* ptext = text)
			{
				DrawTextNative((byte*)ptext, posX, posY, fontSize, color);
			}
		}

		[NativeName(NativeNameType.Func, "DrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DrawTextNative(pStr0, posX, posY, fontSize, color);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "DrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DrawTextExNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Font, byte*, Vector2, float, float, Color, void>)vt[397])(font, text, position, fontSize, spacing, tint);
			#else
			((delegate* unmanaged[Cdecl]<Font, nint, Vector2, float, float, Color, void>)vt[397])(font, (nint)text, position, fontSize, spacing, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextExNative(font, text, position, fontSize, spacing, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = &text)
			{
				DrawTextExNative(font, (byte*)ptext, position, fontSize, spacing, tint);
			}
		}

		[NativeName(NativeNameType.Func, "DrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = text)
			{
				DrawTextExNative(font, (byte*)ptext, position, fontSize, spacing, tint);
			}
		}

		[NativeName(NativeNameType.Func, "DrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DrawTextExNative(font, pStr0, position, fontSize, spacing, tint);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "DrawTextPro")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DrawTextProNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Font, byte*, Vector2, Vector2, float, float, float, Color, void>)vt[398])(font, text, position, origin, rotation, fontSize, spacing, tint);
			#else
			((delegate* unmanaged[Cdecl]<Font, nint, Vector2, Vector2, float, float, float, Color, void>)vt[398])(font, (nint)text, position, origin, rotation, fontSize, spacing, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextPro")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextPro([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextProNative(font, text, position, origin, rotation, fontSize, spacing, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextPro")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextPro([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = &text)
			{
				DrawTextProNative(font, (byte*)ptext, position, origin, rotation, fontSize, spacing, tint);
			}
		}

		[NativeName(NativeNameType.Func, "DrawTextPro")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextPro([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = text)
			{
				DrawTextProNative(font, (byte*)ptext, position, origin, rotation, fontSize, spacing, tint);
			}
		}

		[NativeName(NativeNameType.Func, "DrawTextPro")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextPro([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DrawTextProNative(font, pStr0, position, origin, rotation, fontSize, spacing, tint);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "DrawTextCodepoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DrawTextCodepointNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "int")] int codepoint, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Font, int, Vector2, float, Color, void>)vt[399])(font, codepoint, position, fontSize, tint);
			#else
			((delegate* unmanaged[Cdecl]<Font, int, Vector2, float, Color, void>)vt[399])(font, codepoint, position, fontSize, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextCodepoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextCodepoint([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "int")] int codepoint, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextCodepointNative(font, codepoint, position, fontSize, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextCodepoints")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DrawTextCodepointsNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "const int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Font, int*, int, Vector2, float, float, Color, void>)vt[400])(font, codepoints, codepointCount, position, fontSize, spacing, tint);
			#else
			((delegate* unmanaged[Cdecl]<Font, nint, int, Vector2, float, float, Color, void>)vt[400])(font, (nint)codepoints, codepointCount, position, fontSize, spacing, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextCodepoints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextCodepoints([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "const int*")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextCodepointsNative(font, codepoints, codepointCount, position, fontSize, spacing, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextCodepoints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextCodepoints([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "const int*")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (int* pcodepoints = &codepoints)
			{
				DrawTextCodepointsNative(font, (int*)pcodepoints, codepointCount, position, fontSize, spacing, tint);
			}
		}

		/// <summary>
		/// Text font info functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SetTextLineSpacing")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetTextLineSpacingNative([NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "int")] int spacing)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[401])(spacing);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[401])(spacing);
			#endif
		}

		/// <summary>
		/// Text font info functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SetTextLineSpacing")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetTextLineSpacing([NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "int")] int spacing)
		{
			SetTextLineSpacingNative(spacing);
		}

		[NativeName(NativeNameType.Func, "MeasureText")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int MeasureTextNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int>)vt[402])(text, fontSize);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)vt[402])((nint)text, fontSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "MeasureText")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int MeasureText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize)
		{
			int ret = MeasureTextNative(text, fontSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "MeasureText")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int MeasureText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize)
		{
			fixed (byte* ptext = &text)
			{
				int ret = MeasureTextNative((byte*)ptext, fontSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "MeasureText")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int MeasureText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize)
		{
			fixed (byte* ptext = text)
			{
				int ret = MeasureTextNative((byte*)ptext, fontSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "MeasureText")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int MeasureText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = MeasureTextNative(pStr0, fontSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "MeasureTextEx")]
		[return: NativeName(NativeNameType.Type, "Vector2")]
		internal static Vector2 MeasureTextExNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Font, byte*, float, float, Vector2>)vt[403])(font, text, fontSize, spacing);
			#else
			return (Vector2)((delegate* unmanaged[Cdecl]<Font, nint, float, float, Vector2>)vt[403])(font, (nint)text, fontSize, spacing);
			#endif
		}

		[NativeName(NativeNameType.Func, "MeasureTextEx")]
		[return: NativeName(NativeNameType.Type, "Vector2")]
		public static Vector2 MeasureTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing)
		{
			Vector2 ret = MeasureTextExNative(font, text, fontSize, spacing);
			return ret;
		}

		[NativeName(NativeNameType.Func, "MeasureTextEx")]
		[return: NativeName(NativeNameType.Type, "Vector2")]
		public static Vector2 MeasureTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing)
		{
			fixed (byte* ptext = &text)
			{
				Vector2 ret = MeasureTextExNative(font, (byte*)ptext, fontSize, spacing);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "MeasureTextEx")]
		[return: NativeName(NativeNameType.Type, "Vector2")]
		public static Vector2 MeasureTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing)
		{
			fixed (byte* ptext = text)
			{
				Vector2 ret = MeasureTextExNative(font, (byte*)ptext, fontSize, spacing);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "MeasureTextEx")]
		[return: NativeName(NativeNameType.Type, "Vector2")]
		public static Vector2 MeasureTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Vector2 ret = MeasureTextExNative(font, pStr0, fontSize, spacing);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetGlyphIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int GetGlyphIndexNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "int")] int codepoint)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Font, int, int>)vt[404])(font, codepoint);
			#else
			return (int)((delegate* unmanaged[Cdecl]<Font, int, int>)vt[404])(font, codepoint);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetGlyphIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetGlyphIndex([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "int")] int codepoint)
		{
			int ret = GetGlyphIndexNative(font, codepoint);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetGlyphInfo")]
		[return: NativeName(NativeNameType.Type, "GlyphInfo")]
		internal static GlyphInfo GetGlyphInfoNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "int")] int codepoint)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Font, int, GlyphInfo>)vt[405])(font, codepoint);
			#else
			return (GlyphInfo)((delegate* unmanaged[Cdecl]<Font, int, GlyphInfo>)vt[405])(font, codepoint);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetGlyphInfo")]
		[return: NativeName(NativeNameType.Type, "GlyphInfo")]
		public static GlyphInfo GetGlyphInfo([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "int")] int codepoint)
		{
			GlyphInfo ret = GetGlyphInfoNative(font, codepoint);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetGlyphAtlasRec")]
		[return: NativeName(NativeNameType.Type, "Rectangle")]
		internal static Rectangle GetGlyphAtlasRecNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "int")] int codepoint)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Font, int, Rectangle>)vt[406])(font, codepoint);
			#else
			return (Rectangle)((delegate* unmanaged[Cdecl]<Font, int, Rectangle>)vt[406])(font, codepoint);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetGlyphAtlasRec")]
		[return: NativeName(NativeNameType.Type, "Rectangle")]
		public static Rectangle GetGlyphAtlasRec([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "int")] int codepoint)
		{
			Rectangle ret = GetGlyphAtlasRecNative(font, codepoint);
			return ret;
		}

		/// <summary>
		/// Text codepoints management functions (unicode characters)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadUTF8")]
		[return: NativeName(NativeNameType.Type, "char*")]
		internal static byte* LoadUTF8Native([NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "const int*")] int* codepoints, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "int")] int length)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int*, int, byte*>)vt[407])(codepoints, length);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, nint>)vt[407])((nint)codepoints, length);
			#endif
		}

		/// <summary>
		/// Text codepoints management functions (unicode characters)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadUTF8")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* LoadUTF8([NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "const int*")] int* codepoints, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "int")] int length)
		{
			byte* ret = LoadUTF8Native(codepoints, length);
			return ret;
		}

		/// <summary>
		/// Text codepoints management functions (unicode characters)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadUTF8")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string LoadUTF8S([NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "const int*")] int* codepoints, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "int")] int length)
		{
			string ret = Utils.DecodeStringUTF8(LoadUTF8Native(codepoints, length));
			return ret;
		}

		/// <summary>
		/// Text codepoints management functions (unicode characters)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadUTF8")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* LoadUTF8([NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "const int*")] ref int codepoints, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "int")] int length)
		{
			fixed (int* pcodepoints = &codepoints)
			{
				byte* ret = LoadUTF8Native((int*)pcodepoints, length);
				return ret;
			}
		}

		/// <summary>
		/// Text codepoints management functions (unicode characters)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadUTF8")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string LoadUTF8S([NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "const int*")] ref int codepoints, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "int")] int length)
		{
			fixed (int* pcodepoints = &codepoints)
			{
				string ret = Utils.DecodeStringUTF8(LoadUTF8Native((int*)pcodepoints, length));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "UnloadUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadUTF8Native([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char*")] byte* text)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[408])(text);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[408])((nint)text);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadUTF8([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char*")] byte* text)
		{
			UnloadUTF8Native(text);
		}

		[NativeName(NativeNameType.Func, "UnloadUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadUTF8([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char*")] ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				UnloadUTF8Native((byte*)ptext);
			}
		}

		[NativeName(NativeNameType.Func, "UnloadUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadUTF8([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char*")] ref string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			UnloadUTF8Native(pStr0);
			text = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "LoadCodepoints")]
		[return: NativeName(NativeNameType.Type, "int*")]
		internal static int* LoadCodepointsNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int*")] int* count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int*, int*>)vt[409])(text, count);
			#else
			return (int*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)vt[409])((nint)text, (nint)count);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadCodepoints")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public static int* LoadCodepoints([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int*")] int* count)
		{
			int* ret = LoadCodepointsNative(text, count);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadCodepoints")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public static int* LoadCodepoints([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int*")] int* count)
		{
			fixed (byte* ptext = &text)
			{
				int* ret = LoadCodepointsNative((byte*)ptext, count);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadCodepoints")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public static int* LoadCodepoints([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int*")] int* count)
		{
			fixed (byte* ptext = text)
			{
				int* ret = LoadCodepointsNative((byte*)ptext, count);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadCodepoints")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public static int* LoadCodepoints([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int*")] int* count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int* ret = LoadCodepointsNative(pStr0, count);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadCodepoints")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public static int* LoadCodepoints([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int*")] ref int count)
		{
			fixed (int* pcount = &count)
			{
				int* ret = LoadCodepointsNative(text, (int*)pcount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadCodepoints")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public static int* LoadCodepoints([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int*")] ref int count)
		{
			fixed (byte* ptext = &text)
			{
				fixed (int* pcount = &count)
				{
					int* ret = LoadCodepointsNative((byte*)ptext, (int*)pcount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadCodepoints")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public static int* LoadCodepoints([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int*")] ref int count)
		{
			fixed (byte* ptext = text)
			{
				fixed (int* pcount = &count)
				{
					int* ret = LoadCodepointsNative((byte*)ptext, (int*)pcount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadCodepoints")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public static int* LoadCodepoints([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int*")] ref int count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcount = &count)
			{
				int* ret = LoadCodepointsNative(pStr0, (int*)pcount);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "UnloadCodepoints")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadCodepointsNative([NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)vt[410])(codepoints);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[410])((nint)codepoints);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadCodepoints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadCodepoints([NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] int* codepoints)
		{
			UnloadCodepointsNative(codepoints);
		}

		[NativeName(NativeNameType.Func, "UnloadCodepoints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadCodepoints([NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int*")] ref int codepoints)
		{
			fixed (int* pcodepoints = &codepoints)
			{
				UnloadCodepointsNative((int*)pcodepoints);
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepointCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int GetCodepointCountNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int>)vt[411])(text);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[411])((nint)text);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetCodepointCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepointCount([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			int ret = GetCodepointCountNative(text);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCodepointCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepointCount([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				int ret = GetCodepointCountNative((byte*)ptext);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepointCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepointCount([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text)
		{
			fixed (byte* ptext = text)
			{
				int ret = GetCodepointCountNative((byte*)ptext);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepointCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepointCount([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = GetCodepointCountNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCodepoint")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int GetCodepointNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] int* codepointSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int*, int>)vt[412])(text, codepointSize);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[412])((nint)text, (nint)codepointSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetCodepoint")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepoint([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] int* codepointSize)
		{
			int ret = GetCodepointNative(text, codepointSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCodepoint")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepoint([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] int* codepointSize)
		{
			fixed (byte* ptext = &text)
			{
				int ret = GetCodepointNative((byte*)ptext, codepointSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepoint")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepoint([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] int* codepointSize)
		{
			fixed (byte* ptext = text)
			{
				int ret = GetCodepointNative((byte*)ptext, codepointSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepoint")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepoint([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] int* codepointSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = GetCodepointNative(pStr0, codepointSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCodepoint")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepoint([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] ref int codepointSize)
		{
			fixed (int* pcodepointSize = &codepointSize)
			{
				int ret = GetCodepointNative(text, (int*)pcodepointSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepoint")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepoint([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] ref int codepointSize)
		{
			fixed (byte* ptext = &text)
			{
				fixed (int* pcodepointSize = &codepointSize)
				{
					int ret = GetCodepointNative((byte*)ptext, (int*)pcodepointSize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepoint")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepoint([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] ref int codepointSize)
		{
			fixed (byte* ptext = text)
			{
				fixed (int* pcodepointSize = &codepointSize)
				{
					int ret = GetCodepointNative((byte*)ptext, (int*)pcodepointSize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepoint")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepoint([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] ref int codepointSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcodepointSize = &codepointSize)
			{
				int ret = GetCodepointNative(pStr0, (int*)pcodepointSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepointNext")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int GetCodepointNextNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] int* codepointSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int*, int>)vt[413])(text, codepointSize);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[413])((nint)text, (nint)codepointSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetCodepointNext")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepointNext([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] int* codepointSize)
		{
			int ret = GetCodepointNextNative(text, codepointSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCodepointNext")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepointNext([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] int* codepointSize)
		{
			fixed (byte* ptext = &text)
			{
				int ret = GetCodepointNextNative((byte*)ptext, codepointSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepointNext")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepointNext([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] int* codepointSize)
		{
			fixed (byte* ptext = text)
			{
				int ret = GetCodepointNextNative((byte*)ptext, codepointSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepointNext")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepointNext([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] int* codepointSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = GetCodepointNextNative(pStr0, codepointSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCodepointNext")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepointNext([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] ref int codepointSize)
		{
			fixed (int* pcodepointSize = &codepointSize)
			{
				int ret = GetCodepointNextNative(text, (int*)pcodepointSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepointNext")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepointNext([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] ref int codepointSize)
		{
			fixed (byte* ptext = &text)
			{
				fixed (int* pcodepointSize = &codepointSize)
				{
					int ret = GetCodepointNextNative((byte*)ptext, (int*)pcodepointSize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepointNext")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepointNext([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] ref int codepointSize)
		{
			fixed (byte* ptext = text)
			{
				fixed (int* pcodepointSize = &codepointSize)
				{
					int ret = GetCodepointNextNative((byte*)ptext, (int*)pcodepointSize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepointNext")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepointNext([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] ref int codepointSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcodepointSize = &codepointSize)
			{
				int ret = GetCodepointNextNative(pStr0, (int*)pcodepointSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepointPrevious")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int GetCodepointPreviousNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] int* codepointSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int*, int>)vt[414])(text, codepointSize);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[414])((nint)text, (nint)codepointSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetCodepointPrevious")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepointPrevious([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] int* codepointSize)
		{
			int ret = GetCodepointPreviousNative(text, codepointSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCodepointPrevious")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepointPrevious([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] int* codepointSize)
		{
			fixed (byte* ptext = &text)
			{
				int ret = GetCodepointPreviousNative((byte*)ptext, codepointSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCodepointPrevious")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetCodepointPrevious([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "codepointSize")] [NativeName(NativeNameType.Type, "int*")] int* codepointSize)
		{
			fixed (byte* ptext = text)
			{
				int ret = GetCodepointPreviousNative((byte*)ptext, codepointSize);
				return ret;
			}
		}
	}
}
