// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Raylib
{
	public unsafe partial class Raylib
	{

		[NativeName(NativeNameType.Func, "LoadImageAnimFromMemory")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image LoadImageAnimFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "frames")] [NativeName(NativeNameType.Type, "int *")] ref int frames)
		{
			fixed (byte* pfileData = &fileData)
			{
				fixed (int* pframes = &frames)
				{
					Image ret = LoadImageAnimFromMemoryNative(fileType, (byte*)pfileData, dataSize, (int*)pframes);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadImageAnimFromMemory")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image LoadImageAnimFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "frames")] [NativeName(NativeNameType.Type, "int *")] ref int frames)
		{
			fixed (byte* pfileType = &fileType)
			{
				fixed (byte* pfileData = &fileData)
				{
					fixed (int* pframes = &frames)
					{
						Image ret = LoadImageAnimFromMemoryNative((byte*)pfileType, (byte*)pfileData, dataSize, (int*)pframes);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadImageAnimFromMemory")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image LoadImageAnimFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "frames")] [NativeName(NativeNameType.Type, "int *")] ref int frames)
		{
			fixed (byte* pfileType = fileType)
			{
				fixed (byte* pfileData = &fileData)
				{
					fixed (int* pframes = &frames)
					{
						Image ret = LoadImageAnimFromMemoryNative((byte*)pfileType, (byte*)pfileData, dataSize, (int*)pframes);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadImageAnimFromMemory")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image LoadImageAnimFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] string fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "frames")] [NativeName(NativeNameType.Type, "int *")] ref int frames)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pfileData = &fileData)
			{
				fixed (int* pframes = &frames)
				{
					Image ret = LoadImageAnimFromMemoryNative(pStr0, (byte*)pfileData, dataSize, (int*)pframes);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadImageFromMemory")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image LoadImageFromMemoryNative([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int, Image>)funcTable[281])(fileType, fileData, dataSize);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<nint, nint, int, Image>)funcTable[281])((nint)fileType, (nint)fileData, dataSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadImageFromMemory")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image LoadImageFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			Image ret = LoadImageFromMemoryNative(fileType, fileData, dataSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadImageFromMemory")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image LoadImageFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = &fileType)
			{
				Image ret = LoadImageFromMemoryNative((byte*)pfileType, fileData, dataSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadImageFromMemory")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image LoadImageFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = fileType)
			{
				Image ret = LoadImageFromMemoryNative((byte*)pfileType, fileData, dataSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadImageFromMemory")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image LoadImageFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] string fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Image ret = LoadImageFromMemoryNative(pStr0, fileData, dataSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadImageFromMemory")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image LoadImageFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileData = &fileData)
			{
				Image ret = LoadImageFromMemoryNative(fileType, (byte*)pfileData, dataSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadImageFromMemory")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image LoadImageFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = &fileType)
			{
				fixed (byte* pfileData = &fileData)
				{
					Image ret = LoadImageFromMemoryNative((byte*)pfileType, (byte*)pfileData, dataSize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadImageFromMemory")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image LoadImageFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = fileType)
			{
				fixed (byte* pfileData = &fileData)
				{
					Image ret = LoadImageFromMemoryNative((byte*)pfileType, (byte*)pfileData, dataSize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadImageFromMemory")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image LoadImageFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] string fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pfileData = &fileData)
			{
				Image ret = LoadImageFromMemoryNative(pStr0, (byte*)pfileData, dataSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadImageFromTexture")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image LoadImageFromTextureNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Texture, Image>)funcTable[282])(texture);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<Texture, Image>)funcTable[282])(texture);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadImageFromTexture")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image LoadImageFromTexture([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture)
		{
			Image ret = LoadImageFromTextureNative(texture);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadImageFromScreen")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image LoadImageFromScreenNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image>)funcTable[283])();
			#else
			return (Image)((delegate* unmanaged[Cdecl]<Image>)funcTable[283])();
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadImageFromScreen")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image LoadImageFromScreen()
		{
			Image ret = LoadImageFromScreenNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "IsImageValid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsImageValidNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, byte>)funcTable[284])(image);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Image, byte>)funcTable[284])(image);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsImageValid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsImageValid([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			byte ret = IsImageValidNative(image);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "UnloadImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UnloadImageNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image, void>)funcTable[285])(image);
			#else
			((delegate* unmanaged[Cdecl]<Image, void>)funcTable[285])(image);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadImage([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			UnloadImageNative(image);
		}

		[NativeName(NativeNameType.Func, "ExportImage")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ExportImageNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, byte*, byte>)funcTable[286])(image, fileName);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Image, nint, byte>)funcTable[286])(image, (nint)fileName);
			#endif
		}

		[NativeName(NativeNameType.Func, "ExportImage")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportImage([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] byte* fileName)
		{
			byte ret = ExportImageNative(image, fileName);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "ExportImage")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportImage([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				byte ret = ExportImageNative(image, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportImage")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportImage([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				byte ret = ExportImageNative(image, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportImage")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportImage([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ExportImageNative(image, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* ExportImageToMemoryNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] byte* fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] int* fileSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, byte*, int*, byte*>)funcTable[287])(image, fileType, fileSize);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<Image, nint, nint, nint>)funcTable[287])(image, (nint)fileType, (nint)fileSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static byte* ExportImageToMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] byte* fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] int* fileSize)
		{
			byte* ret = ExportImageToMemoryNative(image, fileType, fileSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static string ExportImageToMemoryS([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] byte* fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] int* fileSize)
		{
			string ret = Utils.DecodeStringUTF8(ExportImageToMemoryNative(image, fileType, fileSize));
			return ret;
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static byte* ExportImageToMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] int* fileSize)
		{
			fixed (byte* pfileType = &fileType)
			{
				byte* ret = ExportImageToMemoryNative(image, (byte*)pfileType, fileSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static string ExportImageToMemoryS([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] int* fileSize)
		{
			fixed (byte* pfileType = &fileType)
			{
				string ret = Utils.DecodeStringUTF8(ExportImageToMemoryNative(image, (byte*)pfileType, fileSize));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static byte* ExportImageToMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] int* fileSize)
		{
			fixed (byte* pfileType = fileType)
			{
				byte* ret = ExportImageToMemoryNative(image, (byte*)pfileType, fileSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static string ExportImageToMemoryS([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] int* fileSize)
		{
			fixed (byte* pfileType = fileType)
			{
				string ret = Utils.DecodeStringUTF8(ExportImageToMemoryNative(image, (byte*)pfileType, fileSize));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static byte* ExportImageToMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] string fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] int* fileSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ExportImageToMemoryNative(image, pStr0, fileSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static string ExportImageToMemoryS([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] string fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] int* fileSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ExportImageToMemoryNative(image, pStr0, fileSize));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static byte* ExportImageToMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] byte* fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] ref int fileSize)
		{
			fixed (int* pfileSize = &fileSize)
			{
				byte* ret = ExportImageToMemoryNative(image, fileType, (int*)pfileSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static string ExportImageToMemoryS([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] byte* fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] ref int fileSize)
		{
			fixed (int* pfileSize = &fileSize)
			{
				string ret = Utils.DecodeStringUTF8(ExportImageToMemoryNative(image, fileType, (int*)pfileSize));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static byte* ExportImageToMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] ref int fileSize)
		{
			fixed (byte* pfileType = &fileType)
			{
				fixed (int* pfileSize = &fileSize)
				{
					byte* ret = ExportImageToMemoryNative(image, (byte*)pfileType, (int*)pfileSize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static string ExportImageToMemoryS([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] ref int fileSize)
		{
			fixed (byte* pfileType = &fileType)
			{
				fixed (int* pfileSize = &fileSize)
				{
					string ret = Utils.DecodeStringUTF8(ExportImageToMemoryNative(image, (byte*)pfileType, (int*)pfileSize));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static byte* ExportImageToMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] ref int fileSize)
		{
			fixed (byte* pfileType = fileType)
			{
				fixed (int* pfileSize = &fileSize)
				{
					byte* ret = ExportImageToMemoryNative(image, (byte*)pfileType, (int*)pfileSize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static string ExportImageToMemoryS([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] ref int fileSize)
		{
			fixed (byte* pfileType = fileType)
			{
				fixed (int* pfileSize = &fileSize)
				{
					string ret = Utils.DecodeStringUTF8(ExportImageToMemoryNative(image, (byte*)pfileType, (int*)pfileSize));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static byte* ExportImageToMemory([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] string fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] ref int fileSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pfileSize = &fileSize)
			{
				byte* ret = ExportImageToMemoryNative(image, pStr0, (int*)pfileSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageToMemory")]
		[return: NativeName(NativeNameType.Type, "unsigned char *")]
		public static string ExportImageToMemoryS([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] string fileType, [NativeName(NativeNameType.Param, "fileSize")] [NativeName(NativeNameType.Type, "int *")] ref int fileSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pfileSize = &fileSize)
			{
				string ret = Utils.DecodeStringUTF8(ExportImageToMemoryNative(image, pStr0, (int*)pfileSize));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ExportImageAsCodeNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, byte*, byte>)funcTable[288])(image, fileName);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Image, nint, byte>)funcTable[288])(image, (nint)fileName);
			#endif
		}

		[NativeName(NativeNameType.Func, "ExportImageAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportImageAsCode([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] byte* fileName)
		{
			byte ret = ExportImageAsCodeNative(image, fileName);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "ExportImageAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportImageAsCode([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				byte ret = ExportImageAsCodeNative(image, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportImageAsCode([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				byte ret = ExportImageAsCodeNative(image, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportImageAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportImageAsCode([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ExportImageAsCodeNative(image, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Image generation functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GenImageColor")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image GenImageColorNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, Color, Image>)funcTable[289])(width, height, color);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, Color, Image>)funcTable[289])(width, height, color);
			#endif
		}

		/// <summary>
		/// Image generation functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GenImageColor")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageColor([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			Image ret = GenImageColorNative(width, height, color);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageGradientLinear")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image GenImageGradientLinearNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "direction")] [NativeName(NativeNameType.Type, "int")] int direction, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Color")] Color start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Color")] Color end)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int, Color, Color, Image>)funcTable[290])(width, height, direction, start, end);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, int, Color, Color, Image>)funcTable[290])(width, height, direction, start, end);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageGradientLinear")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageGradientLinear([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "direction")] [NativeName(NativeNameType.Type, "int")] int direction, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Color")] Color start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Color")] Color end)
		{
			Image ret = GenImageGradientLinearNative(width, height, direction, start, end);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageGradientRadial")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image GenImageGradientRadialNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "density")] [NativeName(NativeNameType.Type, "float")] float density, [NativeName(NativeNameType.Param, "inner")] [NativeName(NativeNameType.Type, "Color")] Color inner, [NativeName(NativeNameType.Param, "outer")] [NativeName(NativeNameType.Type, "Color")] Color outer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, float, Color, Color, Image>)funcTable[291])(width, height, density, inner, outer);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, float, Color, Color, Image>)funcTable[291])(width, height, density, inner, outer);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageGradientRadial")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageGradientRadial([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "density")] [NativeName(NativeNameType.Type, "float")] float density, [NativeName(NativeNameType.Param, "inner")] [NativeName(NativeNameType.Type, "Color")] Color inner, [NativeName(NativeNameType.Param, "outer")] [NativeName(NativeNameType.Type, "Color")] Color outer)
		{
			Image ret = GenImageGradientRadialNative(width, height, density, inner, outer);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageGradientSquare")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image GenImageGradientSquareNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "density")] [NativeName(NativeNameType.Type, "float")] float density, [NativeName(NativeNameType.Param, "inner")] [NativeName(NativeNameType.Type, "Color")] Color inner, [NativeName(NativeNameType.Param, "outer")] [NativeName(NativeNameType.Type, "Color")] Color outer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, float, Color, Color, Image>)funcTable[292])(width, height, density, inner, outer);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, float, Color, Color, Image>)funcTable[292])(width, height, density, inner, outer);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageGradientSquare")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageGradientSquare([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "density")] [NativeName(NativeNameType.Type, "float")] float density, [NativeName(NativeNameType.Param, "inner")] [NativeName(NativeNameType.Type, "Color")] Color inner, [NativeName(NativeNameType.Param, "outer")] [NativeName(NativeNameType.Type, "Color")] Color outer)
		{
			Image ret = GenImageGradientSquareNative(width, height, density, inner, outer);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageChecked")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image GenImageCheckedNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "checksX")] [NativeName(NativeNameType.Type, "int")] int checksX, [NativeName(NativeNameType.Param, "checksY")] [NativeName(NativeNameType.Type, "int")] int checksY, [NativeName(NativeNameType.Param, "col1")] [NativeName(NativeNameType.Type, "Color")] Color col1, [NativeName(NativeNameType.Param, "col2")] [NativeName(NativeNameType.Type, "Color")] Color col2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int, int, Color, Color, Image>)funcTable[293])(width, height, checksX, checksY, col1, col2);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, int, int, Color, Color, Image>)funcTable[293])(width, height, checksX, checksY, col1, col2);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageChecked")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageChecked([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "checksX")] [NativeName(NativeNameType.Type, "int")] int checksX, [NativeName(NativeNameType.Param, "checksY")] [NativeName(NativeNameType.Type, "int")] int checksY, [NativeName(NativeNameType.Param, "col1")] [NativeName(NativeNameType.Type, "Color")] Color col1, [NativeName(NativeNameType.Param, "col2")] [NativeName(NativeNameType.Type, "Color")] Color col2)
		{
			Image ret = GenImageCheckedNative(width, height, checksX, checksY, col1, col2);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageWhiteNoise")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image GenImageWhiteNoiseNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "factor")] [NativeName(NativeNameType.Type, "float")] float factor)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, float, Image>)funcTable[294])(width, height, factor);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, float, Image>)funcTable[294])(width, height, factor);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageWhiteNoise")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageWhiteNoise([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "factor")] [NativeName(NativeNameType.Type, "float")] float factor)
		{
			Image ret = GenImageWhiteNoiseNative(width, height, factor);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImagePerlinNoise")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image GenImagePerlinNoiseNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int, int, float, Image>)funcTable[295])(width, height, offsetX, offsetY, scale);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, int, int, float, Image>)funcTable[295])(width, height, offsetX, offsetY, scale);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImagePerlinNoise")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImagePerlinNoise([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale)
		{
			Image ret = GenImagePerlinNoiseNative(width, height, offsetX, offsetY, scale);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageCellular")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image GenImageCellularNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "tileSize")] [NativeName(NativeNameType.Type, "int")] int tileSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int, Image>)funcTable[296])(width, height, tileSize);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, int, Image>)funcTable[296])(width, height, tileSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageCellular")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageCellular([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "tileSize")] [NativeName(NativeNameType.Type, "int")] int tileSize)
		{
			Image ret = GenImageCellularNative(width, height, tileSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image GenImageTextNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, byte*, Image>)funcTable[297])(width, height, text);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<int, int, nint, Image>)funcTable[297])(width, height, (nint)text);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageText([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text)
		{
			Image ret = GenImageTextNative(width, height, text);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageText([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				Image ret = GenImageTextNative(width, height, (byte*)ptext);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GenImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageText([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> text)
		{
			fixed (byte* ptext = text)
			{
				Image ret = GenImageTextNative(width, height, (byte*)ptext);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GenImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageText([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Image ret = GenImageTextNative(width, height, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Image manipulation functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImageCopy")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image ImageCopyNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, Image>)funcTable[298])(image);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<Image, Image>)funcTable[298])(image);
			#endif
		}

		/// <summary>
		/// Image manipulation functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImageCopy")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageCopy([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			Image ret = ImageCopyNative(image);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ImageFromImage")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image ImageFromImageNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, Rectangle, Image>)funcTable[299])(image, rec);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<Image, Rectangle, Image>)funcTable[299])(image, rec);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageFromImage")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageFromImage([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec)
		{
			Image ret = ImageFromImageNative(image, rec);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ImageFromChannel")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image ImageFromChannelNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "selectedChannel")] [NativeName(NativeNameType.Type, "int")] int selectedChannel)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, int, Image>)funcTable[300])(image, selectedChannel);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<Image, int, Image>)funcTable[300])(image, selectedChannel);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageFromChannel")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageFromChannel([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "selectedChannel")] [NativeName(NativeNameType.Type, "int")] int selectedChannel)
		{
			Image ret = ImageFromChannelNative(image, selectedChannel);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image ImageTextNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, Color, Image>)funcTable[301])(text, fontSize, color);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<nint, int, Color, Image>)funcTable[301])((nint)text, fontSize, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			Image ret = ImageTextNative(text, fontSize, color);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ref byte text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (byte* ptext = &text)
			{
				Image ret = ImageTextNative((byte*)ptext, fontSize, color);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (byte* ptext = text)
			{
				Image ret = ImageTextNative((byte*)ptext, fontSize, color);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImageText")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] string text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Image ret = ImageTextNative(pStr0, fontSize, color);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "ImageTextEx")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image ImageTextExNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Font, byte*, float, float, Color, Image>)funcTable[302])(font, text, fontSize, spacing, tint);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<Font, nint, float, float, Color, Image>)funcTable[302])(font, (nint)text, fontSize, spacing, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageTextEx")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			Image ret = ImageTextExNative(font, text, fontSize, spacing, tint);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ImageTextEx")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ref byte text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = &text)
			{
				Image ret = ImageTextExNative(font, (byte*)ptext, fontSize, spacing, tint);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImageTextEx")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = text)
			{
				Image ret = ImageTextExNative(font, (byte*)ptext, fontSize, spacing, tint);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImageTextEx")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image ImageTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] string text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Image ret = ImageTextExNative(font, pStr0, fontSize, spacing, tint);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "ImageFormat")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageFormatNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "newFormat")] [NativeName(NativeNameType.Type, "int")] int newFormat)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, void>)funcTable[303])(image, newFormat);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)funcTable[303])((nint)image, newFormat);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageFormat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageFormat([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "newFormat")] [NativeName(NativeNameType.Type, "int")] int newFormat)
		{
			ImageFormatNative(image, newFormat);
		}

		[NativeName(NativeNameType.Func, "ImageFormat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageFormat([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "newFormat")] [NativeName(NativeNameType.Type, "int")] int newFormat)
		{
			fixed (Image* pimage = &image)
			{
				ImageFormatNative((Image*)pimage, newFormat);
			}
		}

		[NativeName(NativeNameType.Func, "ImageToPOT")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageToPOTNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "fill")] [NativeName(NativeNameType.Type, "Color")] Color fill)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Color, void>)funcTable[304])(image, fill);
			#else
			((delegate* unmanaged[Cdecl]<nint, Color, void>)funcTable[304])((nint)image, fill);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageToPOT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageToPOT([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "fill")] [NativeName(NativeNameType.Type, "Color")] Color fill)
		{
			ImageToPOTNative(image, fill);
		}

		[NativeName(NativeNameType.Func, "ImageToPOT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageToPOT([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "fill")] [NativeName(NativeNameType.Type, "Color")] Color fill)
		{
			fixed (Image* pimage = &image)
			{
				ImageToPOTNative((Image*)pimage, fill);
			}
		}

		[NativeName(NativeNameType.Func, "ImageCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageCropNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "crop")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle crop)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Rectangle, void>)funcTable[305])(image, crop);
			#else
			((delegate* unmanaged[Cdecl]<nint, Rectangle, void>)funcTable[305])((nint)image, crop);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageCrop([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "crop")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle crop)
		{
			ImageCropNative(image, crop);
		}

		[NativeName(NativeNameType.Func, "ImageCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageCrop([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "crop")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle crop)
		{
			fixed (Image* pimage = &image)
			{
				ImageCropNative((Image*)pimage, crop);
			}
		}

		[NativeName(NativeNameType.Func, "ImageAlphaCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageAlphaCropNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, float, void>)funcTable[306])(image, threshold);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)funcTable[306])((nint)image, threshold);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageAlphaCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaCrop([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			ImageAlphaCropNative(image, threshold);
		}

		[NativeName(NativeNameType.Func, "ImageAlphaCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaCrop([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			fixed (Image* pimage = &image)
			{
				ImageAlphaCropNative((Image*)pimage, threshold);
			}
		}

		[NativeName(NativeNameType.Func, "ImageAlphaClear")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageAlphaClearNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Color, float, void>)funcTable[307])(image, color, threshold);
			#else
			((delegate* unmanaged[Cdecl]<nint, Color, float, void>)funcTable[307])((nint)image, color, threshold);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageAlphaClear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaClear([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			ImageAlphaClearNative(image, color, threshold);
		}

		[NativeName(NativeNameType.Func, "ImageAlphaClear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaClear([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			fixed (Image* pimage = &image)
			{
				ImageAlphaClearNative((Image*)pimage, color, threshold);
			}
		}

		[NativeName(NativeNameType.Func, "ImageAlphaMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageAlphaMaskNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "alphaMask")] [NativeName(NativeNameType.Type, "Image")] Image alphaMask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Image, void>)funcTable[308])(image, alphaMask);
			#else
			((delegate* unmanaged[Cdecl]<nint, Image, void>)funcTable[308])((nint)image, alphaMask);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageAlphaMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaMask([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "alphaMask")] [NativeName(NativeNameType.Type, "Image")] Image alphaMask)
		{
			ImageAlphaMaskNative(image, alphaMask);
		}

		[NativeName(NativeNameType.Func, "ImageAlphaMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaMask([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "alphaMask")] [NativeName(NativeNameType.Type, "Image")] Image alphaMask)
		{
			fixed (Image* pimage = &image)
			{
				ImageAlphaMaskNative((Image*)pimage, alphaMask);
			}
		}

		[NativeName(NativeNameType.Func, "ImageAlphaPremultiply")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageAlphaPremultiplyNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)funcTable[309])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[309])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageAlphaPremultiply")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaPremultiply([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			ImageAlphaPremultiplyNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageAlphaPremultiply")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageAlphaPremultiply([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageAlphaPremultiplyNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageBlurGaussian")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageBlurGaussianNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "blurSize")] [NativeName(NativeNameType.Type, "int")] int blurSize)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, void>)funcTable[310])(image, blurSize);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)funcTable[310])((nint)image, blurSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageBlurGaussian")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageBlurGaussian([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "blurSize")] [NativeName(NativeNameType.Type, "int")] int blurSize)
		{
			ImageBlurGaussianNative(image, blurSize);
		}

		[NativeName(NativeNameType.Func, "ImageBlurGaussian")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageBlurGaussian([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "blurSize")] [NativeName(NativeNameType.Type, "int")] int blurSize)
		{
			fixed (Image* pimage = &image)
			{
				ImageBlurGaussianNative((Image*)pimage, blurSize);
			}
		}

		[NativeName(NativeNameType.Func, "ImageKernelConvolution")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageKernelConvolutionNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "kernel")] [NativeName(NativeNameType.Type, "float const *")] float* kernel, [NativeName(NativeNameType.Param, "kernelSize")] [NativeName(NativeNameType.Type, "int")] int kernelSize)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, float*, int, void>)funcTable[311])(image, kernel, kernelSize);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, void>)funcTable[311])((nint)image, (nint)kernel, kernelSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageKernelConvolution")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageKernelConvolution([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "kernel")] [NativeName(NativeNameType.Type, "float const *")] float* kernel, [NativeName(NativeNameType.Param, "kernelSize")] [NativeName(NativeNameType.Type, "int")] int kernelSize)
		{
			ImageKernelConvolutionNative(image, kernel, kernelSize);
		}

		[NativeName(NativeNameType.Func, "ImageKernelConvolution")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageKernelConvolution([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "kernel")] [NativeName(NativeNameType.Type, "float const *")] float* kernel, [NativeName(NativeNameType.Param, "kernelSize")] [NativeName(NativeNameType.Type, "int")] int kernelSize)
		{
			fixed (Image* pimage = &image)
			{
				ImageKernelConvolutionNative((Image*)pimage, kernel, kernelSize);
			}
		}

		[NativeName(NativeNameType.Func, "ImageKernelConvolution")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageKernelConvolution([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "kernel")] [NativeName(NativeNameType.Type, "float const *")] ref float kernel, [NativeName(NativeNameType.Param, "kernelSize")] [NativeName(NativeNameType.Type, "int")] int kernelSize)
		{
			fixed (float* pkernel = &kernel)
			{
				ImageKernelConvolutionNative(image, (float*)pkernel, kernelSize);
			}
		}

		[NativeName(NativeNameType.Func, "ImageKernelConvolution")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageKernelConvolution([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "kernel")] [NativeName(NativeNameType.Type, "float const *")] ref float kernel, [NativeName(NativeNameType.Param, "kernelSize")] [NativeName(NativeNameType.Type, "int")] int kernelSize)
		{
			fixed (Image* pimage = &image)
			{
				fixed (float* pkernel = &kernel)
				{
					ImageKernelConvolutionNative((Image*)pimage, (float*)pkernel, kernelSize);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageResize")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageResizeNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, void>)funcTable[312])(image, newWidth, newHeight);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)funcTable[312])((nint)image, newWidth, newHeight);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageResize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageResize([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight)
		{
			ImageResizeNative(image, newWidth, newHeight);
		}

		[NativeName(NativeNameType.Func, "ImageResize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageResize([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight)
		{
			fixed (Image* pimage = &image)
			{
				ImageResizeNative((Image*)pimage, newWidth, newHeight);
			}
		}

		[NativeName(NativeNameType.Func, "ImageResizeNN")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageResizeNNNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, void>)funcTable[313])(image, newWidth, newHeight);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)funcTable[313])((nint)image, newWidth, newHeight);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageResizeNN")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageResizeNN([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight)
		{
			ImageResizeNNNative(image, newWidth, newHeight);
		}

		[NativeName(NativeNameType.Func, "ImageResizeNN")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageResizeNN([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight)
		{
			fixed (Image* pimage = &image)
			{
				ImageResizeNNNative((Image*)pimage, newWidth, newHeight);
			}
		}

		[NativeName(NativeNameType.Func, "ImageResizeCanvas")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageResizeCanvasNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "fill")] [NativeName(NativeNameType.Type, "Color")] Color fill)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, int, int, Color, void>)funcTable[314])(image, newWidth, newHeight, offsetX, offsetY, fill);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, Color, void>)funcTable[314])((nint)image, newWidth, newHeight, offsetX, offsetY, fill);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageResizeCanvas")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageResizeCanvas([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "fill")] [NativeName(NativeNameType.Type, "Color")] Color fill)
		{
			ImageResizeCanvasNative(image, newWidth, newHeight, offsetX, offsetY, fill);
		}

		[NativeName(NativeNameType.Func, "ImageResizeCanvas")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageResizeCanvas([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "newWidth")] [NativeName(NativeNameType.Type, "int")] int newWidth, [NativeName(NativeNameType.Param, "newHeight")] [NativeName(NativeNameType.Type, "int")] int newHeight, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "fill")] [NativeName(NativeNameType.Type, "Color")] Color fill)
		{
			fixed (Image* pimage = &image)
			{
				ImageResizeCanvasNative((Image*)pimage, newWidth, newHeight, offsetX, offsetY, fill);
			}
		}

		[NativeName(NativeNameType.Func, "ImageMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageMipmapsNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)funcTable[315])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[315])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageMipmaps([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			ImageMipmapsNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageMipmaps([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageMipmapsNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDither")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDitherNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "rBpp")] [NativeName(NativeNameType.Type, "int")] int rBpp, [NativeName(NativeNameType.Param, "gBpp")] [NativeName(NativeNameType.Type, "int")] int gBpp, [NativeName(NativeNameType.Param, "bBpp")] [NativeName(NativeNameType.Type, "int")] int bBpp, [NativeName(NativeNameType.Param, "aBpp")] [NativeName(NativeNameType.Type, "int")] int aBpp)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, int, int, void>)funcTable[316])(image, rBpp, gBpp, bBpp, aBpp);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, void>)funcTable[316])((nint)image, rBpp, gBpp, bBpp, aBpp);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDither")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDither([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "rBpp")] [NativeName(NativeNameType.Type, "int")] int rBpp, [NativeName(NativeNameType.Param, "gBpp")] [NativeName(NativeNameType.Type, "int")] int gBpp, [NativeName(NativeNameType.Param, "bBpp")] [NativeName(NativeNameType.Type, "int")] int bBpp, [NativeName(NativeNameType.Param, "aBpp")] [NativeName(NativeNameType.Type, "int")] int aBpp)
		{
			ImageDitherNative(image, rBpp, gBpp, bBpp, aBpp);
		}

		[NativeName(NativeNameType.Func, "ImageDither")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDither([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "rBpp")] [NativeName(NativeNameType.Type, "int")] int rBpp, [NativeName(NativeNameType.Param, "gBpp")] [NativeName(NativeNameType.Type, "int")] int gBpp, [NativeName(NativeNameType.Param, "bBpp")] [NativeName(NativeNameType.Type, "int")] int bBpp, [NativeName(NativeNameType.Param, "aBpp")] [NativeName(NativeNameType.Type, "int")] int aBpp)
		{
			fixed (Image* pimage = &image)
			{
				ImageDitherNative((Image*)pimage, rBpp, gBpp, bBpp, aBpp);
			}
		}

		[NativeName(NativeNameType.Func, "ImageFlipVertical")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageFlipVerticalNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)funcTable[317])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[317])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageFlipVertical")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageFlipVertical([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			ImageFlipVerticalNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageFlipVertical")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageFlipVertical([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageFlipVerticalNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageFlipHorizontal")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageFlipHorizontalNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)funcTable[318])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[318])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageFlipHorizontal")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageFlipHorizontal([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			ImageFlipHorizontalNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageFlipHorizontal")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageFlipHorizontal([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageFlipHorizontalNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageRotate")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageRotateNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "degrees")] [NativeName(NativeNameType.Type, "int")] int degrees)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, void>)funcTable[319])(image, degrees);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)funcTable[319])((nint)image, degrees);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageRotate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageRotate([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "degrees")] [NativeName(NativeNameType.Type, "int")] int degrees)
		{
			ImageRotateNative(image, degrees);
		}

		[NativeName(NativeNameType.Func, "ImageRotate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageRotate([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "degrees")] [NativeName(NativeNameType.Type, "int")] int degrees)
		{
			fixed (Image* pimage = &image)
			{
				ImageRotateNative((Image*)pimage, degrees);
			}
		}

		[NativeName(NativeNameType.Func, "ImageRotateCW")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageRotateCWNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)funcTable[320])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[320])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageRotateCW")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageRotateCW([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			ImageRotateCWNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageRotateCW")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageRotateCW([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageRotateCWNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageRotateCCW")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageRotateCCWNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)funcTable[321])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[321])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageRotateCCW")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageRotateCCW([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			ImageRotateCCWNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageRotateCCW")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageRotateCCW([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageRotateCCWNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageColorTint")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageColorTintNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Color, void>)funcTable[322])(image, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Color, void>)funcTable[322])((nint)image, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageColorTint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorTint([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageColorTintNative(image, color);
		}

		[NativeName(NativeNameType.Func, "ImageColorTint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorTint([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pimage = &image)
			{
				ImageColorTintNative((Image*)pimage, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageColorInvert")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageColorInvertNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)funcTable[323])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[323])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageColorInvert")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorInvert([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			ImageColorInvertNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageColorInvert")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorInvert([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageColorInvertNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageColorGrayscale")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageColorGrayscaleNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, void>)funcTable[324])(image);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[324])((nint)image);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageColorGrayscale")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorGrayscale([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image)
		{
			ImageColorGrayscaleNative(image);
		}

		[NativeName(NativeNameType.Func, "ImageColorGrayscale")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorGrayscale([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image)
		{
			fixed (Image* pimage = &image)
			{
				ImageColorGrayscaleNative((Image*)pimage);
			}
		}

		[NativeName(NativeNameType.Func, "ImageColorContrast")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageColorContrastNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "contrast")] [NativeName(NativeNameType.Type, "float")] float contrast)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, float, void>)funcTable[325])(image, contrast);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)funcTable[325])((nint)image, contrast);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageColorContrast")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorContrast([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "contrast")] [NativeName(NativeNameType.Type, "float")] float contrast)
		{
			ImageColorContrastNative(image, contrast);
		}

		[NativeName(NativeNameType.Func, "ImageColorContrast")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorContrast([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "contrast")] [NativeName(NativeNameType.Type, "float")] float contrast)
		{
			fixed (Image* pimage = &image)
			{
				ImageColorContrastNative((Image*)pimage, contrast);
			}
		}

		[NativeName(NativeNameType.Func, "ImageColorBrightness")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageColorBrightnessNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "brightness")] [NativeName(NativeNameType.Type, "int")] int brightness)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, void>)funcTable[326])(image, brightness);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)funcTable[326])((nint)image, brightness);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageColorBrightness")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorBrightness([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "brightness")] [NativeName(NativeNameType.Type, "int")] int brightness)
		{
			ImageColorBrightnessNative(image, brightness);
		}

		[NativeName(NativeNameType.Func, "ImageColorBrightness")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorBrightness([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "brightness")] [NativeName(NativeNameType.Type, "int")] int brightness)
		{
			fixed (Image* pimage = &image)
			{
				ImageColorBrightnessNative((Image*)pimage, brightness);
			}
		}

		[NativeName(NativeNameType.Func, "ImageColorReplace")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageColorReplaceNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "replace")] [NativeName(NativeNameType.Type, "Color")] Color replace)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Color, Color, void>)funcTable[327])(image, color, replace);
			#else
			((delegate* unmanaged[Cdecl]<nint, Color, Color, void>)funcTable[327])((nint)image, color, replace);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageColorReplace")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorReplace([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] Image* image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "replace")] [NativeName(NativeNameType.Type, "Color")] Color replace)
		{
			ImageColorReplaceNative(image, color, replace);
		}

		[NativeName(NativeNameType.Func, "ImageColorReplace")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageColorReplace([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image *")] ref Image image, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "replace")] [NativeName(NativeNameType.Type, "Color")] Color replace)
		{
			fixed (Image* pimage = &image)
			{
				ImageColorReplaceNative((Image*)pimage, color, replace);
			}
		}

		[NativeName(NativeNameType.Func, "LoadImageColors")]
		[return: NativeName(NativeNameType.Type, "Color *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Color* LoadImageColorsNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, Color*>)funcTable[328])(image);
			#else
			return (Color*)((delegate* unmanaged[Cdecl]<Image, nint>)funcTable[328])(image);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadImageColors")]
		[return: NativeName(NativeNameType.Type, "Color *")]
		public static Color* LoadImageColors([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			Color* ret = LoadImageColorsNative(image);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadImagePalette")]
		[return: NativeName(NativeNameType.Type, "Color *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Color* LoadImagePaletteNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "maxPaletteSize")] [NativeName(NativeNameType.Type, "int")] int maxPaletteSize, [NativeName(NativeNameType.Param, "colorCount")] [NativeName(NativeNameType.Type, "int *")] int* colorCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, int, int*, Color*>)funcTable[329])(image, maxPaletteSize, colorCount);
			#else
			return (Color*)((delegate* unmanaged[Cdecl]<Image, int, nint, nint>)funcTable[329])(image, maxPaletteSize, (nint)colorCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadImagePalette")]
		[return: NativeName(NativeNameType.Type, "Color *")]
		public static Color* LoadImagePalette([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "maxPaletteSize")] [NativeName(NativeNameType.Type, "int")] int maxPaletteSize, [NativeName(NativeNameType.Param, "colorCount")] [NativeName(NativeNameType.Type, "int *")] int* colorCount)
		{
			Color* ret = LoadImagePaletteNative(image, maxPaletteSize, colorCount);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadImagePalette")]
		[return: NativeName(NativeNameType.Type, "Color *")]
		public static Color* LoadImagePalette([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "maxPaletteSize")] [NativeName(NativeNameType.Type, "int")] int maxPaletteSize, [NativeName(NativeNameType.Param, "colorCount")] [NativeName(NativeNameType.Type, "int *")] ref int colorCount)
		{
			fixed (int* pcolorCount = &colorCount)
			{
				Color* ret = LoadImagePaletteNative(image, maxPaletteSize, (int*)pcolorCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "UnloadImageColors")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UnloadImageColorsNative([NativeName(NativeNameType.Param, "colors")] [NativeName(NativeNameType.Type, "Color *")] Color* colors)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Color*, void>)funcTable[330])(colors);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[330])((nint)colors);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadImageColors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadImageColors([NativeName(NativeNameType.Param, "colors")] [NativeName(NativeNameType.Type, "Color *")] Color* colors)
		{
			UnloadImageColorsNative(colors);
		}

		[NativeName(NativeNameType.Func, "UnloadImageColors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadImageColors([NativeName(NativeNameType.Param, "colors")] [NativeName(NativeNameType.Type, "Color *")] ref Color colors)
		{
			fixed (Color* pcolors = &colors)
			{
				UnloadImageColorsNative((Color*)pcolors);
			}
		}

		[NativeName(NativeNameType.Func, "UnloadImagePalette")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UnloadImagePaletteNative([NativeName(NativeNameType.Param, "colors")] [NativeName(NativeNameType.Type, "Color *")] Color* colors)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Color*, void>)funcTable[331])(colors);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[331])((nint)colors);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadImagePalette")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadImagePalette([NativeName(NativeNameType.Param, "colors")] [NativeName(NativeNameType.Type, "Color *")] Color* colors)
		{
			UnloadImagePaletteNative(colors);
		}

		[NativeName(NativeNameType.Func, "UnloadImagePalette")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadImagePalette([NativeName(NativeNameType.Param, "colors")] [NativeName(NativeNameType.Type, "Color *")] ref Color colors)
		{
			fixed (Color* pcolors = &colors)
			{
				UnloadImagePaletteNative((Color*)pcolors);
			}
		}

		[NativeName(NativeNameType.Func, "GetImageAlphaBorder")]
		[return: NativeName(NativeNameType.Type, "Rectangle")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Rectangle GetImageAlphaBorderNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, float, Rectangle>)funcTable[332])(image, threshold);
			#else
			return (Rectangle)((delegate* unmanaged[Cdecl]<Image, float, Rectangle>)funcTable[332])(image, threshold);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetImageAlphaBorder")]
		[return: NativeName(NativeNameType.Type, "Rectangle")]
		public static Rectangle GetImageAlphaBorder([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			Rectangle ret = GetImageAlphaBorderNative(image, threshold);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetImageColor")]
		[return: NativeName(NativeNameType.Type, "Color")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Color GetImageColorNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, int, int, Color>)funcTable[333])(image, x, y);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Image, int, int, Color>)funcTable[333])(image, x, y);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetImageColor")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color GetImageColor([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			Color ret = GetImageColorNative(image, x, y);
			return ret;
		}

		/// <summary>
		/// Image drawing functions<br/>
		/// NOTE: Image software-rendering functions (CPU)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImageClearBackground")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageClearBackgroundNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Color, void>)funcTable[334])(dst, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Color, void>)funcTable[334])((nint)dst, color);
			#endif
		}

		/// <summary>
		/// Image drawing functions<br/>
		/// NOTE: Image software-rendering functions (CPU)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImageClearBackground")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageClearBackground([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageClearBackgroundNative(dst, color);
		}

		/// <summary>
		/// Image drawing functions<br/>
		/// NOTE: Image software-rendering functions (CPU)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImageClearBackground")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageClearBackground([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageClearBackgroundNative((Image*)pdst, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawPixel")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawPixelNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, Color, void>)funcTable[335])(dst, posX, posY, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, Color, void>)funcTable[335])((nint)dst, posX, posY, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawPixel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawPixel([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawPixelNative(dst, posX, posY, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawPixel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawPixel([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawPixelNative((Image*)pdst, posX, posY, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawPixelV")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawPixelVNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, Color, void>)funcTable[336])(dst, position, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Color, void>)funcTable[336])((nint)dst, position, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawPixelV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawPixelV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawPixelVNative(dst, position, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawPixelV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawPixelV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawPixelVNative((Image*)pdst, position, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawLineNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "startPosX")] [NativeName(NativeNameType.Type, "int")] int startPosX, [NativeName(NativeNameType.Param, "startPosY")] [NativeName(NativeNameType.Type, "int")] int startPosY, [NativeName(NativeNameType.Param, "endPosX")] [NativeName(NativeNameType.Type, "int")] int endPosX, [NativeName(NativeNameType.Param, "endPosY")] [NativeName(NativeNameType.Type, "int")] int endPosY, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, int, int, Color, void>)funcTable[337])(dst, startPosX, startPosY, endPosX, endPosY, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, Color, void>)funcTable[337])((nint)dst, startPosX, startPosY, endPosX, endPosY, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawLine([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "startPosX")] [NativeName(NativeNameType.Type, "int")] int startPosX, [NativeName(NativeNameType.Param, "startPosY")] [NativeName(NativeNameType.Type, "int")] int startPosY, [NativeName(NativeNameType.Param, "endPosX")] [NativeName(NativeNameType.Type, "int")] int endPosX, [NativeName(NativeNameType.Param, "endPosY")] [NativeName(NativeNameType.Type, "int")] int endPosY, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawLineNative(dst, startPosX, startPosY, endPosX, endPosY, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawLine([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "startPosX")] [NativeName(NativeNameType.Type, "int")] int startPosX, [NativeName(NativeNameType.Param, "startPosY")] [NativeName(NativeNameType.Type, "int")] int startPosY, [NativeName(NativeNameType.Param, "endPosX")] [NativeName(NativeNameType.Type, "int")] int endPosX, [NativeName(NativeNameType.Param, "endPosY")] [NativeName(NativeNameType.Type, "int")] int endPosY, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawLineNative((Image*)pdst, startPosX, startPosY, endPosX, endPosY, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawLineV")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawLineVNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 end, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, Vector2, Color, void>)funcTable[338])(dst, start, end, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Color, void>)funcTable[338])((nint)dst, start, end, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawLineV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawLineV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 end, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawLineVNative(dst, start, end, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawLineV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawLineV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 end, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawLineVNative((Image*)pdst, start, end, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawLineEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawLineExNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 end, [NativeName(NativeNameType.Param, "thick")] [NativeName(NativeNameType.Type, "int")] int thick, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, Vector2, int, Color, void>)funcTable[339])(dst, start, end, thick, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, int, Color, void>)funcTable[339])((nint)dst, start, end, thick, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawLineEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawLineEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 end, [NativeName(NativeNameType.Param, "thick")] [NativeName(NativeNameType.Type, "int")] int thick, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawLineExNative(dst, start, end, thick, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawLineEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawLineEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 start, [NativeName(NativeNameType.Param, "end")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 end, [NativeName(NativeNameType.Param, "thick")] [NativeName(NativeNameType.Type, "int")] int thick, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawLineExNative((Image*)pdst, start, end, thick, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawCircleNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "centerX")] [NativeName(NativeNameType.Type, "int")] int centerX, [NativeName(NativeNameType.Param, "centerY")] [NativeName(NativeNameType.Type, "int")] int centerY, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, int, Color, void>)funcTable[340])(dst, centerX, centerY, radius, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, Color, void>)funcTable[340])((nint)dst, centerX, centerY, radius, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircle([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "centerX")] [NativeName(NativeNameType.Type, "int")] int centerX, [NativeName(NativeNameType.Param, "centerY")] [NativeName(NativeNameType.Type, "int")] int centerY, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawCircleNative(dst, centerX, centerY, radius, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircle([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "centerX")] [NativeName(NativeNameType.Type, "int")] int centerX, [NativeName(NativeNameType.Param, "centerY")] [NativeName(NativeNameType.Type, "int")] int centerY, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawCircleNative((Image*)pdst, centerX, centerY, radius, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleV")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawCircleVNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, int, Color, void>)funcTable[341])(dst, center, radius, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, int, Color, void>)funcTable[341])((nint)dst, center, radius, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircleV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawCircleVNative(dst, center, radius, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircleV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawCircleVNative((Image*)pdst, center, radius, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawCircleLinesNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "centerX")] [NativeName(NativeNameType.Type, "int")] int centerX, [NativeName(NativeNameType.Param, "centerY")] [NativeName(NativeNameType.Type, "int")] int centerY, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, int, Color, void>)funcTable[342])(dst, centerX, centerY, radius, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, Color, void>)funcTable[342])((nint)dst, centerX, centerY, radius, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircleLines([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "centerX")] [NativeName(NativeNameType.Type, "int")] int centerX, [NativeName(NativeNameType.Param, "centerY")] [NativeName(NativeNameType.Type, "int")] int centerY, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawCircleLinesNative(dst, centerX, centerY, radius, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircleLines([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "centerX")] [NativeName(NativeNameType.Type, "int")] int centerX, [NativeName(NativeNameType.Param, "centerY")] [NativeName(NativeNameType.Type, "int")] int centerY, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawCircleLinesNative((Image*)pdst, centerX, centerY, radius, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleLinesV")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawCircleLinesVNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, int, Color, void>)funcTable[343])(dst, center, radius, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, int, Color, void>)funcTable[343])((nint)dst, center, radius, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleLinesV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircleLinesV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawCircleLinesVNative(dst, center, radius, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawCircleLinesV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawCircleLinesV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "int")] int radius, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawCircleLinesVNative((Image*)pdst, center, radius, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawRectangleNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, int, int, int, int, Color, void>)funcTable[344])(dst, posX, posY, width, height, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, Color, void>)funcTable[344])((nint)dst, posX, posY, width, height, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangle([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawRectangleNative(dst, posX, posY, width, height, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangle([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawRectangleNative((Image*)pdst, posX, posY, width, height, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleV")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawRectangleVNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 size, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, Vector2, Color, void>)funcTable[345])(dst, position, size, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Color, void>)funcTable[345])((nint)dst, position, size, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangleV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 size, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawRectangleVNative(dst, position, size, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangleV([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 size, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawRectangleVNative((Image*)pdst, position, size, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleRec")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawRectangleRecNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Rectangle, Color, void>)funcTable[346])(dst, rec, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Rectangle, Color, void>)funcTable[346])((nint)dst, rec, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleRec")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangleRec([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawRectangleRecNative(dst, rec, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleRec")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangleRec([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawRectangleRecNative((Image*)pdst, rec, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawRectangleLinesNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "thick")] [NativeName(NativeNameType.Type, "int")] int thick, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Rectangle, int, Color, void>)funcTable[347])(dst, rec, thick, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Rectangle, int, Color, void>)funcTable[347])((nint)dst, rec, thick, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangleLines([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "thick")] [NativeName(NativeNameType.Type, "int")] int thick, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawRectangleLinesNative(dst, rec, thick, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawRectangleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawRectangleLines([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "thick")] [NativeName(NativeNameType.Type, "int")] int thick, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawRectangleLinesNative((Image*)pdst, rec, thick, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawTriangleNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, Vector2, Vector2, Color, void>)funcTable[348])(dst, v1, v2, v3, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Color, void>)funcTable[348])((nint)dst, v1, v2, v3, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangle([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawTriangleNative(dst, v1, v2, v3, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangle([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawTriangleNative((Image*)pdst, v1, v2, v3, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawTriangleExNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "c1")] [NativeName(NativeNameType.Type, "Color")] Color c1, [NativeName(NativeNameType.Param, "c2")] [NativeName(NativeNameType.Type, "Color")] Color c2, [NativeName(NativeNameType.Param, "c3")] [NativeName(NativeNameType.Type, "Color")] Color c3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, Vector2, Vector2, Color, Color, Color, void>)funcTable[349])(dst, v1, v2, v3, c1, c2, c3);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Color, Color, Color, void>)funcTable[349])((nint)dst, v1, v2, v3, c1, c2, c3);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "c1")] [NativeName(NativeNameType.Type, "Color")] Color c1, [NativeName(NativeNameType.Param, "c2")] [NativeName(NativeNameType.Type, "Color")] Color c2, [NativeName(NativeNameType.Param, "c3")] [NativeName(NativeNameType.Type, "Color")] Color c3)
		{
			ImageDrawTriangleExNative(dst, v1, v2, v3, c1, c2, c3);
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "c1")] [NativeName(NativeNameType.Type, "Color")] Color c1, [NativeName(NativeNameType.Param, "c2")] [NativeName(NativeNameType.Type, "Color")] Color c2, [NativeName(NativeNameType.Param, "c3")] [NativeName(NativeNameType.Type, "Color")] Color c3)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawTriangleExNative((Image*)pdst, v1, v2, v3, c1, c2, c3);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawTriangleLinesNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2, Vector2, Vector2, Color, void>)funcTable[350])(dst, v1, v2, v3, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Color, void>)funcTable[350])((nint)dst, v1, v2, v3, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleLines([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawTriangleLinesNative(dst, v1, v2, v3, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleLines([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v2, [NativeName(NativeNameType.Param, "v3")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 v3, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawTriangleLinesNative((Image*)pdst, v1, v2, v3, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleFan")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawTriangleFanNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2 const *")] Vector2* points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2*, int, Color, void>)funcTable[351])(dst, points, pointCount, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, Color, void>)funcTable[351])((nint)dst, (nint)points, pointCount, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleFan")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleFan([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2 const *")] Vector2* points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawTriangleFanNative(dst, points, pointCount, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleFan")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleFan([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2 const *")] Vector2* points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawTriangleFanNative((Image*)pdst, points, pointCount, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleFan")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleFan([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2 const *")] ref Vector2 points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Vector2* ppoints = &points)
			{
				ImageDrawTriangleFanNative(dst, (Vector2*)ppoints, pointCount, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleFan")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleFan([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2 const *")] ref Vector2 points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				fixed (Vector2* ppoints = &points)
				{
					ImageDrawTriangleFanNative((Image*)pdst, (Vector2*)ppoints, pointCount, color);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleStrip")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawTriangleStripNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2 const *")] Vector2* points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Vector2*, int, Color, void>)funcTable[352])(dst, points, pointCount, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, Color, void>)funcTable[352])((nint)dst, (nint)points, pointCount, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleStrip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleStrip([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2 const *")] Vector2* points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawTriangleStripNative(dst, points, pointCount, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleStrip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleStrip([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2 const *")] Vector2* points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawTriangleStripNative((Image*)pdst, points, pointCount, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleStrip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleStrip([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2 const *")] ref Vector2 points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Vector2* ppoints = &points)
			{
				ImageDrawTriangleStripNative(dst, (Vector2*)ppoints, pointCount, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTriangleStrip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTriangleStrip([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "Vector2 const *")] ref Vector2 points, [NativeName(NativeNameType.Param, "pointCount")] [NativeName(NativeNameType.Type, "int")] int pointCount, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				fixed (Vector2* ppoints = &points)
				{
					ImageDrawTriangleStripNative((Image*)pdst, (Vector2*)ppoints, pointCount, color);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageDraw")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "Image")] Image src, [NativeName(NativeNameType.Param, "srcRec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle srcRec, [NativeName(NativeNameType.Param, "dstRec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle dstRec, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Image, Rectangle, Rectangle, Color, void>)funcTable[353])(dst, src, srcRec, dstRec, tint);
			#else
			((delegate* unmanaged[Cdecl]<nint, Image, Rectangle, Rectangle, Color, void>)funcTable[353])((nint)dst, src, srcRec, dstRec, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDraw")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDraw([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "Image")] Image src, [NativeName(NativeNameType.Param, "srcRec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle srcRec, [NativeName(NativeNameType.Param, "dstRec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle dstRec, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			ImageDrawNative(dst, src, srcRec, dstRec, tint);
		}

		[NativeName(NativeNameType.Func, "ImageDraw")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDraw([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "Image")] Image src, [NativeName(NativeNameType.Param, "srcRec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle srcRec, [NativeName(NativeNameType.Param, "dstRec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle dstRec, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawNative((Image*)pdst, src, srcRec, dstRec, tint);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawTextNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, byte*, int, int, int, Color, void>)funcTable[354])(dst, text, posX, posY, fontSize, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, Color, void>)funcTable[354])((nint)dst, (nint)text, posX, posY, fontSize, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			ImageDrawTextNative(dst, text, posX, posY, fontSize, color);
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawTextNative((Image*)pdst, text, posX, posY, fontSize, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ref byte text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (byte* ptext = &text)
			{
				ImageDrawTextNative(dst, (byte*)ptext, posX, posY, fontSize, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (byte* ptext = text)
			{
				ImageDrawTextNative(dst, (byte*)ptext, posX, posY, fontSize, color);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] string text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImageDrawTextNative(dst, pStr0, posX, posY, fontSize, color);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ref byte text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				fixed (byte* ptext = &text)
				{
					ImageDrawTextNative((Image*)pdst, (byte*)ptext, posX, posY, fontSize, color);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				fixed (byte* ptext = text)
				{
					ImageDrawTextNative((Image*)pdst, (byte*)ptext, posX, posY, fontSize, color);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawText([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] string text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (Image* pdst = &dst)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImageDrawTextNative((Image*)pdst, pStr0, posX, posY, fontSize, color);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageDrawTextExNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Image*, Font, byte*, Vector2, float, float, Color, void>)funcTable[355])(dst, font, text, position, fontSize, spacing, tint);
			#else
			((delegate* unmanaged[Cdecl]<nint, Font, nint, Vector2, float, float, Color, void>)funcTable[355])((nint)dst, font, (nint)text, position, fontSize, spacing, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			ImageDrawTextExNative(dst, font, text, position, fontSize, spacing, tint);
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (Image* pdst = &dst)
			{
				ImageDrawTextExNative((Image*)pdst, font, text, position, fontSize, spacing, tint);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ref byte text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = &text)
			{
				ImageDrawTextExNative(dst, font, (byte*)ptext, position, fontSize, spacing, tint);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = text)
			{
				ImageDrawTextExNative(dst, font, (byte*)ptext, position, fontSize, spacing, tint);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] Image* dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] string text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImageDrawTextExNative(dst, font, pStr0, position, fontSize, spacing, tint);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ref byte text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (Image* pdst = &dst)
			{
				fixed (byte* ptext = &text)
				{
					ImageDrawTextExNative((Image*)pdst, font, (byte*)ptext, position, fontSize, spacing, tint);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (Image* pdst = &dst)
			{
				fixed (byte* ptext = text)
				{
					ImageDrawTextExNative((Image*)pdst, font, (byte*)ptext, position, fontSize, spacing, tint);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImageDrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageDrawTextEx([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Image *")] ref Image dst, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] string text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (Image* pdst = &dst)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImageDrawTextExNative((Image*)pdst, font, pStr0, position, fontSize, spacing, tint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// Texture loading functions<br/>
		/// NOTE: These functions require GPU access<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadTexture")]
		[return: NativeName(NativeNameType.Type, "Texture2D")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Texture LoadTextureNative([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Texture>)funcTable[356])(fileName);
			#else
			return (Texture)((delegate* unmanaged[Cdecl]<nint, Texture>)funcTable[356])((nint)fileName);
			#endif
		}

		/// <summary>
		/// Texture loading functions<br/>
		/// NOTE: These functions require GPU access<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadTexture")]
		[return: NativeName(NativeNameType.Type, "Texture2D")]
		public static Texture LoadTexture([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] byte* fileName)
		{
			Texture ret = LoadTextureNative(fileName);
			return ret;
		}

		/// <summary>
		/// Texture loading functions<br/>
		/// NOTE: These functions require GPU access<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadTexture")]
		[return: NativeName(NativeNameType.Type, "Texture2D")]
		public static Texture LoadTexture([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				Texture ret = LoadTextureNative((byte*)pfileName);
				return ret;
			}
		}

		/// <summary>
		/// Texture loading functions<br/>
		/// NOTE: These functions require GPU access<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadTexture")]
		[return: NativeName(NativeNameType.Type, "Texture2D")]
		public static Texture LoadTexture([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				Texture ret = LoadTextureNative((byte*)pfileName);
				return ret;
			}
		}

		/// <summary>
		/// Texture loading functions<br/>
		/// NOTE: These functions require GPU access<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadTexture")]
		[return: NativeName(NativeNameType.Type, "Texture2D")]
		public static Texture LoadTexture([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Texture ret = LoadTextureNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadTextureFromImage")]
		[return: NativeName(NativeNameType.Type, "Texture2D")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Texture LoadTextureFromImageNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, Texture>)funcTable[357])(image);
			#else
			return (Texture)((delegate* unmanaged[Cdecl]<Image, Texture>)funcTable[357])(image);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadTextureFromImage")]
		[return: NativeName(NativeNameType.Type, "Texture2D")]
		public static Texture LoadTextureFromImage([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image)
		{
			Texture ret = LoadTextureFromImageNative(image);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "TextureCubemap")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Texture LoadTextureCubemapNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "layout")] [NativeName(NativeNameType.Type, "int")] int layout)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, int, Texture>)funcTable[358])(image, layout);
			#else
			return (Texture)((delegate* unmanaged[Cdecl]<Image, int, Texture>)funcTable[358])(image, layout);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "TextureCubemap")]
		public static Texture LoadTextureCubemap([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "layout")] [NativeName(NativeNameType.Type, "int")] int layout)
		{
			Texture ret = LoadTextureCubemapNative(image, layout);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadRenderTexture")]
		[return: NativeName(NativeNameType.Type, "RenderTexture2D")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static RenderTexture LoadRenderTextureNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, RenderTexture>)funcTable[359])(width, height);
			#else
			return (RenderTexture)((delegate* unmanaged[Cdecl]<int, int, RenderTexture>)funcTable[359])(width, height);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadRenderTexture")]
		[return: NativeName(NativeNameType.Type, "RenderTexture2D")]
		public static RenderTexture LoadRenderTexture([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			RenderTexture ret = LoadRenderTextureNative(width, height);
			return ret;
		}

		[NativeName(NativeNameType.Func, "IsTextureValid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsTextureValidNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Texture, byte>)funcTable[360])(texture);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Texture, byte>)funcTable[360])(texture);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsTextureValid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsTextureValid([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture)
		{
			byte ret = IsTextureValidNative(texture);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "UnloadTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UnloadTextureNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, void>)funcTable[361])(texture);
			#else
			((delegate* unmanaged[Cdecl]<Texture, void>)funcTable[361])(texture);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadTexture([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture)
		{
			UnloadTextureNative(texture);
		}

		[NativeName(NativeNameType.Func, "IsRenderTextureValid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsRenderTextureValidNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "RenderTexture2D")] RenderTexture target)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<RenderTexture, byte>)funcTable[362])(target);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<RenderTexture, byte>)funcTable[362])(target);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsRenderTextureValid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsRenderTextureValid([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "RenderTexture2D")] RenderTexture target)
		{
			byte ret = IsRenderTextureValidNative(target);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "UnloadRenderTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UnloadRenderTextureNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "RenderTexture2D")] RenderTexture target)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<RenderTexture, void>)funcTable[363])(target);
			#else
			((delegate* unmanaged[Cdecl]<RenderTexture, void>)funcTable[363])(target);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadRenderTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadRenderTexture([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "RenderTexture2D")] RenderTexture target)
		{
			UnloadRenderTextureNative(target);
		}

		[NativeName(NativeNameType.Func, "UpdateTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UpdateTextureNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "void const *")] void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, void*, void>)funcTable[364])(texture, pixels);
			#else
			((delegate* unmanaged[Cdecl]<Texture, nint, void>)funcTable[364])(texture, (nint)pixels);
			#endif
		}

		[NativeName(NativeNameType.Func, "UpdateTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateTexture([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "void const *")] void* pixels)
		{
			UpdateTextureNative(texture, pixels);
		}

		[NativeName(NativeNameType.Func, "UpdateTextureRec")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UpdateTextureRecNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "void const *")] void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, Rectangle, void*, void>)funcTable[365])(texture, rec, pixels);
			#else
			((delegate* unmanaged[Cdecl]<Texture, Rectangle, nint, void>)funcTable[365])(texture, rec, (nint)pixels);
			#endif
		}

		[NativeName(NativeNameType.Func, "UpdateTextureRec")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateTextureRec([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "rec")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle rec, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "void const *")] void* pixels)
		{
			UpdateTextureRecNative(texture, rec, pixels);
		}

		/// <summary>
		/// Texture configuration functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GenTextureMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GenTextureMipmapsNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D *")] Texture* texture)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture*, void>)funcTable[366])(texture);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[366])((nint)texture);
			#endif
		}

		/// <summary>
		/// Texture configuration functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GenTextureMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GenTextureMipmaps([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D *")] Texture* texture)
		{
			GenTextureMipmapsNative(texture);
		}

		/// <summary>
		/// Texture configuration functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GenTextureMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GenTextureMipmaps([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D *")] ref Texture texture)
		{
			fixed (Texture* ptexture = &texture)
			{
				GenTextureMipmapsNative((Texture*)ptexture);
			}
		}

		[NativeName(NativeNameType.Func, "SetTextureFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetTextureFilterNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "int")] int filter)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, int, void>)funcTable[367])(texture, filter);
			#else
			((delegate* unmanaged[Cdecl]<Texture, int, void>)funcTable[367])(texture, filter);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetTextureFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetTextureFilter([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "int")] int filter)
		{
			SetTextureFilterNative(texture, filter);
		}

		[NativeName(NativeNameType.Func, "SetTextureWrap")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetTextureWrapNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "wrap")] [NativeName(NativeNameType.Type, "int")] int wrap)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, int, void>)funcTable[368])(texture, wrap);
			#else
			((delegate* unmanaged[Cdecl]<Texture, int, void>)funcTable[368])(texture, wrap);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetTextureWrap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetTextureWrap([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "wrap")] [NativeName(NativeNameType.Type, "int")] int wrap)
		{
			SetTextureWrapNative(texture, wrap);
		}

		/// <summary>
		/// Texture drawing functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "DrawTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTextureNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, int, int, Color, void>)funcTable[369])(texture, posX, posY, tint);
			#else
			((delegate* unmanaged[Cdecl]<Texture, int, int, Color, void>)funcTable[369])(texture, posX, posY, tint);
			#endif
		}

		/// <summary>
		/// Texture drawing functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "DrawTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTexture([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextureNative(texture, posX, posY, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextureV")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTextureVNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, Vector2, Color, void>)funcTable[370])(texture, position, tint);
			#else
			((delegate* unmanaged[Cdecl]<Texture, Vector2, Color, void>)funcTable[370])(texture, position, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextureV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextureV([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextureVNative(texture, position, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextureEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTextureExNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, Vector2, float, float, Color, void>)funcTable[371])(texture, position, rotation, scale, tint);
			#else
			((delegate* unmanaged[Cdecl]<Texture, Vector2, float, float, Color, void>)funcTable[371])(texture, position, rotation, scale, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextureEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextureEx([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextureExNative(texture, position, rotation, scale, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextureRec")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTextureRecNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle source, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, Rectangle, Vector2, Color, void>)funcTable[372])(texture, source, position, tint);
			#else
			((delegate* unmanaged[Cdecl]<Texture, Rectangle, Vector2, Color, void>)funcTable[372])(texture, source, position, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextureRec")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextureRec([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle source, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextureRecNative(texture, source, position, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTexturePro")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTextureProNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle source, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle dest, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, Rectangle, Rectangle, Vector2, float, Color, void>)funcTable[373])(texture, source, dest, origin, rotation, tint);
			#else
			((delegate* unmanaged[Cdecl]<Texture, Rectangle, Rectangle, Vector2, float, Color, void>)funcTable[373])(texture, source, dest, origin, rotation, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTexturePro")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTexturePro([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle source, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle dest, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextureProNative(texture, source, dest, origin, rotation, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextureNPatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTextureNPatchNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "nPatchInfo")] [NativeName(NativeNameType.Type, "NPatchInfo")] NPatchInfo nPatchInfo, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle dest, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Texture, NPatchInfo, Rectangle, Vector2, float, Color, void>)funcTable[374])(texture, nPatchInfo, dest, origin, rotation, tint);
			#else
			((delegate* unmanaged[Cdecl]<Texture, NPatchInfo, Rectangle, Vector2, float, Color, void>)funcTable[374])(texture, nPatchInfo, dest, origin, rotation, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextureNPatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextureNPatch([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture, [NativeName(NativeNameType.Param, "nPatchInfo")] [NativeName(NativeNameType.Type, "NPatchInfo")] NPatchInfo nPatchInfo, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "Rectangle")] Rectangle dest, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextureNPatchNative(texture, nPatchInfo, dest, origin, rotation, tint);
		}

		/// <summary>
		/// Color/pixel related functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ColorIsEqual")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ColorIsEqualNative([NativeName(NativeNameType.Param, "col1")] [NativeName(NativeNameType.Type, "Color")] Color col1, [NativeName(NativeNameType.Param, "col2")] [NativeName(NativeNameType.Type, "Color")] Color col2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, Color, byte>)funcTable[375])(col1, col2);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Color, Color, byte>)funcTable[375])(col1, col2);
			#endif
		}

		/// <summary>
		/// Color/pixel related functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ColorIsEqual")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorIsEqual([NativeName(NativeNameType.Param, "col1")] [NativeName(NativeNameType.Type, "Color")] Color col1, [NativeName(NativeNameType.Param, "col2")] [NativeName(NativeNameType.Type, "Color")] Color col2)
		{
			byte ret = ColorIsEqualNative(col1, col2);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "Fade")]
		[return: NativeName(NativeNameType.Type, "Color")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Color FadeNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "float")] float alpha)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, float, Color>)funcTable[376])(color, alpha);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Color, float, Color>)funcTable[376])(color, alpha);
			#endif
		}

		[NativeName(NativeNameType.Func, "Fade")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color Fade([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "float")] float alpha)
		{
			Color ret = FadeNative(color, alpha);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorToInt")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ColorToIntNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, int>)funcTable[377])(color);
			#else
			return (int)((delegate* unmanaged[Cdecl]<Color, int>)funcTable[377])(color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorToInt")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ColorToInt([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			int ret = ColorToIntNative(color);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorNormalize")]
		[return: NativeName(NativeNameType.Type, "Vector4")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Vector4 ColorNormalizeNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, Vector4>)funcTable[378])(color);
			#else
			return (Vector4)((delegate* unmanaged[Cdecl]<Color, Vector4>)funcTable[378])(color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorNormalize")]
		[return: NativeName(NativeNameType.Type, "Vector4")]
		public static Vector4 ColorNormalize([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			Vector4 ret = ColorNormalizeNative(color);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorFromNormalized")]
		[return: NativeName(NativeNameType.Type, "Color")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Color ColorFromNormalizedNative([NativeName(NativeNameType.Param, "normalized")] [NativeName(NativeNameType.Type, "Vector4")] Vector4 normalized)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector4, Color>)funcTable[379])(normalized);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Vector4, Color>)funcTable[379])(normalized);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorFromNormalized")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color ColorFromNormalized([NativeName(NativeNameType.Param, "normalized")] [NativeName(NativeNameType.Type, "Vector4")] Vector4 normalized)
		{
			Color ret = ColorFromNormalizedNative(normalized);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorToHSV")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Vector3 ColorToHSVNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, Vector3>)funcTable[380])(color);
			#else
			return (Vector3)((delegate* unmanaged[Cdecl]<Color, Vector3>)funcTable[380])(color);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorToHSV")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		public static Vector3 ColorToHSV([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			Vector3 ret = ColorToHSVNative(color);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorFromHSV")]
		[return: NativeName(NativeNameType.Type, "Color")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Color ColorFromHSVNative([NativeName(NativeNameType.Param, "hue")] [NativeName(NativeNameType.Type, "float")] float hue, [NativeName(NativeNameType.Param, "saturation")] [NativeName(NativeNameType.Type, "float")] float saturation, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float, Color>)funcTable[381])(hue, saturation, value);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<float, float, float, Color>)funcTable[381])(hue, saturation, value);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorFromHSV")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color ColorFromHSV([NativeName(NativeNameType.Param, "hue")] [NativeName(NativeNameType.Type, "float")] float hue, [NativeName(NativeNameType.Param, "saturation")] [NativeName(NativeNameType.Type, "float")] float saturation, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			Color ret = ColorFromHSVNative(hue, saturation, value);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorTint")]
		[return: NativeName(NativeNameType.Type, "Color")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Color ColorTintNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, Color, Color>)funcTable[382])(color, tint);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Color, Color, Color>)funcTable[382])(color, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorTint")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color ColorTint([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			Color ret = ColorTintNative(color, tint);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorBrightness")]
		[return: NativeName(NativeNameType.Type, "Color")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Color ColorBrightnessNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "factor")] [NativeName(NativeNameType.Type, "float")] float factor)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, float, Color>)funcTable[383])(color, factor);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Color, float, Color>)funcTable[383])(color, factor);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorBrightness")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color ColorBrightness([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "factor")] [NativeName(NativeNameType.Type, "float")] float factor)
		{
			Color ret = ColorBrightnessNative(color, factor);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorContrast")]
		[return: NativeName(NativeNameType.Type, "Color")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Color ColorContrastNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "contrast")] [NativeName(NativeNameType.Type, "float")] float contrast)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, float, Color>)funcTable[384])(color, contrast);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Color, float, Color>)funcTable[384])(color, contrast);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorContrast")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color ColorContrast([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "contrast")] [NativeName(NativeNameType.Type, "float")] float contrast)
		{
			Color ret = ColorContrastNative(color, contrast);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorAlpha")]
		[return: NativeName(NativeNameType.Type, "Color")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Color ColorAlphaNative([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "float")] float alpha)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, float, Color>)funcTable[385])(color, alpha);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Color, float, Color>)funcTable[385])(color, alpha);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorAlpha")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color ColorAlpha([NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "float")] float alpha)
		{
			Color ret = ColorAlphaNative(color, alpha);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorAlphaBlend")]
		[return: NativeName(NativeNameType.Type, "Color")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Color ColorAlphaBlendNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Color")] Color dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "Color")] Color src, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, Color, Color, Color>)funcTable[386])(dst, src, tint);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Color, Color, Color, Color>)funcTable[386])(dst, src, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorAlphaBlend")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color ColorAlphaBlend([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "Color")] Color dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "Color")] Color src, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			Color ret = ColorAlphaBlendNative(dst, src, tint);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ColorLerp")]
		[return: NativeName(NativeNameType.Type, "Color")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Color ColorLerpNative([NativeName(NativeNameType.Param, "color1")] [NativeName(NativeNameType.Type, "Color")] Color color1, [NativeName(NativeNameType.Param, "color2")] [NativeName(NativeNameType.Type, "Color")] Color color2, [NativeName(NativeNameType.Param, "factor")] [NativeName(NativeNameType.Type, "float")] float factor)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Color, Color, float, Color>)funcTable[387])(color1, color2, factor);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<Color, Color, float, Color>)funcTable[387])(color1, color2, factor);
			#endif
		}

		[NativeName(NativeNameType.Func, "ColorLerp")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color ColorLerp([NativeName(NativeNameType.Param, "color1")] [NativeName(NativeNameType.Type, "Color")] Color color1, [NativeName(NativeNameType.Param, "color2")] [NativeName(NativeNameType.Type, "Color")] Color color2, [NativeName(NativeNameType.Param, "factor")] [NativeName(NativeNameType.Type, "float")] float factor)
		{
			Color ret = ColorLerpNative(color1, color2, factor);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetColor")]
		[return: NativeName(NativeNameType.Type, "Color")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Color GetColorNative([NativeName(NativeNameType.Param, "hexValue")] [NativeName(NativeNameType.Type, "unsigned int")] uint hexValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, Color>)funcTable[388])(hexValue);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<uint, Color>)funcTable[388])(hexValue);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetColor")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color GetColor([NativeName(NativeNameType.Param, "hexValue")] [NativeName(NativeNameType.Type, "unsigned int")] uint hexValue)
		{
			Color ret = GetColorNative(hexValue);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetPixelColor")]
		[return: NativeName(NativeNameType.Type, "Color")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Color GetPixelColorNative([NativeName(NativeNameType.Param, "srcPtr")] [NativeName(NativeNameType.Type, "void *")] void* srcPtr, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, Color>)funcTable[389])(srcPtr, format);
			#else
			return (Color)((delegate* unmanaged[Cdecl]<nint, int, Color>)funcTable[389])((nint)srcPtr, format);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetPixelColor")]
		[return: NativeName(NativeNameType.Type, "Color")]
		public static Color GetPixelColor([NativeName(NativeNameType.Param, "srcPtr")] [NativeName(NativeNameType.Type, "void *")] void* srcPtr, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			Color ret = GetPixelColorNative(srcPtr, format);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SetPixelColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetPixelColorNative([NativeName(NativeNameType.Param, "dstPtr")] [NativeName(NativeNameType.Type, "void *")] void* dstPtr, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, Color, int, void>)funcTable[390])(dstPtr, color, format);
			#else
			((delegate* unmanaged[Cdecl]<nint, Color, int, void>)funcTable[390])((nint)dstPtr, color, format);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetPixelColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetPixelColor([NativeName(NativeNameType.Param, "dstPtr")] [NativeName(NativeNameType.Type, "void *")] void* dstPtr, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			SetPixelColorNative(dstPtr, color, format);
		}

		[NativeName(NativeNameType.Func, "GetPixelDataSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetPixelDataSizeNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int, int>)funcTable[391])(width, height, format);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int, int, int>)funcTable[391])(width, height, format);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetPixelDataSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetPixelDataSize([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			int ret = GetPixelDataSizeNative(width, height, format);
			return ret;
		}

		/// <summary>
		/// Font loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetFontDefault")]
		[return: NativeName(NativeNameType.Type, "Font")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Font GetFontDefaultNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Font>)funcTable[392])();
			#else
			return (Font)((delegate* unmanaged[Cdecl]<Font>)funcTable[392])();
			#endif
		}

		/// <summary>
		/// Font loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "GetFontDefault")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font GetFontDefault()
		{
			Font ret = GetFontDefaultNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFont")]
		[return: NativeName(NativeNameType.Type, "Font")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Font LoadFontNative([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Font>)funcTable[393])(fileName);
			#else
			return (Font)((delegate* unmanaged[Cdecl]<nint, Font>)funcTable[393])((nint)fileName);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadFont")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFont([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] byte* fileName)
		{
			Font ret = LoadFontNative(fileName);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFont")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFont([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				Font ret = LoadFontNative((byte*)pfileName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFont")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFont([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				Font ret = LoadFontNative((byte*)pfileName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFont")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFont([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Font ret = LoadFontNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Font LoadFontExNative([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] byte* fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int*, int, Font>)funcTable[394])(fileName, fontSize, codepoints, codepointCount);
			#else
			return (Font)((delegate* unmanaged[Cdecl]<nint, int, nint, int, Font>)funcTable[394])((nint)fileName, fontSize, (nint)codepoints, codepointCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] byte* fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			Font ret = LoadFontExNative(fileName, fontSize, codepoints, codepointCount);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileName = &fileName)
			{
				Font ret = LoadFontExNative((byte*)pfileName, fontSize, codepoints, codepointCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileName = fileName)
			{
				Font ret = LoadFontExNative((byte*)pfileName, fontSize, codepoints, codepointCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] string fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Font ret = LoadFontExNative(pStr0, fontSize, codepoints, codepointCount);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] byte* fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (int* pcodepoints = &codepoints)
			{
				Font ret = LoadFontExNative(fileName, fontSize, (int*)pcodepoints, codepointCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileName = &fileName)
			{
				fixed (int* pcodepoints = &codepoints)
				{
					Font ret = LoadFontExNative((byte*)pfileName, fontSize, (int*)pcodepoints, codepointCount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileName = fileName)
			{
				fixed (int* pcodepoints = &codepoints)
				{
					Font ret = LoadFontExNative((byte*)pfileName, fontSize, (int*)pcodepoints, codepointCount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontEx")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontEx([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] string fileName, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcodepoints = &codepoints)
			{
				Font ret = LoadFontExNative(pStr0, fontSize, (int*)pcodepoints, codepointCount);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromImage")]
		[return: NativeName(NativeNameType.Type, "Font")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Font LoadFontFromImageNative([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "Color")] Color key, [NativeName(NativeNameType.Param, "firstChar")] [NativeName(NativeNameType.Type, "int")] int firstChar)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, Color, int, Font>)funcTable[395])(image, key, firstChar);
			#else
			return (Font)((delegate* unmanaged[Cdecl]<Image, Color, int, Font>)funcTable[395])(image, key, firstChar);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadFontFromImage")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromImage([NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "Image")] Image image, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "Color")] Color key, [NativeName(NativeNameType.Param, "firstChar")] [NativeName(NativeNameType.Type, "int")] int firstChar)
		{
			Font ret = LoadFontFromImageNative(image, key, firstChar);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Font LoadFontFromMemoryNative([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int, int, int*, int, Font>)funcTable[396])(fileType, fileData, dataSize, fontSize, codepoints, codepointCount);
			#else
			return (Font)((delegate* unmanaged[Cdecl]<nint, nint, int, int, nint, int, Font>)funcTable[396])((nint)fileType, (nint)fileData, dataSize, fontSize, (nint)codepoints, codepointCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			Font ret = LoadFontFromMemoryNative(fileType, fileData, dataSize, fontSize, codepoints, codepointCount);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = &fileType)
			{
				Font ret = LoadFontFromMemoryNative((byte*)pfileType, fileData, dataSize, fontSize, codepoints, codepointCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = fileType)
			{
				Font ret = LoadFontFromMemoryNative((byte*)pfileType, fileData, dataSize, fontSize, codepoints, codepointCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] string fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Font ret = LoadFontFromMemoryNative(pStr0, fileData, dataSize, fontSize, codepoints, codepointCount);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileData = &fileData)
			{
				Font ret = LoadFontFromMemoryNative(fileType, (byte*)pfileData, dataSize, fontSize, codepoints, codepointCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = &fileType)
			{
				fixed (byte* pfileData = &fileData)
				{
					Font ret = LoadFontFromMemoryNative((byte*)pfileType, (byte*)pfileData, dataSize, fontSize, codepoints, codepointCount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = fileType)
			{
				fixed (byte* pfileData = &fileData)
				{
					Font ret = LoadFontFromMemoryNative((byte*)pfileType, (byte*)pfileData, dataSize, fontSize, codepoints, codepointCount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] string fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pfileData = &fileData)
			{
				Font ret = LoadFontFromMemoryNative(pStr0, (byte*)pfileData, dataSize, fontSize, codepoints, codepointCount);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (int* pcodepoints = &codepoints)
			{
				Font ret = LoadFontFromMemoryNative(fileType, fileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = &fileType)
			{
				fixed (int* pcodepoints = &codepoints)
				{
					Font ret = LoadFontFromMemoryNative((byte*)pfileType, fileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = fileType)
			{
				fixed (int* pcodepoints = &codepoints)
				{
					Font ret = LoadFontFromMemoryNative((byte*)pfileType, fileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] string fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcodepoints = &codepoints)
			{
				Font ret = LoadFontFromMemoryNative(pStr0, fileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileData = &fileData)
			{
				fixed (int* pcodepoints = &codepoints)
				{
					Font ret = LoadFontFromMemoryNative(fileType, (byte*)pfileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = &fileType)
			{
				fixed (byte* pfileData = &fileData)
				{
					fixed (int* pcodepoints = &codepoints)
					{
						Font ret = LoadFontFromMemoryNative((byte*)pfileType, (byte*)pfileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			fixed (byte* pfileType = fileType)
			{
				fixed (byte* pfileData = &fileData)
				{
					fixed (int* pcodepoints = &codepoints)
					{
						Font ret = LoadFontFromMemoryNative((byte*)pfileType, (byte*)pfileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontFromMemory")]
		[return: NativeName(NativeNameType.Type, "Font")]
		public static Font LoadFontFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "char const *")] string fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pfileData = &fileData)
			{
				fixed (int* pcodepoints = &codepoints)
				{
					Font ret = LoadFontFromMemoryNative(pStr0, (byte*)pfileData, dataSize, fontSize, (int*)pcodepoints, codepointCount);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "IsFontValid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsFontValidNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Font, byte>)funcTable[397])(font);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Font, byte>)funcTable[397])(font);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsFontValid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsFontValid([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font)
		{
			byte ret = IsFontValidNative(font);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "LoadFontData")]
		[return: NativeName(NativeNameType.Type, "GlyphInfo *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static GlyphInfo* LoadFontDataNative([NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int, int*, int, int, GlyphInfo*>)funcTable[398])(fileData, dataSize, fontSize, codepoints, codepointCount, type);
			#else
			return (GlyphInfo*)((delegate* unmanaged[Cdecl]<nint, int, int, nint, int, int, nint>)funcTable[398])((nint)fileData, dataSize, fontSize, (nint)codepoints, codepointCount, type);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadFontData")]
		[return: NativeName(NativeNameType.Type, "GlyphInfo *")]
		public static GlyphInfo* LoadFontData([NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			GlyphInfo* ret = LoadFontDataNative(fileData, dataSize, fontSize, codepoints, codepointCount, type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadFontData")]
		[return: NativeName(NativeNameType.Type, "GlyphInfo *")]
		public static GlyphInfo* LoadFontData([NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pfileData = &fileData)
			{
				GlyphInfo* ret = LoadFontDataNative((byte*)pfileData, dataSize, fontSize, codepoints, codepointCount, type);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontData")]
		[return: NativeName(NativeNameType.Type, "GlyphInfo *")]
		public static GlyphInfo* LoadFontData([NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (int* pcodepoints = &codepoints)
			{
				GlyphInfo* ret = LoadFontDataNative(fileData, dataSize, fontSize, (int*)pcodepoints, codepointCount, type);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadFontData")]
		[return: NativeName(NativeNameType.Type, "GlyphInfo *")]
		public static GlyphInfo* LoadFontData([NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "unsigned char const *")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int *")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pfileData = &fileData)
			{
				fixed (int* pcodepoints = &codepoints)
				{
					GlyphInfo* ret = LoadFontDataNative((byte*)pfileData, dataSize, fontSize, (int*)pcodepoints, codepointCount, type);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "GenImageFontAtlas")]
		[return: NativeName(NativeNameType.Type, "Image")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Image GenImageFontAtlasNative([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "GlyphInfo const *")] GlyphInfo* glyphs, [NativeName(NativeNameType.Param, "glyphRecs")] [NativeName(NativeNameType.Type, "Rectangle * *")] Rectangle** glyphRecs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "padding")] [NativeName(NativeNameType.Type, "int")] int padding, [NativeName(NativeNameType.Param, "packMethod")] [NativeName(NativeNameType.Type, "int")] int packMethod)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GlyphInfo*, Rectangle**, int, int, int, int, Image>)funcTable[399])(glyphs, glyphRecs, glyphCount, fontSize, padding, packMethod);
			#else
			return (Image)((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, int, Image>)funcTable[399])((nint)glyphs, (nint)glyphRecs, glyphCount, fontSize, padding, packMethod);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenImageFontAtlas")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageFontAtlas([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "GlyphInfo const *")] GlyphInfo* glyphs, [NativeName(NativeNameType.Param, "glyphRecs")] [NativeName(NativeNameType.Type, "Rectangle * *")] Rectangle** glyphRecs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "padding")] [NativeName(NativeNameType.Type, "int")] int padding, [NativeName(NativeNameType.Param, "packMethod")] [NativeName(NativeNameType.Type, "int")] int packMethod)
		{
			Image ret = GenImageFontAtlasNative(glyphs, glyphRecs, glyphCount, fontSize, padding, packMethod);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenImageFontAtlas")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageFontAtlas([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "GlyphInfo const *")] ref GlyphInfo glyphs, [NativeName(NativeNameType.Param, "glyphRecs")] [NativeName(NativeNameType.Type, "Rectangle * *")] Rectangle** glyphRecs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "padding")] [NativeName(NativeNameType.Type, "int")] int padding, [NativeName(NativeNameType.Param, "packMethod")] [NativeName(NativeNameType.Type, "int")] int packMethod)
		{
			fixed (GlyphInfo* pglyphs = &glyphs)
			{
				Image ret = GenImageFontAtlasNative((GlyphInfo*)pglyphs, glyphRecs, glyphCount, fontSize, padding, packMethod);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GenImageFontAtlas")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageFontAtlas([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "GlyphInfo const *")] GlyphInfo* glyphs, [NativeName(NativeNameType.Param, "glyphRecs")] [NativeName(NativeNameType.Type, "Rectangle * *")] ref Rectangle* glyphRecs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "padding")] [NativeName(NativeNameType.Type, "int")] int padding, [NativeName(NativeNameType.Param, "packMethod")] [NativeName(NativeNameType.Type, "int")] int packMethod)
		{
			fixed (Rectangle** pglyphRecs = &glyphRecs)
			{
				Image ret = GenImageFontAtlasNative(glyphs, (Rectangle**)pglyphRecs, glyphCount, fontSize, padding, packMethod);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GenImageFontAtlas")]
		[return: NativeName(NativeNameType.Type, "Image")]
		public static Image GenImageFontAtlas([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "GlyphInfo const *")] ref GlyphInfo glyphs, [NativeName(NativeNameType.Param, "glyphRecs")] [NativeName(NativeNameType.Type, "Rectangle * *")] ref Rectangle* glyphRecs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "padding")] [NativeName(NativeNameType.Type, "int")] int padding, [NativeName(NativeNameType.Param, "packMethod")] [NativeName(NativeNameType.Type, "int")] int packMethod)
		{
			fixed (GlyphInfo* pglyphs = &glyphs)
			{
				fixed (Rectangle** pglyphRecs = &glyphRecs)
				{
					Image ret = GenImageFontAtlasNative((GlyphInfo*)pglyphs, (Rectangle**)pglyphRecs, glyphCount, fontSize, padding, packMethod);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "UnloadFontData")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UnloadFontDataNative([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "GlyphInfo *")] GlyphInfo* glyphs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GlyphInfo*, int, void>)funcTable[400])(glyphs, glyphCount);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)funcTable[400])((nint)glyphs, glyphCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadFontData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadFontData([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "GlyphInfo *")] GlyphInfo* glyphs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount)
		{
			UnloadFontDataNative(glyphs, glyphCount);
		}

		[NativeName(NativeNameType.Func, "UnloadFontData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadFontData([NativeName(NativeNameType.Param, "glyphs")] [NativeName(NativeNameType.Type, "GlyphInfo *")] ref GlyphInfo glyphs, [NativeName(NativeNameType.Param, "glyphCount")] [NativeName(NativeNameType.Type, "int")] int glyphCount)
		{
			fixed (GlyphInfo* pglyphs = &glyphs)
			{
				UnloadFontDataNative((GlyphInfo*)pglyphs, glyphCount);
			}
		}

		[NativeName(NativeNameType.Func, "UnloadFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UnloadFontNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Font, void>)funcTable[401])(font);
			#else
			((delegate* unmanaged[Cdecl]<Font, void>)funcTable[401])(font);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadFont([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font)
		{
			UnloadFontNative(font);
		}

		[NativeName(NativeNameType.Func, "ExportFontAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ExportFontAsCodeNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Font, byte*, byte>)funcTable[402])(font, fileName);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Font, nint, byte>)funcTable[402])(font, (nint)fileName);
			#endif
		}

		[NativeName(NativeNameType.Func, "ExportFontAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportFontAsCode([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] byte* fileName)
		{
			byte ret = ExportFontAsCodeNative(font, fileName);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "ExportFontAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportFontAsCode([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				byte ret = ExportFontAsCodeNative(font, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportFontAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportFontAsCode([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				byte ret = ExportFontAsCodeNative(font, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportFontAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportFontAsCode([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "char const *")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ExportFontAsCodeNative(font, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Text drawing functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "DrawFPS")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawFPSNative([NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[403])(posX, posY);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[403])(posX, posY);
			#endif
		}

		/// <summary>
		/// Text drawing functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "DrawFPS")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawFPS([NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY)
		{
			DrawFPSNative(posX, posY);
		}

		[NativeName(NativeNameType.Func, "DrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTextNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, int, int, int, Color, void>)funcTable[404])(text, posX, posY, fontSize, color);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, Color, void>)funcTable[404])((nint)text, posX, posY, fontSize, color);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			DrawTextNative(text, posX, posY, fontSize, color);
		}

		[NativeName(NativeNameType.Func, "DrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ref byte text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (byte* ptext = &text)
			{
				DrawTextNative((byte*)ptext, posX, posY, fontSize, color);
			}
		}

		[NativeName(NativeNameType.Func, "DrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			fixed (byte* ptext = text)
			{
				DrawTextNative((byte*)ptext, posX, posY, fontSize, color);
			}
		}

		[NativeName(NativeNameType.Func, "DrawText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] string text, [NativeName(NativeNameType.Param, "posX")] [NativeName(NativeNameType.Type, "int")] int posX, [NativeName(NativeNameType.Param, "posY")] [NativeName(NativeNameType.Type, "int")] int posY, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Color")] Color color)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DrawTextNative(pStr0, posX, posY, fontSize, color);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "DrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTextExNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Font, byte*, Vector2, float, float, Color, void>)funcTable[405])(font, text, position, fontSize, spacing, tint);
			#else
			((delegate* unmanaged[Cdecl]<Font, nint, Vector2, float, float, Color, void>)funcTable[405])(font, (nint)text, position, fontSize, spacing, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextExNative(font, text, position, fontSize, spacing, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ref byte text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = &text)
			{
				DrawTextExNative(font, (byte*)ptext, position, fontSize, spacing, tint);
			}
		}

		[NativeName(NativeNameType.Func, "DrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = text)
			{
				DrawTextExNative(font, (byte*)ptext, position, fontSize, spacing, tint);
			}
		}

		[NativeName(NativeNameType.Func, "DrawTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] string text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DrawTextExNative(font, pStr0, position, fontSize, spacing, tint);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "DrawTextPro")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTextProNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Font, byte*, Vector2, Vector2, float, float, float, Color, void>)funcTable[406])(font, text, position, origin, rotation, fontSize, spacing, tint);
			#else
			((delegate* unmanaged[Cdecl]<Font, nint, Vector2, Vector2, float, float, float, Color, void>)funcTable[406])(font, (nint)text, position, origin, rotation, fontSize, spacing, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextPro")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextPro([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextProNative(font, text, position, origin, rotation, fontSize, spacing, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextPro")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextPro([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ref byte text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = &text)
			{
				DrawTextProNative(font, (byte*)ptext, position, origin, rotation, fontSize, spacing, tint);
			}
		}

		[NativeName(NativeNameType.Func, "DrawTextPro")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextPro([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (byte* ptext = text)
			{
				DrawTextProNative(font, (byte*)ptext, position, origin, rotation, fontSize, spacing, tint);
			}
		}

		[NativeName(NativeNameType.Func, "DrawTextPro")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextPro([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] string text, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "origin")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 origin, [NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "float")] float rotation, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DrawTextProNative(font, pStr0, position, origin, rotation, fontSize, spacing, tint);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "DrawTextCodepoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTextCodepointNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "int")] int codepoint, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Font, int, Vector2, float, Color, void>)funcTable[407])(font, codepoint, position, fontSize, tint);
			#else
			((delegate* unmanaged[Cdecl]<Font, int, Vector2, float, Color, void>)funcTable[407])(font, codepoint, position, fontSize, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextCodepoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextCodepoint([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "int")] int codepoint, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextCodepointNative(font, codepoint, position, fontSize, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextCodepoints")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTextCodepointsNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int const *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Font, int*, int, Vector2, float, float, Color, void>)funcTable[408])(font, codepoints, codepointCount, position, fontSize, spacing, tint);
			#else
			((delegate* unmanaged[Cdecl]<Font, nint, int, Vector2, float, float, Color, void>)funcTable[408])(font, (nint)codepoints, codepointCount, position, fontSize, spacing, tint);
			#endif
		}

		[NativeName(NativeNameType.Func, "DrawTextCodepoints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextCodepoints([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int const *")] int* codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			DrawTextCodepointsNative(font, codepoints, codepointCount, position, fontSize, spacing, tint);
		}

		[NativeName(NativeNameType.Func, "DrawTextCodepoints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DrawTextCodepoints([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "codepoints")] [NativeName(NativeNameType.Type, "int const *")] ref int codepoints, [NativeName(NativeNameType.Param, "codepointCount")] [NativeName(NativeNameType.Type, "int")] int codepointCount, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "Vector2")] Vector2 position, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "tint")] [NativeName(NativeNameType.Type, "Color")] Color tint)
		{
			fixed (int* pcodepoints = &codepoints)
			{
				DrawTextCodepointsNative(font, (int*)pcodepoints, codepointCount, position, fontSize, spacing, tint);
			}
		}

		/// <summary>
		/// Text font info functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SetTextLineSpacing")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetTextLineSpacingNative([NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "int")] int spacing)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[409])(spacing);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[409])(spacing);
			#endif
		}

		/// <summary>
		/// Text font info functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SetTextLineSpacing")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetTextLineSpacing([NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "int")] int spacing)
		{
			SetTextLineSpacingNative(spacing);
		}

		[NativeName(NativeNameType.Func, "MeasureText")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int MeasureTextNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int>)funcTable[410])(text, fontSize);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[410])((nint)text, fontSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "MeasureText")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int MeasureText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize)
		{
			int ret = MeasureTextNative(text, fontSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "MeasureText")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int MeasureText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ref byte text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize)
		{
			fixed (byte* ptext = &text)
			{
				int ret = MeasureTextNative((byte*)ptext, fontSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "MeasureText")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int MeasureText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize)
		{
			fixed (byte* ptext = text)
			{
				int ret = MeasureTextNative((byte*)ptext, fontSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "MeasureText")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int MeasureText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] string text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "int")] int fontSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = MeasureTextNative(pStr0, fontSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "MeasureTextEx")]
		[return: NativeName(NativeNameType.Type, "Vector2")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Vector2 MeasureTextExNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Font, byte*, float, float, Vector2>)funcTable[411])(font, text, fontSize, spacing);
			#else
			return (Vector2)((delegate* unmanaged[Cdecl]<Font, nint, float, float, Vector2>)funcTable[411])(font, (nint)text, fontSize, spacing);
			#endif
		}

		[NativeName(NativeNameType.Func, "MeasureTextEx")]
		[return: NativeName(NativeNameType.Type, "Vector2")]
		public static Vector2 MeasureTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing)
		{
			Vector2 ret = MeasureTextExNative(font, text, fontSize, spacing);
			return ret;
		}

		[NativeName(NativeNameType.Func, "MeasureTextEx")]
		[return: NativeName(NativeNameType.Type, "Vector2")]
		public static Vector2 MeasureTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ref byte text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing)
		{
			fixed (byte* ptext = &text)
			{
				Vector2 ret = MeasureTextExNative(font, (byte*)ptext, fontSize, spacing);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "MeasureTextEx")]
		[return: NativeName(NativeNameType.Type, "Vector2")]
		public static Vector2 MeasureTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing)
		{
			fixed (byte* ptext = text)
			{
				Vector2 ret = MeasureTextExNative(font, (byte*)ptext, fontSize, spacing);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "MeasureTextEx")]
		[return: NativeName(NativeNameType.Type, "Vector2")]
		public static Vector2 MeasureTextEx([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "Font")] Font font, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] string text, [NativeName(NativeNameType.Param, "fontSize")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Vector2 ret = MeasureTextExNative(font, pStr0, fontSize, spacing);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}
	}
}
