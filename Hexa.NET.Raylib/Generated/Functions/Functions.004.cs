// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Raylib
{
	public unsafe partial class Raylib
	{

		[NativeName(NativeNameType.Func, "GenMeshCube")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		public static Mesh GenMeshCube([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "float")] float height, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "float")] float length)
		{
			Mesh ret = GenMeshCubeNative(width, height, length);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenMeshSphere")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		internal static Mesh GenMeshSphereNative([NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "rings")] [NativeName(NativeNameType.Type, "int")] int rings, [NativeName(NativeNameType.Param, "slices")] [NativeName(NativeNameType.Type, "int")] int slices)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, int, int, Mesh>)vt[479])(radius, rings, slices);
			#else
			return (Mesh)((delegate* unmanaged[Cdecl]<float, int, int, Mesh>)vt[479])(radius, rings, slices);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenMeshSphere")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		public static Mesh GenMeshSphere([NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "rings")] [NativeName(NativeNameType.Type, "int")] int rings, [NativeName(NativeNameType.Param, "slices")] [NativeName(NativeNameType.Type, "int")] int slices)
		{
			Mesh ret = GenMeshSphereNative(radius, rings, slices);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenMeshHemiSphere")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		internal static Mesh GenMeshHemiSphereNative([NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "rings")] [NativeName(NativeNameType.Type, "int")] int rings, [NativeName(NativeNameType.Param, "slices")] [NativeName(NativeNameType.Type, "int")] int slices)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, int, int, Mesh>)vt[480])(radius, rings, slices);
			#else
			return (Mesh)((delegate* unmanaged[Cdecl]<float, int, int, Mesh>)vt[480])(radius, rings, slices);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenMeshHemiSphere")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		public static Mesh GenMeshHemiSphere([NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "rings")] [NativeName(NativeNameType.Type, "int")] int rings, [NativeName(NativeNameType.Param, "slices")] [NativeName(NativeNameType.Type, "int")] int slices)
		{
			Mesh ret = GenMeshHemiSphereNative(radius, rings, slices);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenMeshCylinder")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		internal static Mesh GenMeshCylinderNative([NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "float")] float height, [NativeName(NativeNameType.Param, "slices")] [NativeName(NativeNameType.Type, "int")] int slices)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, int, Mesh>)vt[481])(radius, height, slices);
			#else
			return (Mesh)((delegate* unmanaged[Cdecl]<float, float, int, Mesh>)vt[481])(radius, height, slices);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenMeshCylinder")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		public static Mesh GenMeshCylinder([NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "float")] float height, [NativeName(NativeNameType.Param, "slices")] [NativeName(NativeNameType.Type, "int")] int slices)
		{
			Mesh ret = GenMeshCylinderNative(radius, height, slices);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenMeshCone")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		internal static Mesh GenMeshConeNative([NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "float")] float height, [NativeName(NativeNameType.Param, "slices")] [NativeName(NativeNameType.Type, "int")] int slices)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, int, Mesh>)vt[482])(radius, height, slices);
			#else
			return (Mesh)((delegate* unmanaged[Cdecl]<float, float, int, Mesh>)vt[482])(radius, height, slices);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenMeshCone")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		public static Mesh GenMeshCone([NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "float")] float height, [NativeName(NativeNameType.Param, "slices")] [NativeName(NativeNameType.Type, "int")] int slices)
		{
			Mesh ret = GenMeshConeNative(radius, height, slices);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenMeshTorus")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		internal static Mesh GenMeshTorusNative([NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "radSeg")] [NativeName(NativeNameType.Type, "int")] int radSeg, [NativeName(NativeNameType.Param, "sides")] [NativeName(NativeNameType.Type, "int")] int sides)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, int, int, Mesh>)vt[483])(radius, size, radSeg, sides);
			#else
			return (Mesh)((delegate* unmanaged[Cdecl]<float, float, int, int, Mesh>)vt[483])(radius, size, radSeg, sides);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenMeshTorus")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		public static Mesh GenMeshTorus([NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "radSeg")] [NativeName(NativeNameType.Type, "int")] int radSeg, [NativeName(NativeNameType.Param, "sides")] [NativeName(NativeNameType.Type, "int")] int sides)
		{
			Mesh ret = GenMeshTorusNative(radius, size, radSeg, sides);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenMeshKnot")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		internal static Mesh GenMeshKnotNative([NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "radSeg")] [NativeName(NativeNameType.Type, "int")] int radSeg, [NativeName(NativeNameType.Param, "sides")] [NativeName(NativeNameType.Type, "int")] int sides)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, int, int, Mesh>)vt[484])(radius, size, radSeg, sides);
			#else
			return (Mesh)((delegate* unmanaged[Cdecl]<float, float, int, int, Mesh>)vt[484])(radius, size, radSeg, sides);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenMeshKnot")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		public static Mesh GenMeshKnot([NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "radSeg")] [NativeName(NativeNameType.Type, "int")] int radSeg, [NativeName(NativeNameType.Param, "sides")] [NativeName(NativeNameType.Type, "int")] int sides)
		{
			Mesh ret = GenMeshKnotNative(radius, size, radSeg, sides);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenMeshHeightmap")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		internal static Mesh GenMeshHeightmapNative([NativeName(NativeNameType.Param, "heightmap")] [NativeName(NativeNameType.Type, "Image")] Image heightmap, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, Vector3, Mesh>)vt[485])(heightmap, size);
			#else
			return (Mesh)((delegate* unmanaged[Cdecl]<Image, Vector3, Mesh>)vt[485])(heightmap, size);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenMeshHeightmap")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		public static Mesh GenMeshHeightmap([NativeName(NativeNameType.Param, "heightmap")] [NativeName(NativeNameType.Type, "Image")] Image heightmap, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 size)
		{
			Mesh ret = GenMeshHeightmapNative(heightmap, size);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GenMeshCubicmap")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		internal static Mesh GenMeshCubicmapNative([NativeName(NativeNameType.Param, "cubicmap")] [NativeName(NativeNameType.Type, "Image")] Image cubicmap, [NativeName(NativeNameType.Param, "cubeSize")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 cubeSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Image, Vector3, Mesh>)vt[486])(cubicmap, cubeSize);
			#else
			return (Mesh)((delegate* unmanaged[Cdecl]<Image, Vector3, Mesh>)vt[486])(cubicmap, cubeSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "GenMeshCubicmap")]
		[return: NativeName(NativeNameType.Type, "Mesh")]
		public static Mesh GenMeshCubicmap([NativeName(NativeNameType.Param, "cubicmap")] [NativeName(NativeNameType.Type, "Image")] Image cubicmap, [NativeName(NativeNameType.Param, "cubeSize")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 cubeSize)
		{
			Mesh ret = GenMeshCubicmapNative(cubicmap, cubeSize);
			return ret;
		}

		/// <summary>
		/// Material loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMaterials")]
		[return: NativeName(NativeNameType.Type, "Material*")]
		internal static Material* LoadMaterialsNative([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName, [NativeName(NativeNameType.Param, "materialCount")] [NativeName(NativeNameType.Type, "int*")] int* materialCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int*, Material*>)vt[487])(fileName, materialCount);
			#else
			return (Material*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)vt[487])((nint)fileName, (nint)materialCount);
			#endif
		}

		/// <summary>
		/// Material loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMaterials")]
		[return: NativeName(NativeNameType.Type, "Material*")]
		public static Material* LoadMaterials([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName, [NativeName(NativeNameType.Param, "materialCount")] [NativeName(NativeNameType.Type, "int*")] int* materialCount)
		{
			Material* ret = LoadMaterialsNative(fileName, materialCount);
			return ret;
		}

		/// <summary>
		/// Material loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMaterials")]
		[return: NativeName(NativeNameType.Type, "Material*")]
		public static Material* LoadMaterials([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName, [NativeName(NativeNameType.Param, "materialCount")] [NativeName(NativeNameType.Type, "int*")] int* materialCount)
		{
			fixed (byte* pfileName = &fileName)
			{
				Material* ret = LoadMaterialsNative((byte*)pfileName, materialCount);
				return ret;
			}
		}

		/// <summary>
		/// Material loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMaterials")]
		[return: NativeName(NativeNameType.Type, "Material*")]
		public static Material* LoadMaterials([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName, [NativeName(NativeNameType.Param, "materialCount")] [NativeName(NativeNameType.Type, "int*")] int* materialCount)
		{
			fixed (byte* pfileName = fileName)
			{
				Material* ret = LoadMaterialsNative((byte*)pfileName, materialCount);
				return ret;
			}
		}

		/// <summary>
		/// Material loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMaterials")]
		[return: NativeName(NativeNameType.Type, "Material*")]
		public static Material* LoadMaterials([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName, [NativeName(NativeNameType.Param, "materialCount")] [NativeName(NativeNameType.Type, "int*")] int* materialCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Material* ret = LoadMaterialsNative(pStr0, materialCount);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Material loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMaterials")]
		[return: NativeName(NativeNameType.Type, "Material*")]
		public static Material* LoadMaterials([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName, [NativeName(NativeNameType.Param, "materialCount")] [NativeName(NativeNameType.Type, "int*")] ref int materialCount)
		{
			fixed (int* pmaterialCount = &materialCount)
			{
				Material* ret = LoadMaterialsNative(fileName, (int*)pmaterialCount);
				return ret;
			}
		}

		/// <summary>
		/// Material loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMaterials")]
		[return: NativeName(NativeNameType.Type, "Material*")]
		public static Material* LoadMaterials([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName, [NativeName(NativeNameType.Param, "materialCount")] [NativeName(NativeNameType.Type, "int*")] ref int materialCount)
		{
			fixed (byte* pfileName = &fileName)
			{
				fixed (int* pmaterialCount = &materialCount)
				{
					Material* ret = LoadMaterialsNative((byte*)pfileName, (int*)pmaterialCount);
					return ret;
				}
			}
		}

		/// <summary>
		/// Material loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMaterials")]
		[return: NativeName(NativeNameType.Type, "Material*")]
		public static Material* LoadMaterials([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName, [NativeName(NativeNameType.Param, "materialCount")] [NativeName(NativeNameType.Type, "int*")] ref int materialCount)
		{
			fixed (byte* pfileName = fileName)
			{
				fixed (int* pmaterialCount = &materialCount)
				{
					Material* ret = LoadMaterialsNative((byte*)pfileName, (int*)pmaterialCount);
					return ret;
				}
			}
		}

		/// <summary>
		/// Material loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMaterials")]
		[return: NativeName(NativeNameType.Type, "Material*")]
		public static Material* LoadMaterials([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName, [NativeName(NativeNameType.Param, "materialCount")] [NativeName(NativeNameType.Type, "int*")] ref int materialCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pmaterialCount = &materialCount)
			{
				Material* ret = LoadMaterialsNative(pStr0, (int*)pmaterialCount);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadMaterialDefault")]
		[return: NativeName(NativeNameType.Type, "Material")]
		internal static Material LoadMaterialDefaultNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Material>)vt[488])();
			#else
			return (Material)((delegate* unmanaged[Cdecl]<Material>)vt[488])();
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadMaterialDefault")]
		[return: NativeName(NativeNameType.Type, "Material")]
		public static Material LoadMaterialDefault()
		{
			Material ret = LoadMaterialDefaultNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "IsMaterialReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsMaterialReadyNative([NativeName(NativeNameType.Param, "material")] [NativeName(NativeNameType.Type, "Material")] Material material)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Material, byte>)vt[489])(material);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Material, byte>)vt[489])(material);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsMaterialReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsMaterialReady([NativeName(NativeNameType.Param, "material")] [NativeName(NativeNameType.Type, "Material")] Material material)
		{
			byte ret = IsMaterialReadyNative(material);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "UnloadMaterial")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadMaterialNative([NativeName(NativeNameType.Param, "material")] [NativeName(NativeNameType.Type, "Material")] Material material)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Material, void>)vt[490])(material);
			#else
			((delegate* unmanaged[Cdecl]<Material, void>)vt[490])(material);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadMaterial")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadMaterial([NativeName(NativeNameType.Param, "material")] [NativeName(NativeNameType.Type, "Material")] Material material)
		{
			UnloadMaterialNative(material);
		}

		[NativeName(NativeNameType.Func, "SetMaterialTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetMaterialTextureNative([NativeName(NativeNameType.Param, "material")] [NativeName(NativeNameType.Type, "Material*")] Material* material, [NativeName(NativeNameType.Param, "mapType")] [NativeName(NativeNameType.Type, "int")] int mapType, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Material*, int, Texture, void>)vt[491])(material, mapType, texture);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, Texture, void>)vt[491])((nint)material, mapType, texture);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetMaterialTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetMaterialTexture([NativeName(NativeNameType.Param, "material")] [NativeName(NativeNameType.Type, "Material*")] Material* material, [NativeName(NativeNameType.Param, "mapType")] [NativeName(NativeNameType.Type, "int")] int mapType, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture)
		{
			SetMaterialTextureNative(material, mapType, texture);
		}

		[NativeName(NativeNameType.Func, "SetMaterialTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetMaterialTexture([NativeName(NativeNameType.Param, "material")] [NativeName(NativeNameType.Type, "Material*")] ref Material material, [NativeName(NativeNameType.Param, "mapType")] [NativeName(NativeNameType.Type, "int")] int mapType, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "Texture2D")] Texture texture)
		{
			fixed (Material* pmaterial = &material)
			{
				SetMaterialTextureNative((Material*)pmaterial, mapType, texture);
			}
		}

		[NativeName(NativeNameType.Func, "SetModelMeshMaterial")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetModelMeshMaterialNative([NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "Model*")] Model* model, [NativeName(NativeNameType.Param, "meshId")] [NativeName(NativeNameType.Type, "int")] int meshId, [NativeName(NativeNameType.Param, "materialId")] [NativeName(NativeNameType.Type, "int")] int materialId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Model*, int, int, void>)vt[492])(model, meshId, materialId);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)vt[492])((nint)model, meshId, materialId);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetModelMeshMaterial")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetModelMeshMaterial([NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "Model*")] Model* model, [NativeName(NativeNameType.Param, "meshId")] [NativeName(NativeNameType.Type, "int")] int meshId, [NativeName(NativeNameType.Param, "materialId")] [NativeName(NativeNameType.Type, "int")] int materialId)
		{
			SetModelMeshMaterialNative(model, meshId, materialId);
		}

		[NativeName(NativeNameType.Func, "SetModelMeshMaterial")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetModelMeshMaterial([NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "Model*")] ref Model model, [NativeName(NativeNameType.Param, "meshId")] [NativeName(NativeNameType.Type, "int")] int meshId, [NativeName(NativeNameType.Param, "materialId")] [NativeName(NativeNameType.Type, "int")] int materialId)
		{
			fixed (Model* pmodel = &model)
			{
				SetModelMeshMaterialNative((Model*)pmodel, meshId, materialId);
			}
		}

		/// <summary>
		/// Model animations loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadModelAnimations")]
		[return: NativeName(NativeNameType.Type, "ModelAnimation*")]
		internal static ModelAnimation* LoadModelAnimationsNative([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName, [NativeName(NativeNameType.Param, "animCount")] [NativeName(NativeNameType.Type, "int*")] int* animCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int*, ModelAnimation*>)vt[493])(fileName, animCount);
			#else
			return (ModelAnimation*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)vt[493])((nint)fileName, (nint)animCount);
			#endif
		}

		/// <summary>
		/// Model animations loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadModelAnimations")]
		[return: NativeName(NativeNameType.Type, "ModelAnimation*")]
		public static ModelAnimation* LoadModelAnimations([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName, [NativeName(NativeNameType.Param, "animCount")] [NativeName(NativeNameType.Type, "int*")] int* animCount)
		{
			ModelAnimation* ret = LoadModelAnimationsNative(fileName, animCount);
			return ret;
		}

		/// <summary>
		/// Model animations loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadModelAnimations")]
		[return: NativeName(NativeNameType.Type, "ModelAnimation*")]
		public static ModelAnimation* LoadModelAnimations([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName, [NativeName(NativeNameType.Param, "animCount")] [NativeName(NativeNameType.Type, "int*")] int* animCount)
		{
			fixed (byte* pfileName = &fileName)
			{
				ModelAnimation* ret = LoadModelAnimationsNative((byte*)pfileName, animCount);
				return ret;
			}
		}

		/// <summary>
		/// Model animations loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadModelAnimations")]
		[return: NativeName(NativeNameType.Type, "ModelAnimation*")]
		public static ModelAnimation* LoadModelAnimations([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName, [NativeName(NativeNameType.Param, "animCount")] [NativeName(NativeNameType.Type, "int*")] int* animCount)
		{
			fixed (byte* pfileName = fileName)
			{
				ModelAnimation* ret = LoadModelAnimationsNative((byte*)pfileName, animCount);
				return ret;
			}
		}

		/// <summary>
		/// Model animations loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadModelAnimations")]
		[return: NativeName(NativeNameType.Type, "ModelAnimation*")]
		public static ModelAnimation* LoadModelAnimations([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName, [NativeName(NativeNameType.Param, "animCount")] [NativeName(NativeNameType.Type, "int*")] int* animCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ModelAnimation* ret = LoadModelAnimationsNative(pStr0, animCount);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Model animations loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadModelAnimations")]
		[return: NativeName(NativeNameType.Type, "ModelAnimation*")]
		public static ModelAnimation* LoadModelAnimations([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName, [NativeName(NativeNameType.Param, "animCount")] [NativeName(NativeNameType.Type, "int*")] ref int animCount)
		{
			fixed (int* panimCount = &animCount)
			{
				ModelAnimation* ret = LoadModelAnimationsNative(fileName, (int*)panimCount);
				return ret;
			}
		}

		/// <summary>
		/// Model animations loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadModelAnimations")]
		[return: NativeName(NativeNameType.Type, "ModelAnimation*")]
		public static ModelAnimation* LoadModelAnimations([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName, [NativeName(NativeNameType.Param, "animCount")] [NativeName(NativeNameType.Type, "int*")] ref int animCount)
		{
			fixed (byte* pfileName = &fileName)
			{
				fixed (int* panimCount = &animCount)
				{
					ModelAnimation* ret = LoadModelAnimationsNative((byte*)pfileName, (int*)panimCount);
					return ret;
				}
			}
		}

		/// <summary>
		/// Model animations loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadModelAnimations")]
		[return: NativeName(NativeNameType.Type, "ModelAnimation*")]
		public static ModelAnimation* LoadModelAnimations([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName, [NativeName(NativeNameType.Param, "animCount")] [NativeName(NativeNameType.Type, "int*")] ref int animCount)
		{
			fixed (byte* pfileName = fileName)
			{
				fixed (int* panimCount = &animCount)
				{
					ModelAnimation* ret = LoadModelAnimationsNative((byte*)pfileName, (int*)panimCount);
					return ret;
				}
			}
		}

		/// <summary>
		/// Model animations loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadModelAnimations")]
		[return: NativeName(NativeNameType.Type, "ModelAnimation*")]
		public static ModelAnimation* LoadModelAnimations([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName, [NativeName(NativeNameType.Param, "animCount")] [NativeName(NativeNameType.Type, "int*")] ref int animCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* panimCount = &animCount)
			{
				ModelAnimation* ret = LoadModelAnimationsNative(pStr0, (int*)panimCount);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "UpdateModelAnimation")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateModelAnimationNative([NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "Model")] Model model, [NativeName(NativeNameType.Param, "anim")] [NativeName(NativeNameType.Type, "ModelAnimation")] ModelAnimation anim, [NativeName(NativeNameType.Param, "frame")] [NativeName(NativeNameType.Type, "int")] int frame)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Model, ModelAnimation, int, void>)vt[494])(model, anim, frame);
			#else
			((delegate* unmanaged[Cdecl]<Model, ModelAnimation, int, void>)vt[494])(model, anim, frame);
			#endif
		}

		[NativeName(NativeNameType.Func, "UpdateModelAnimation")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateModelAnimation([NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "Model")] Model model, [NativeName(NativeNameType.Param, "anim")] [NativeName(NativeNameType.Type, "ModelAnimation")] ModelAnimation anim, [NativeName(NativeNameType.Param, "frame")] [NativeName(NativeNameType.Type, "int")] int frame)
		{
			UpdateModelAnimationNative(model, anim, frame);
		}

		[NativeName(NativeNameType.Func, "UnloadModelAnimation")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadModelAnimationNative([NativeName(NativeNameType.Param, "anim")] [NativeName(NativeNameType.Type, "ModelAnimation")] ModelAnimation anim)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ModelAnimation, void>)vt[495])(anim);
			#else
			((delegate* unmanaged[Cdecl]<ModelAnimation, void>)vt[495])(anim);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadModelAnimation")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadModelAnimation([NativeName(NativeNameType.Param, "anim")] [NativeName(NativeNameType.Type, "ModelAnimation")] ModelAnimation anim)
		{
			UnloadModelAnimationNative(anim);
		}

		[NativeName(NativeNameType.Func, "UnloadModelAnimations")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadModelAnimationsNative([NativeName(NativeNameType.Param, "animations")] [NativeName(NativeNameType.Type, "ModelAnimation*")] ModelAnimation* animations, [NativeName(NativeNameType.Param, "animCount")] [NativeName(NativeNameType.Type, "int")] int animCount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ModelAnimation*, int, void>)vt[496])(animations, animCount);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[496])((nint)animations, animCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadModelAnimations")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadModelAnimations([NativeName(NativeNameType.Param, "animations")] [NativeName(NativeNameType.Type, "ModelAnimation*")] ModelAnimation* animations, [NativeName(NativeNameType.Param, "animCount")] [NativeName(NativeNameType.Type, "int")] int animCount)
		{
			UnloadModelAnimationsNative(animations, animCount);
		}

		[NativeName(NativeNameType.Func, "UnloadModelAnimations")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadModelAnimations([NativeName(NativeNameType.Param, "animations")] [NativeName(NativeNameType.Type, "ModelAnimation*")] ref ModelAnimation animations, [NativeName(NativeNameType.Param, "animCount")] [NativeName(NativeNameType.Type, "int")] int animCount)
		{
			fixed (ModelAnimation* panimations = &animations)
			{
				UnloadModelAnimationsNative((ModelAnimation*)panimations, animCount);
			}
		}

		[NativeName(NativeNameType.Func, "IsModelAnimationValid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsModelAnimationValidNative([NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "Model")] Model model, [NativeName(NativeNameType.Param, "anim")] [NativeName(NativeNameType.Type, "ModelAnimation")] ModelAnimation anim)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Model, ModelAnimation, byte>)vt[497])(model, anim);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Model, ModelAnimation, byte>)vt[497])(model, anim);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsModelAnimationValid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsModelAnimationValid([NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "Model")] Model model, [NativeName(NativeNameType.Param, "anim")] [NativeName(NativeNameType.Type, "ModelAnimation")] ModelAnimation anim)
		{
			byte ret = IsModelAnimationValidNative(model, anim);
			return ret != 0;
		}

		/// <summary>
		/// Collision detection functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CheckCollisionSpheres")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte CheckCollisionSpheresNative([NativeName(NativeNameType.Param, "center1")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 center1, [NativeName(NativeNameType.Param, "radius1")] [NativeName(NativeNameType.Type, "float")] float radius1, [NativeName(NativeNameType.Param, "center2")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 center2, [NativeName(NativeNameType.Param, "radius2")] [NativeName(NativeNameType.Type, "float")] float radius2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector3, float, Vector3, float, byte>)vt[498])(center1, radius1, center2, radius2);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Vector3, float, Vector3, float, byte>)vt[498])(center1, radius1, center2, radius2);
			#endif
		}

		/// <summary>
		/// Collision detection functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CheckCollisionSpheres")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckCollisionSpheres([NativeName(NativeNameType.Param, "center1")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 center1, [NativeName(NativeNameType.Param, "radius1")] [NativeName(NativeNameType.Type, "float")] float radius1, [NativeName(NativeNameType.Param, "center2")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 center2, [NativeName(NativeNameType.Param, "radius2")] [NativeName(NativeNameType.Type, "float")] float radius2)
		{
			byte ret = CheckCollisionSpheresNative(center1, radius1, center2, radius2);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "CheckCollisionBoxes")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte CheckCollisionBoxesNative([NativeName(NativeNameType.Param, "box1")] [NativeName(NativeNameType.Type, "BoundingBox")] BoundingBox box1, [NativeName(NativeNameType.Param, "box2")] [NativeName(NativeNameType.Type, "BoundingBox")] BoundingBox box2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BoundingBox, BoundingBox, byte>)vt[499])(box1, box2);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<BoundingBox, BoundingBox, byte>)vt[499])(box1, box2);
			#endif
		}

		[NativeName(NativeNameType.Func, "CheckCollisionBoxes")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckCollisionBoxes([NativeName(NativeNameType.Param, "box1")] [NativeName(NativeNameType.Type, "BoundingBox")] BoundingBox box1, [NativeName(NativeNameType.Param, "box2")] [NativeName(NativeNameType.Type, "BoundingBox")] BoundingBox box2)
		{
			byte ret = CheckCollisionBoxesNative(box1, box2);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "CheckCollisionBoxSphere")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte CheckCollisionBoxSphereNative([NativeName(NativeNameType.Param, "box")] [NativeName(NativeNameType.Type, "BoundingBox")] BoundingBox box, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BoundingBox, Vector3, float, byte>)vt[500])(box, center, radius);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<BoundingBox, Vector3, float, byte>)vt[500])(box, center, radius);
			#endif
		}

		[NativeName(NativeNameType.Func, "CheckCollisionBoxSphere")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckCollisionBoxSphere([NativeName(NativeNameType.Param, "box")] [NativeName(NativeNameType.Type, "BoundingBox")] BoundingBox box, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius)
		{
			byte ret = CheckCollisionBoxSphereNative(box, center, radius);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "GetRayCollisionSphere")]
		[return: NativeName(NativeNameType.Type, "RayCollision")]
		internal static RayCollision GetRayCollisionSphereNative([NativeName(NativeNameType.Param, "ray")] [NativeName(NativeNameType.Type, "Ray")] Ray ray, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Ray, Vector3, float, RayCollision>)vt[501])(ray, center, radius);
			#else
			return (RayCollision)((delegate* unmanaged[Cdecl]<Ray, Vector3, float, RayCollision>)vt[501])(ray, center, radius);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetRayCollisionSphere")]
		[return: NativeName(NativeNameType.Type, "RayCollision")]
		public static RayCollision GetRayCollisionSphere([NativeName(NativeNameType.Param, "ray")] [NativeName(NativeNameType.Type, "Ray")] Ray ray, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius)
		{
			RayCollision ret = GetRayCollisionSphereNative(ray, center, radius);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetRayCollisionBox")]
		[return: NativeName(NativeNameType.Type, "RayCollision")]
		internal static RayCollision GetRayCollisionBoxNative([NativeName(NativeNameType.Param, "ray")] [NativeName(NativeNameType.Type, "Ray")] Ray ray, [NativeName(NativeNameType.Param, "box")] [NativeName(NativeNameType.Type, "BoundingBox")] BoundingBox box)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Ray, BoundingBox, RayCollision>)vt[502])(ray, box);
			#else
			return (RayCollision)((delegate* unmanaged[Cdecl]<Ray, BoundingBox, RayCollision>)vt[502])(ray, box);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetRayCollisionBox")]
		[return: NativeName(NativeNameType.Type, "RayCollision")]
		public static RayCollision GetRayCollisionBox([NativeName(NativeNameType.Param, "ray")] [NativeName(NativeNameType.Type, "Ray")] Ray ray, [NativeName(NativeNameType.Param, "box")] [NativeName(NativeNameType.Type, "BoundingBox")] BoundingBox box)
		{
			RayCollision ret = GetRayCollisionBoxNative(ray, box);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetRayCollisionMesh")]
		[return: NativeName(NativeNameType.Type, "RayCollision")]
		internal static RayCollision GetRayCollisionMeshNative([NativeName(NativeNameType.Param, "ray")] [NativeName(NativeNameType.Type, "Ray")] Ray ray, [NativeName(NativeNameType.Param, "mesh")] [NativeName(NativeNameType.Type, "Mesh")] Mesh mesh, [NativeName(NativeNameType.Param, "transform")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 transform)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Ray, Mesh, Matrix4x4, RayCollision>)vt[503])(ray, mesh, transform);
			#else
			return (RayCollision)((delegate* unmanaged[Cdecl]<Ray, Mesh, Matrix4x4, RayCollision>)vt[503])(ray, mesh, transform);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetRayCollisionMesh")]
		[return: NativeName(NativeNameType.Type, "RayCollision")]
		public static RayCollision GetRayCollisionMesh([NativeName(NativeNameType.Param, "ray")] [NativeName(NativeNameType.Type, "Ray")] Ray ray, [NativeName(NativeNameType.Param, "mesh")] [NativeName(NativeNameType.Type, "Mesh")] Mesh mesh, [NativeName(NativeNameType.Param, "transform")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 transform)
		{
			RayCollision ret = GetRayCollisionMeshNative(ray, mesh, transform);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetRayCollisionTriangle")]
		[return: NativeName(NativeNameType.Type, "RayCollision")]
		internal static RayCollision GetRayCollisionTriangleNative([NativeName(NativeNameType.Param, "ray")] [NativeName(NativeNameType.Type, "Ray")] Ray ray, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 p3)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Ray, Vector3, Vector3, Vector3, RayCollision>)vt[504])(ray, p1, p2, p3);
			#else
			return (RayCollision)((delegate* unmanaged[Cdecl]<Ray, Vector3, Vector3, Vector3, RayCollision>)vt[504])(ray, p1, p2, p3);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetRayCollisionTriangle")]
		[return: NativeName(NativeNameType.Type, "RayCollision")]
		public static RayCollision GetRayCollisionTriangle([NativeName(NativeNameType.Param, "ray")] [NativeName(NativeNameType.Type, "Ray")] Ray ray, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 p3)
		{
			RayCollision ret = GetRayCollisionTriangleNative(ray, p1, p2, p3);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetRayCollisionQuad")]
		[return: NativeName(NativeNameType.Type, "RayCollision")]
		internal static RayCollision GetRayCollisionQuadNative([NativeName(NativeNameType.Param, "ray")] [NativeName(NativeNameType.Type, "Ray")] Ray ray, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 p4)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Ray, Vector3, Vector3, Vector3, Vector3, RayCollision>)vt[505])(ray, p1, p2, p3, p4);
			#else
			return (RayCollision)((delegate* unmanaged[Cdecl]<Ray, Vector3, Vector3, Vector3, Vector3, RayCollision>)vt[505])(ray, p1, p2, p3, p4);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetRayCollisionQuad")]
		[return: NativeName(NativeNameType.Type, "RayCollision")]
		public static RayCollision GetRayCollisionQuad([NativeName(NativeNameType.Param, "ray")] [NativeName(NativeNameType.Type, "Ray")] Ray ray, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "Vector3")] Vector3 p4)
		{
			RayCollision ret = GetRayCollisionQuadNative(ray, p1, p2, p3, p4);
			return ret;
		}

		/// <summary>
		/// Audio device management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "InitAudioDevice")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void InitAudioDeviceNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[506])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[506])();
			#endif
		}

		/// <summary>
		/// Audio device management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "InitAudioDevice")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InitAudioDevice()
		{
			InitAudioDeviceNative();
		}

		[NativeName(NativeNameType.Func, "CloseAudioDevice")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CloseAudioDeviceNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[507])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[507])();
			#endif
		}

		[NativeName(NativeNameType.Func, "CloseAudioDevice")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CloseAudioDevice()
		{
			CloseAudioDeviceNative();
		}

		[NativeName(NativeNameType.Func, "IsAudioDeviceReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsAudioDeviceReadyNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[508])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[508])();
			#endif
		}

		[NativeName(NativeNameType.Func, "IsAudioDeviceReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsAudioDeviceReady()
		{
			byte ret = IsAudioDeviceReadyNative();
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "SetMasterVolume")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetMasterVolumeNative([NativeName(NativeNameType.Param, "volume")] [NativeName(NativeNameType.Type, "float")] float volume)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)vt[509])(volume);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)vt[509])(volume);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetMasterVolume")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetMasterVolume([NativeName(NativeNameType.Param, "volume")] [NativeName(NativeNameType.Type, "float")] float volume)
		{
			SetMasterVolumeNative(volume);
		}

		[NativeName(NativeNameType.Func, "GetMasterVolume")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GetMasterVolumeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)vt[510])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)vt[510])();
			#endif
		}

		[NativeName(NativeNameType.Func, "GetMasterVolume")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetMasterVolume()
		{
			float ret = GetMasterVolumeNative();
			return ret;
		}

		/// <summary>
		/// Wave/Sound loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadWave")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		internal static Wave LoadWaveNative([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Wave>)vt[511])(fileName);
			#else
			return (Wave)((delegate* unmanaged[Cdecl]<nint, Wave>)vt[511])((nint)fileName);
			#endif
		}

		/// <summary>
		/// Wave/Sound loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadWave")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		public static Wave LoadWave([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			Wave ret = LoadWaveNative(fileName);
			return ret;
		}

		/// <summary>
		/// Wave/Sound loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadWave")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		public static Wave LoadWave([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				Wave ret = LoadWaveNative((byte*)pfileName);
				return ret;
			}
		}

		/// <summary>
		/// Wave/Sound loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadWave")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		public static Wave LoadWave([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				Wave ret = LoadWaveNative((byte*)pfileName);
				return ret;
			}
		}

		/// <summary>
		/// Wave/Sound loading/unloading functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadWave")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		public static Wave LoadWave([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Wave ret = LoadWaveNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadWaveFromMemory")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		internal static Wave LoadWaveFromMemoryNative([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int, Wave>)vt[512])(fileType, fileData, dataSize);
			#else
			return (Wave)((delegate* unmanaged[Cdecl]<nint, nint, int, Wave>)vt[512])((nint)fileType, (nint)fileData, dataSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadWaveFromMemory")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		public static Wave LoadWaveFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			Wave ret = LoadWaveFromMemoryNative(fileType, fileData, dataSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadWaveFromMemory")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		public static Wave LoadWaveFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = &fileType)
			{
				Wave ret = LoadWaveFromMemoryNative((byte*)pfileType, fileData, dataSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadWaveFromMemory")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		public static Wave LoadWaveFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = fileType)
			{
				Wave ret = LoadWaveFromMemoryNative((byte*)pfileType, fileData, dataSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadWaveFromMemory")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		public static Wave LoadWaveFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] string fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Wave ret = LoadWaveFromMemoryNative(pStr0, fileData, dataSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadWaveFromMemory")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		public static Wave LoadWaveFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] byte* fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileData = &fileData)
			{
				Wave ret = LoadWaveFromMemoryNative(fileType, (byte*)pfileData, dataSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadWaveFromMemory")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		public static Wave LoadWaveFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = &fileType)
			{
				fixed (byte* pfileData = &fileData)
				{
					Wave ret = LoadWaveFromMemoryNative((byte*)pfileType, (byte*)pfileData, dataSize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadWaveFromMemory")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		public static Wave LoadWaveFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = fileType)
			{
				fixed (byte* pfileData = &fileData)
				{
					Wave ret = LoadWaveFromMemoryNative((byte*)pfileType, (byte*)pfileData, dataSize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadWaveFromMemory")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		public static Wave LoadWaveFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] string fileType, [NativeName(NativeNameType.Param, "fileData")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte fileData, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pfileData = &fileData)
			{
				Wave ret = LoadWaveFromMemoryNative(pStr0, (byte*)pfileData, dataSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "IsWaveReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsWaveReadyNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Wave, byte>)vt[513])(wave);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Wave, byte>)vt[513])(wave);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsWaveReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWaveReady([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			byte ret = IsWaveReadyNative(wave);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "LoadSound")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		internal static Sound LoadSoundNative([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Sound>)vt[514])(fileName);
			#else
			return (Sound)((delegate* unmanaged[Cdecl]<nint, Sound>)vt[514])((nint)fileName);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadSound")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		public static Sound LoadSound([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			Sound ret = LoadSoundNative(fileName);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadSound")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		public static Sound LoadSound([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				Sound ret = LoadSoundNative((byte*)pfileName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadSound")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		public static Sound LoadSound([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				Sound ret = LoadSoundNative((byte*)pfileName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadSound")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		public static Sound LoadSound([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Sound ret = LoadSoundNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadSoundFromWave")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		internal static Sound LoadSoundFromWaveNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Wave, Sound>)vt[515])(wave);
			#else
			return (Sound)((delegate* unmanaged[Cdecl]<Wave, Sound>)vt[515])(wave);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadSoundFromWave")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		public static Sound LoadSoundFromWave([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			Sound ret = LoadSoundFromWaveNative(wave);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadSoundAlias")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		internal static Sound LoadSoundAliasNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "Sound")] Sound source)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Sound, Sound>)vt[516])(source);
			#else
			return (Sound)((delegate* unmanaged[Cdecl]<Sound, Sound>)vt[516])(source);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadSoundAlias")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		public static Sound LoadSoundAlias([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "Sound")] Sound source)
		{
			Sound ret = LoadSoundAliasNative(source);
			return ret;
		}

		[NativeName(NativeNameType.Func, "IsSoundReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsSoundReadyNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Sound, byte>)vt[517])(sound);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Sound, byte>)vt[517])(sound);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsSoundReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsSoundReady([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			byte ret = IsSoundReadyNative(sound);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "UpdateSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateSoundNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "sampleCount")] [NativeName(NativeNameType.Type, "int")] int sampleCount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, void*, int, void>)vt[518])(sound, data, sampleCount);
			#else
			((delegate* unmanaged[Cdecl]<Sound, nint, int, void>)vt[518])(sound, (nint)data, sampleCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "UpdateSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateSound([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "sampleCount")] [NativeName(NativeNameType.Type, "int")] int sampleCount)
		{
			UpdateSoundNative(sound, data, sampleCount);
		}

		[NativeName(NativeNameType.Func, "UnloadWave")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadWaveNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Wave, void>)vt[519])(wave);
			#else
			((delegate* unmanaged[Cdecl]<Wave, void>)vt[519])(wave);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadWave")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadWave([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			UnloadWaveNative(wave);
		}

		[NativeName(NativeNameType.Func, "UnloadSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadSoundNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[520])(sound);
			#else
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[520])(sound);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadSound([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			UnloadSoundNative(sound);
		}

		[NativeName(NativeNameType.Func, "UnloadSoundAlias")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadSoundAliasNative([NativeName(NativeNameType.Param, "alias")] [NativeName(NativeNameType.Type, "Sound")] Sound alias)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[521])(alias);
			#else
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[521])(alias);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadSoundAlias")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadSoundAlias([NativeName(NativeNameType.Param, "alias")] [NativeName(NativeNameType.Type, "Sound")] Sound alias)
		{
			UnloadSoundAliasNative(alias);
		}

		[NativeName(NativeNameType.Func, "ExportWave")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ExportWaveNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Wave, byte*, byte>)vt[522])(wave, fileName);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Wave, nint, byte>)vt[522])(wave, (nint)fileName);
			#endif
		}

		[NativeName(NativeNameType.Func, "ExportWave")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWave([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			byte ret = ExportWaveNative(wave, fileName);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "ExportWave")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWave([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				byte ret = ExportWaveNative(wave, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportWave")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWave([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				byte ret = ExportWaveNative(wave, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportWave")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWave([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ExportWaveNative(wave, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "ExportWaveAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ExportWaveAsCodeNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Wave, byte*, byte>)vt[523])(wave, fileName);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Wave, nint, byte>)vt[523])(wave, (nint)fileName);
			#endif
		}

		[NativeName(NativeNameType.Func, "ExportWaveAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWaveAsCode([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			byte ret = ExportWaveAsCodeNative(wave, fileName);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "ExportWaveAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWaveAsCode([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				byte ret = ExportWaveAsCodeNative(wave, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportWaveAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWaveAsCode([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				byte ret = ExportWaveAsCodeNative(wave, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportWaveAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWaveAsCode([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ExportWaveAsCodeNative(wave, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Wave/Sound management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "PlaySound")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PlaySoundNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[524])(sound);
			#else
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[524])(sound);
			#endif
		}

		/// <summary>
		/// Wave/Sound management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "PlaySound")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlaySound([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			PlaySoundNative(sound);
		}

		[NativeName(NativeNameType.Func, "StopSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void StopSoundNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[525])(sound);
			#else
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[525])(sound);
			#endif
		}

		[NativeName(NativeNameType.Func, "StopSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void StopSound([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			StopSoundNative(sound);
		}

		[NativeName(NativeNameType.Func, "PauseSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PauseSoundNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[526])(sound);
			#else
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[526])(sound);
			#endif
		}

		[NativeName(NativeNameType.Func, "PauseSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PauseSound([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			PauseSoundNative(sound);
		}

		[NativeName(NativeNameType.Func, "ResumeSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ResumeSoundNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[527])(sound);
			#else
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[527])(sound);
			#endif
		}

		[NativeName(NativeNameType.Func, "ResumeSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ResumeSound([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			ResumeSoundNative(sound);
		}

		[NativeName(NativeNameType.Func, "IsSoundPlaying")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsSoundPlayingNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Sound, byte>)vt[528])(sound);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Sound, byte>)vt[528])(sound);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsSoundPlaying")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsSoundPlaying([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			byte ret = IsSoundPlayingNative(sound);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "SetSoundVolume")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetSoundVolumeNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "volume")] [NativeName(NativeNameType.Type, "float")] float volume)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, float, void>)vt[529])(sound, volume);
			#else
			((delegate* unmanaged[Cdecl]<Sound, float, void>)vt[529])(sound, volume);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetSoundVolume")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetSoundVolume([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "volume")] [NativeName(NativeNameType.Type, "float")] float volume)
		{
			SetSoundVolumeNative(sound, volume);
		}

		[NativeName(NativeNameType.Func, "SetSoundPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetSoundPitchNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "float")] float pitch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, float, void>)vt[530])(sound, pitch);
			#else
			((delegate* unmanaged[Cdecl]<Sound, float, void>)vt[530])(sound, pitch);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetSoundPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetSoundPitch([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "float")] float pitch)
		{
			SetSoundPitchNative(sound, pitch);
		}

		[NativeName(NativeNameType.Func, "SetSoundPan")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetSoundPanNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "pan")] [NativeName(NativeNameType.Type, "float")] float pan)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, float, void>)vt[531])(sound, pan);
			#else
			((delegate* unmanaged[Cdecl]<Sound, float, void>)vt[531])(sound, pan);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetSoundPan")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetSoundPan([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "pan")] [NativeName(NativeNameType.Type, "float")] float pan)
		{
			SetSoundPanNative(sound, pan);
		}

		[NativeName(NativeNameType.Func, "WaveCopy")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		internal static Wave WaveCopyNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Wave, Wave>)vt[532])(wave);
			#else
			return (Wave)((delegate* unmanaged[Cdecl]<Wave, Wave>)vt[532])(wave);
			#endif
		}

		[NativeName(NativeNameType.Func, "WaveCopy")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		public static Wave WaveCopy([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			Wave ret = WaveCopyNative(wave);
			return ret;
		}

		[NativeName(NativeNameType.Func, "WaveCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void WaveCropNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave*")] Wave* wave, [NativeName(NativeNameType.Param, "initFrame")] [NativeName(NativeNameType.Type, "int")] int initFrame, [NativeName(NativeNameType.Param, "finalFrame")] [NativeName(NativeNameType.Type, "int")] int finalFrame)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Wave*, int, int, void>)vt[533])(wave, initFrame, finalFrame);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)vt[533])((nint)wave, initFrame, finalFrame);
			#endif
		}

		[NativeName(NativeNameType.Func, "WaveCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WaveCrop([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave*")] Wave* wave, [NativeName(NativeNameType.Param, "initFrame")] [NativeName(NativeNameType.Type, "int")] int initFrame, [NativeName(NativeNameType.Param, "finalFrame")] [NativeName(NativeNameType.Type, "int")] int finalFrame)
		{
			WaveCropNative(wave, initFrame, finalFrame);
		}

		[NativeName(NativeNameType.Func, "WaveCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WaveCrop([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave*")] ref Wave wave, [NativeName(NativeNameType.Param, "initFrame")] [NativeName(NativeNameType.Type, "int")] int initFrame, [NativeName(NativeNameType.Param, "finalFrame")] [NativeName(NativeNameType.Type, "int")] int finalFrame)
		{
			fixed (Wave* pwave = &wave)
			{
				WaveCropNative((Wave*)pwave, initFrame, finalFrame);
			}
		}

		[NativeName(NativeNameType.Func, "WaveFormat")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void WaveFormatNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave*")] Wave* wave, [NativeName(NativeNameType.Param, "sampleRate")] [NativeName(NativeNameType.Type, "int")] int sampleRate, [NativeName(NativeNameType.Param, "sampleSize")] [NativeName(NativeNameType.Type, "int")] int sampleSize, [NativeName(NativeNameType.Param, "channels")] [NativeName(NativeNameType.Type, "int")] int channels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Wave*, int, int, int, void>)vt[534])(wave, sampleRate, sampleSize, channels);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, void>)vt[534])((nint)wave, sampleRate, sampleSize, channels);
			#endif
		}

		[NativeName(NativeNameType.Func, "WaveFormat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WaveFormat([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave*")] Wave* wave, [NativeName(NativeNameType.Param, "sampleRate")] [NativeName(NativeNameType.Type, "int")] int sampleRate, [NativeName(NativeNameType.Param, "sampleSize")] [NativeName(NativeNameType.Type, "int")] int sampleSize, [NativeName(NativeNameType.Param, "channels")] [NativeName(NativeNameType.Type, "int")] int channels)
		{
			WaveFormatNative(wave, sampleRate, sampleSize, channels);
		}

		[NativeName(NativeNameType.Func, "WaveFormat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WaveFormat([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave*")] ref Wave wave, [NativeName(NativeNameType.Param, "sampleRate")] [NativeName(NativeNameType.Type, "int")] int sampleRate, [NativeName(NativeNameType.Param, "sampleSize")] [NativeName(NativeNameType.Type, "int")] int sampleSize, [NativeName(NativeNameType.Param, "channels")] [NativeName(NativeNameType.Type, "int")] int channels)
		{
			fixed (Wave* pwave = &wave)
			{
				WaveFormatNative((Wave*)pwave, sampleRate, sampleSize, channels);
			}
		}

		[NativeName(NativeNameType.Func, "LoadWaveSamples")]
		[return: NativeName(NativeNameType.Type, "float*")]
		internal static float* LoadWaveSamplesNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Wave, float*>)vt[535])(wave);
			#else
			return (float*)((delegate* unmanaged[Cdecl]<Wave, nint>)vt[535])(wave);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadWaveSamples")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadWaveSamples([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			float* ret = LoadWaveSamplesNative(wave);
			return ret;
		}

		[NativeName(NativeNameType.Func, "UnloadWaveSamples")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadWaveSamplesNative([NativeName(NativeNameType.Param, "samples")] [NativeName(NativeNameType.Type, "float*")] float* samples)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)vt[536])(samples);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[536])((nint)samples);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadWaveSamples")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadWaveSamples([NativeName(NativeNameType.Param, "samples")] [NativeName(NativeNameType.Type, "float*")] float* samples)
		{
			UnloadWaveSamplesNative(samples);
		}

		[NativeName(NativeNameType.Func, "UnloadWaveSamples")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadWaveSamples([NativeName(NativeNameType.Param, "samples")] [NativeName(NativeNameType.Type, "float*")] ref float samples)
		{
			fixed (float* psamples = &samples)
			{
				UnloadWaveSamplesNative((float*)psamples);
			}
		}

		/// <summary>
		/// Music management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMusicStream")]
		[return: NativeName(NativeNameType.Type, "Music")]
		internal static Music LoadMusicStreamNative([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Music>)vt[537])(fileName);
			#else
			return (Music)((delegate* unmanaged[Cdecl]<nint, Music>)vt[537])((nint)fileName);
			#endif
		}

		/// <summary>
		/// Music management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMusicStream")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStream([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			Music ret = LoadMusicStreamNative(fileName);
			return ret;
		}

		/// <summary>
		/// Music management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMusicStream")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStream([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				Music ret = LoadMusicStreamNative((byte*)pfileName);
				return ret;
			}
		}

		/// <summary>
		/// Music management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMusicStream")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStream([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				Music ret = LoadMusicStreamNative((byte*)pfileName);
				return ret;
			}
		}

		/// <summary>
		/// Music management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMusicStream")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStream([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Music ret = LoadMusicStreamNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		internal static Music LoadMusicStreamFromMemoryNative([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] byte* fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int, Music>)vt[538])(fileType, data, dataSize);
			#else
			return (Music)((delegate* unmanaged[Cdecl]<nint, nint, int, Music>)vt[538])((nint)fileType, (nint)data, dataSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] byte* fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			Music ret = LoadMusicStreamFromMemoryNative(fileType, data, dataSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = &fileType)
			{
				Music ret = LoadMusicStreamFromMemoryNative((byte*)pfileType, data, dataSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = fileType)
			{
				Music ret = LoadMusicStreamFromMemoryNative((byte*)pfileType, data, dataSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] string fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Music ret = LoadMusicStreamFromMemoryNative(pStr0, data, dataSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] byte* fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pdata = &data)
			{
				Music ret = LoadMusicStreamFromMemoryNative(fileType, (byte*)pdata, dataSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = &fileType)
			{
				fixed (byte* pdata = &data)
				{
					Music ret = LoadMusicStreamFromMemoryNative((byte*)pfileType, (byte*)pdata, dataSize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = fileType)
			{
				fixed (byte* pdata = &data)
				{
					Music ret = LoadMusicStreamFromMemoryNative((byte*)pfileType, (byte*)pdata, dataSize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] string fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pdata = &data)
			{
				Music ret = LoadMusicStreamFromMemoryNative(pStr0, (byte*)pdata, dataSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "IsMusicReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsMusicReadyNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Music, byte>)vt[539])(music);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Music, byte>)vt[539])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsMusicReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsMusicReady([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			byte ret = IsMusicReadyNative(music);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "UnloadMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadMusicStreamNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, void>)vt[540])(music);
			#else
			((delegate* unmanaged[Cdecl]<Music, void>)vt[540])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadMusicStream([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			UnloadMusicStreamNative(music);
		}

		[NativeName(NativeNameType.Func, "PlayMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PlayMusicStreamNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, void>)vt[541])(music);
			#else
			((delegate* unmanaged[Cdecl]<Music, void>)vt[541])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "PlayMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlayMusicStream([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			PlayMusicStreamNative(music);
		}

		[NativeName(NativeNameType.Func, "IsMusicStreamPlaying")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsMusicStreamPlayingNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Music, byte>)vt[542])(music);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Music, byte>)vt[542])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsMusicStreamPlaying")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsMusicStreamPlaying([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			byte ret = IsMusicStreamPlayingNative(music);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "UpdateMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateMusicStreamNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, void>)vt[543])(music);
			#else
			((delegate* unmanaged[Cdecl]<Music, void>)vt[543])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "UpdateMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateMusicStream([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			UpdateMusicStreamNative(music);
		}

		[NativeName(NativeNameType.Func, "StopMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void StopMusicStreamNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, void>)vt[544])(music);
			#else
			((delegate* unmanaged[Cdecl]<Music, void>)vt[544])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "StopMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void StopMusicStream([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			StopMusicStreamNative(music);
		}

		[NativeName(NativeNameType.Func, "PauseMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PauseMusicStreamNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, void>)vt[545])(music);
			#else
			((delegate* unmanaged[Cdecl]<Music, void>)vt[545])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "PauseMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PauseMusicStream([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			PauseMusicStreamNative(music);
		}

		[NativeName(NativeNameType.Func, "ResumeMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ResumeMusicStreamNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, void>)vt[546])(music);
			#else
			((delegate* unmanaged[Cdecl]<Music, void>)vt[546])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "ResumeMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ResumeMusicStream([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			ResumeMusicStreamNative(music);
		}

		[NativeName(NativeNameType.Func, "SeekMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SeekMusicStreamNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "float")] float position)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[547])(music, position);
			#else
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[547])(music, position);
			#endif
		}

		[NativeName(NativeNameType.Func, "SeekMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeekMusicStream([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "float")] float position)
		{
			SeekMusicStreamNative(music, position);
		}

		[NativeName(NativeNameType.Func, "SetMusicVolume")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetMusicVolumeNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "volume")] [NativeName(NativeNameType.Type, "float")] float volume)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[548])(music, volume);
			#else
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[548])(music, volume);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetMusicVolume")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetMusicVolume([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "volume")] [NativeName(NativeNameType.Type, "float")] float volume)
		{
			SetMusicVolumeNative(music, volume);
		}

		[NativeName(NativeNameType.Func, "SetMusicPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetMusicPitchNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "float")] float pitch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[549])(music, pitch);
			#else
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[549])(music, pitch);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetMusicPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetMusicPitch([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "float")] float pitch)
		{
			SetMusicPitchNative(music, pitch);
		}

		[NativeName(NativeNameType.Func, "SetMusicPan")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetMusicPanNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "pan")] [NativeName(NativeNameType.Type, "float")] float pan)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[550])(music, pan);
			#else
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[550])(music, pan);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetMusicPan")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetMusicPan([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "pan")] [NativeName(NativeNameType.Type, "float")] float pan)
		{
			SetMusicPanNative(music, pan);
		}

		[NativeName(NativeNameType.Func, "GetMusicTimeLength")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GetMusicTimeLengthNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Music, float>)vt[551])(music);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Music, float>)vt[551])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetMusicTimeLength")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetMusicTimeLength([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			float ret = GetMusicTimeLengthNative(music);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetMusicTimePlayed")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GetMusicTimePlayedNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Music, float>)vt[552])(music);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Music, float>)vt[552])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetMusicTimePlayed")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetMusicTimePlayed([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			float ret = GetMusicTimePlayedNative(music);
			return ret;
		}

		/// <summary>
		/// AudioStream management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadAudioStream")]
		[return: NativeName(NativeNameType.Type, "AudioStream")]
		internal static AudioStream LoadAudioStreamNative([NativeName(NativeNameType.Param, "sampleRate")] [NativeName(NativeNameType.Type, "unsigned int")] uint sampleRate, [NativeName(NativeNameType.Param, "sampleSize")] [NativeName(NativeNameType.Type, "unsigned int")] uint sampleSize, [NativeName(NativeNameType.Param, "channels")] [NativeName(NativeNameType.Type, "unsigned int")] uint channels)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint, uint, AudioStream>)vt[553])(sampleRate, sampleSize, channels);
			#else
			return (AudioStream)((delegate* unmanaged[Cdecl]<uint, uint, uint, AudioStream>)vt[553])(sampleRate, sampleSize, channels);
			#endif
		}

		/// <summary>
		/// AudioStream management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadAudioStream")]
		[return: NativeName(NativeNameType.Type, "AudioStream")]
		public static AudioStream LoadAudioStream([NativeName(NativeNameType.Param, "sampleRate")] [NativeName(NativeNameType.Type, "unsigned int")] uint sampleRate, [NativeName(NativeNameType.Param, "sampleSize")] [NativeName(NativeNameType.Type, "unsigned int")] uint sampleSize, [NativeName(NativeNameType.Param, "channels")] [NativeName(NativeNameType.Type, "unsigned int")] uint channels)
		{
			AudioStream ret = LoadAudioStreamNative(sampleRate, sampleSize, channels);
			return ret;
		}

		[NativeName(NativeNameType.Func, "IsAudioStreamReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsAudioStreamReadyNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<AudioStream, byte>)vt[554])(stream);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<AudioStream, byte>)vt[554])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsAudioStreamReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsAudioStreamReady([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			byte ret = IsAudioStreamReadyNative(stream);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "UnloadAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[555])(stream);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[555])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			UnloadAudioStreamNative(stream);
		}

		[NativeName(NativeNameType.Func, "UpdateAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "frameCount")] [NativeName(NativeNameType.Type, "int")] int frameCount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, void*, int, void>)vt[556])(stream, data, frameCount);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, nint, int, void>)vt[556])(stream, (nint)data, frameCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "UpdateAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "frameCount")] [NativeName(NativeNameType.Type, "int")] int frameCount)
		{
			UpdateAudioStreamNative(stream, data, frameCount);
		}

		[NativeName(NativeNameType.Func, "IsAudioStreamProcessed")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsAudioStreamProcessedNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<AudioStream, byte>)vt[557])(stream);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<AudioStream, byte>)vt[557])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsAudioStreamProcessed")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsAudioStreamProcessed([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			byte ret = IsAudioStreamProcessedNative(stream);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "PlayAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PlayAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[558])(stream);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[558])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "PlayAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlayAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			PlayAudioStreamNative(stream);
		}

		[NativeName(NativeNameType.Func, "PauseAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PauseAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[559])(stream);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[559])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "PauseAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PauseAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			PauseAudioStreamNative(stream);
		}

		[NativeName(NativeNameType.Func, "ResumeAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ResumeAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[560])(stream);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[560])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "ResumeAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ResumeAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			ResumeAudioStreamNative(stream);
		}

		[NativeName(NativeNameType.Func, "IsAudioStreamPlaying")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsAudioStreamPlayingNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<AudioStream, byte>)vt[561])(stream);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<AudioStream, byte>)vt[561])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsAudioStreamPlaying")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsAudioStreamPlaying([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			byte ret = IsAudioStreamPlayingNative(stream);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "StopAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void StopAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[562])(stream);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[562])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "StopAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void StopAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			StopAudioStreamNative(stream);
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamVolume")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetAudioStreamVolumeNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "volume")] [NativeName(NativeNameType.Type, "float")] float volume)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, float, void>)vt[563])(stream, volume);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, float, void>)vt[563])(stream, volume);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamVolume")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAudioStreamVolume([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "volume")] [NativeName(NativeNameType.Type, "float")] float volume)
		{
			SetAudioStreamVolumeNative(stream, volume);
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetAudioStreamPitchNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "float")] float pitch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, float, void>)vt[564])(stream, pitch);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, float, void>)vt[564])(stream, pitch);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAudioStreamPitch([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "float")] float pitch)
		{
			SetAudioStreamPitchNative(stream, pitch);
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamPan")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetAudioStreamPanNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "pan")] [NativeName(NativeNameType.Type, "float")] float pan)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, float, void>)vt[565])(stream, pan);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, float, void>)vt[565])(stream, pan);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamPan")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAudioStreamPan([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "pan")] [NativeName(NativeNameType.Type, "float")] float pan)
		{
			SetAudioStreamPanNative(stream, pan);
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamBufferSizeDefault")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetAudioStreamBufferSizeDefaultNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[566])(size);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[566])(size);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamBufferSizeDefault")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAudioStreamBufferSizeDefault([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			SetAudioStreamBufferSizeDefaultNative(size);
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamCallback")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetAudioStreamCallbackNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback callback)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, delegate*<void*, uint, void>, void>)vt[567])(stream, (delegate*<void*, uint, void>)Utils.GetFunctionPointerForDelegate(callback));
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, nint, void>)vt[567])(stream, (nint)Utils.GetFunctionPointerForDelegate(callback));
			#endif
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamCallback")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAudioStreamCallback([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback callback)
		{
			SetAudioStreamCallbackNative(stream, callback);
		}

		[NativeName(NativeNameType.Func, "AttachAudioStreamProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AttachAudioStreamProcessorNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, delegate*<void*, uint, void>, void>)vt[568])(stream, (delegate*<void*, uint, void>)Utils.GetFunctionPointerForDelegate(processor));
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, nint, void>)vt[568])(stream, (nint)Utils.GetFunctionPointerForDelegate(processor));
			#endif
		}

		[NativeName(NativeNameType.Func, "AttachAudioStreamProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AttachAudioStreamProcessor([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			AttachAudioStreamProcessorNative(stream, processor);
		}

		[NativeName(NativeNameType.Func, "DetachAudioStreamProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DetachAudioStreamProcessorNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, delegate*<void*, uint, void>, void>)vt[569])(stream, (delegate*<void*, uint, void>)Utils.GetFunctionPointerForDelegate(processor));
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, nint, void>)vt[569])(stream, (nint)Utils.GetFunctionPointerForDelegate(processor));
			#endif
		}

		[NativeName(NativeNameType.Func, "DetachAudioStreamProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DetachAudioStreamProcessor([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			DetachAudioStreamProcessorNative(stream, processor);
		}

		[NativeName(NativeNameType.Func, "AttachAudioMixedProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AttachAudioMixedProcessorNative([NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<void*, uint, void>, void>)vt[570])((delegate*<void*, uint, void>)Utils.GetFunctionPointerForDelegate(processor));
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[570])((nint)Utils.GetFunctionPointerForDelegate(processor));
			#endif
		}

		[NativeName(NativeNameType.Func, "AttachAudioMixedProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AttachAudioMixedProcessor([NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			AttachAudioMixedProcessorNative(processor);
		}

		[NativeName(NativeNameType.Func, "DetachAudioMixedProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DetachAudioMixedProcessorNative([NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<void*, uint, void>, void>)vt[571])((delegate*<void*, uint, void>)Utils.GetFunctionPointerForDelegate(processor));
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[571])((nint)Utils.GetFunctionPointerForDelegate(processor));
			#endif
		}

		[NativeName(NativeNameType.Func, "DetachAudioMixedProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DetachAudioMixedProcessor([NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			DetachAudioMixedProcessorNative(processor);
		}

		[NativeName(NativeNameType.Func, "GetCameraForward")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		internal static Vector3 GetCameraForwardNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Camera3D*, Vector3>)vt[572])(camera);
			#else
			return (Vector3)((delegate* unmanaged[Cdecl]<nint, Vector3>)vt[572])((nint)camera);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetCameraForward")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		public static Vector3 GetCameraForward([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			Vector3 ret = GetCameraForwardNative(camera);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCameraForward")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		public static Vector3 GetCameraForward([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				Vector3 ret = GetCameraForwardNative((Camera3D*)pcamera);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCameraUp")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		internal static Vector3 GetCameraUpNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Camera3D*, Vector3>)vt[573])(camera);
			#else
			return (Vector3)((delegate* unmanaged[Cdecl]<nint, Vector3>)vt[573])((nint)camera);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetCameraUp")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		public static Vector3 GetCameraUp([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			Vector3 ret = GetCameraUpNative(camera);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCameraUp")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		public static Vector3 GetCameraUp([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				Vector3 ret = GetCameraUpNative((Camera3D*)pcamera);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCameraRight")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		internal static Vector3 GetCameraRightNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Camera3D*, Vector3>)vt[574])(camera);
			#else
			return (Vector3)((delegate* unmanaged[Cdecl]<nint, Vector3>)vt[574])((nint)camera);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetCameraRight")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		public static Vector3 GetCameraRight([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			Vector3 ret = GetCameraRightNative(camera);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCameraRight")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		public static Vector3 GetCameraRight([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				Vector3 ret = GetCameraRightNative((Camera3D*)pcamera);
				return ret;
			}
		}

		/// <summary>
		/// Camera movement<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CameraMoveForward")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CameraMoveForwardNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance, [NativeName(NativeNameType.Param, "moveInWorldPlane")] [NativeName(NativeNameType.Type, "bool")] byte moveInWorldPlane)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Camera3D*, float, byte, void>)vt[575])(camera, distance, moveInWorldPlane);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, byte, void>)vt[575])((nint)camera, distance, moveInWorldPlane);
			#endif
		}

		/// <summary>
		/// Camera movement<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CameraMoveForward")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveForward([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance, [NativeName(NativeNameType.Param, "moveInWorldPlane")] [NativeName(NativeNameType.Type, "bool")] bool moveInWorldPlane)
		{
			CameraMoveForwardNative(camera, distance, moveInWorldPlane ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Camera movement<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CameraMoveForward")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveForward([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance, [NativeName(NativeNameType.Param, "moveInWorldPlane")] [NativeName(NativeNameType.Type, "bool")] bool moveInWorldPlane)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				CameraMoveForwardNative((Camera3D*)pcamera, distance, moveInWorldPlane ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "CameraMoveUp")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CameraMoveUpNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Camera3D*, float, void>)vt[576])(camera, distance);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[576])((nint)camera, distance);
			#endif
		}

		[NativeName(NativeNameType.Func, "CameraMoveUp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveUp([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance)
		{
			CameraMoveUpNative(camera, distance);
		}

		[NativeName(NativeNameType.Func, "CameraMoveUp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveUp([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				CameraMoveUpNative((Camera3D*)pcamera, distance);
			}
		}

		[NativeName(NativeNameType.Func, "CameraMoveRight")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CameraMoveRightNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance, [NativeName(NativeNameType.Param, "moveInWorldPlane")] [NativeName(NativeNameType.Type, "bool")] byte moveInWorldPlane)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Camera3D*, float, byte, void>)vt[577])(camera, distance, moveInWorldPlane);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, byte, void>)vt[577])((nint)camera, distance, moveInWorldPlane);
			#endif
		}

		[NativeName(NativeNameType.Func, "CameraMoveRight")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveRight([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance, [NativeName(NativeNameType.Param, "moveInWorldPlane")] [NativeName(NativeNameType.Type, "bool")] bool moveInWorldPlane)
		{
			CameraMoveRightNative(camera, distance, moveInWorldPlane ? (byte)1 : (byte)0);
		}

		[NativeName(NativeNameType.Func, "CameraMoveRight")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveRight([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance, [NativeName(NativeNameType.Param, "moveInWorldPlane")] [NativeName(NativeNameType.Type, "bool")] bool moveInWorldPlane)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				CameraMoveRightNative((Camera3D*)pcamera, distance, moveInWorldPlane ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "CameraMoveToTarget")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CameraMoveToTargetNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "delta")] [NativeName(NativeNameType.Type, "float")] float delta)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Camera3D*, float, void>)vt[578])(camera, delta);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[578])((nint)camera, delta);
			#endif
		}

		[NativeName(NativeNameType.Func, "CameraMoveToTarget")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveToTarget([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "delta")] [NativeName(NativeNameType.Type, "float")] float delta)
		{
			CameraMoveToTargetNative(camera, delta);
		}

		[NativeName(NativeNameType.Func, "CameraMoveToTarget")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveToTarget([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "delta")] [NativeName(NativeNameType.Type, "float")] float delta)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				CameraMoveToTargetNative((Camera3D*)pcamera, delta);
			}
		}

		/// <summary>
		/// Camera rotation<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CameraYaw")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CameraYawNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "rotateAroundTarget")] [NativeName(NativeNameType.Type, "bool")] byte rotateAroundTarget)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Camera3D*, float, byte, void>)vt[579])(camera, angle, rotateAroundTarget);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, byte, void>)vt[579])((nint)camera, angle, rotateAroundTarget);
			#endif
		}

		/// <summary>
		/// Camera rotation<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CameraYaw")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraYaw([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "rotateAroundTarget")] [NativeName(NativeNameType.Type, "bool")] bool rotateAroundTarget)
		{
			CameraYawNative(camera, angle, rotateAroundTarget ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Camera rotation<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CameraYaw")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraYaw([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "rotateAroundTarget")] [NativeName(NativeNameType.Type, "bool")] bool rotateAroundTarget)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				CameraYawNative((Camera3D*)pcamera, angle, rotateAroundTarget ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "CameraPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CameraPitchNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "lockView")] [NativeName(NativeNameType.Type, "bool")] byte lockView, [NativeName(NativeNameType.Param, "rotateAroundTarget")] [NativeName(NativeNameType.Type, "bool")] byte rotateAroundTarget, [NativeName(NativeNameType.Param, "rotateUp")] [NativeName(NativeNameType.Type, "bool")] byte rotateUp)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Camera3D*, float, byte, byte, byte, void>)vt[580])(camera, angle, lockView, rotateAroundTarget, rotateUp);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, byte, byte, byte, void>)vt[580])((nint)camera, angle, lockView, rotateAroundTarget, rotateUp);
			#endif
		}

		[NativeName(NativeNameType.Func, "CameraPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraPitch([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "lockView")] [NativeName(NativeNameType.Type, "bool")] bool lockView, [NativeName(NativeNameType.Param, "rotateAroundTarget")] [NativeName(NativeNameType.Type, "bool")] bool rotateAroundTarget, [NativeName(NativeNameType.Param, "rotateUp")] [NativeName(NativeNameType.Type, "bool")] bool rotateUp)
		{
			CameraPitchNative(camera, angle, lockView ? (byte)1 : (byte)0, rotateAroundTarget ? (byte)1 : (byte)0, rotateUp ? (byte)1 : (byte)0);
		}

		[NativeName(NativeNameType.Func, "CameraPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraPitch([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "lockView")] [NativeName(NativeNameType.Type, "bool")] bool lockView, [NativeName(NativeNameType.Param, "rotateAroundTarget")] [NativeName(NativeNameType.Type, "bool")] bool rotateAroundTarget, [NativeName(NativeNameType.Param, "rotateUp")] [NativeName(NativeNameType.Type, "bool")] bool rotateUp)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				CameraPitchNative((Camera3D*)pcamera, angle, lockView ? (byte)1 : (byte)0, rotateAroundTarget ? (byte)1 : (byte)0, rotateUp ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "CameraRoll")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CameraRollNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Camera3D*, float, void>)vt[581])(camera, angle);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[581])((nint)camera, angle);
			#endif
		}

		[NativeName(NativeNameType.Func, "CameraRoll")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraRoll([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle)
		{
			CameraRollNative(camera, angle);
		}

		[NativeName(NativeNameType.Func, "CameraRoll")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraRoll([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				CameraRollNative((Camera3D*)pcamera, angle);
			}
		}

		[NativeName(NativeNameType.Func, "GetCameraViewMatrix")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		internal static Matrix4x4 GetCameraViewMatrixNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Camera3D*, Matrix4x4>)vt[582])(camera);
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<nint, Matrix4x4>)vt[582])((nint)camera);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetCameraViewMatrix")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 GetCameraViewMatrix([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			Matrix4x4 ret = GetCameraViewMatrixNative(camera);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCameraViewMatrix")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 GetCameraViewMatrix([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				Matrix4x4 ret = GetCameraViewMatrixNative((Camera3D*)pcamera);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCameraProjectionMatrix")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		internal static Matrix4x4 GetCameraProjectionMatrixNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "aspect")] [NativeName(NativeNameType.Type, "float")] float aspect)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Camera3D*, float, Matrix4x4>)vt[583])(camera, aspect);
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<nint, float, Matrix4x4>)vt[583])((nint)camera, aspect);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetCameraProjectionMatrix")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 GetCameraProjectionMatrix([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "aspect")] [NativeName(NativeNameType.Type, "float")] float aspect)
		{
			Matrix4x4 ret = GetCameraProjectionMatrixNative(camera, aspect);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCameraProjectionMatrix")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 GetCameraProjectionMatrix([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "aspect")] [NativeName(NativeNameType.Type, "float")] float aspect)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				Matrix4x4 ret = GetCameraProjectionMatrixNative((Camera3D*)pcamera, aspect);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ProcessGestureEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ProcessGestureEventNative([NativeName(NativeNameType.Param, "event")] [NativeName(NativeNameType.Type, "GestureEvent")] GestureEvent evnt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GestureEvent, void>)vt[584])(evnt);
			#else
			((delegate* unmanaged[Cdecl]<GestureEvent, void>)vt[584])(evnt);
			#endif
		}

		[NativeName(NativeNameType.Func, "ProcessGestureEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ProcessGestureEvent([NativeName(NativeNameType.Param, "event")] [NativeName(NativeNameType.Type, "GestureEvent")] GestureEvent evnt)
		{
			ProcessGestureEventNative(evnt);
		}

		[NativeName(NativeNameType.Func, "UpdateGestures")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateGesturesNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[585])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[585])();
			#endif
		}

		[NativeName(NativeNameType.Func, "UpdateGestures")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateGestures()
		{
			UpdateGesturesNative();
		}

		[NativeName(NativeNameType.Func, "rlMatrixMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlMatrixModeNative([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[586])(mode);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[586])(mode);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlMatrixMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlMatrixMode([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			RlMatrixModeNative(mode);
		}

		[NativeName(NativeNameType.Func, "rlPushMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlPushMatrixNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[587])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[587])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlPushMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlPushMatrix()
		{
			RlPushMatrixNative();
		}

		[NativeName(NativeNameType.Func, "rlPopMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlPopMatrixNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[588])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[588])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlPopMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlPopMatrix()
		{
			RlPopMatrixNative();
		}

		[NativeName(NativeNameType.Func, "rlLoadIdentity")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlLoadIdentityNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[589])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[589])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadIdentity")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlLoadIdentity()
		{
			RlLoadIdentityNative();
		}

		[NativeName(NativeNameType.Func, "rlTranslatef")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlTranslatefNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[590])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[590])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlTranslatef")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlTranslatef([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			RlTranslatefNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "rlRotatef")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlRotatefNative([NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vt[591])(angle, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vt[591])(angle, x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlRotatef")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlRotatef([NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			RlRotatefNative(angle, x, y, z);
		}

		[NativeName(NativeNameType.Func, "rlScalef")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlScalefNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[592])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[592])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlScalef")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlScalef([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			RlScalefNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "rlMultMatrixf")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlMultMatrixfNative([NativeName(NativeNameType.Param, "matf")] [NativeName(NativeNameType.Type, "const float*")] float* matf)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)vt[593])(matf);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[593])((nint)matf);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlMultMatrixf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlMultMatrixf([NativeName(NativeNameType.Param, "matf")] [NativeName(NativeNameType.Type, "const float*")] float* matf)
		{
			RlMultMatrixfNative(matf);
		}

		[NativeName(NativeNameType.Func, "rlMultMatrixf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlMultMatrixf([NativeName(NativeNameType.Param, "matf")] [NativeName(NativeNameType.Type, "const float*")] ref float matf)
		{
			fixed (float* pmatf = &matf)
			{
				RlMultMatrixfNative((float*)pmatf);
			}
		}

		[NativeName(NativeNameType.Func, "rlFrustum")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlFrustumNative([NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "double")] double left, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "double")] double right, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "double")] double bottom, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "double")] double top, [NativeName(NativeNameType.Param, "znear")] [NativeName(NativeNameType.Type, "double")] double znear, [NativeName(NativeNameType.Param, "zfar")] [NativeName(NativeNameType.Type, "double")] double zfar)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, void>)vt[594])(left, right, bottom, top, znear, zfar);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, void>)vt[594])(left, right, bottom, top, znear, zfar);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlFrustum")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlFrustum([NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "double")] double left, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "double")] double right, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "double")] double bottom, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "double")] double top, [NativeName(NativeNameType.Param, "znear")] [NativeName(NativeNameType.Type, "double")] double znear, [NativeName(NativeNameType.Param, "zfar")] [NativeName(NativeNameType.Type, "double")] double zfar)
		{
			RlFrustumNative(left, right, bottom, top, znear, zfar);
		}

		[NativeName(NativeNameType.Func, "rlOrtho")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlOrthoNative([NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "double")] double left, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "double")] double right, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "double")] double bottom, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "double")] double top, [NativeName(NativeNameType.Param, "znear")] [NativeName(NativeNameType.Type, "double")] double znear, [NativeName(NativeNameType.Param, "zfar")] [NativeName(NativeNameType.Type, "double")] double zfar)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, void>)vt[595])(left, right, bottom, top, znear, zfar);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, void>)vt[595])(left, right, bottom, top, znear, zfar);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlOrtho")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlOrtho([NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "double")] double left, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "double")] double right, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "double")] double bottom, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "double")] double top, [NativeName(NativeNameType.Param, "znear")] [NativeName(NativeNameType.Type, "double")] double znear, [NativeName(NativeNameType.Param, "zfar")] [NativeName(NativeNameType.Type, "double")] double zfar)
		{
			RlOrthoNative(left, right, bottom, top, znear, zfar);
		}

		[NativeName(NativeNameType.Func, "rlViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlViewportNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vt[596])(x, y, width, height);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vt[596])(x, y, width, height);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlViewport([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			RlViewportNative(x, y, width, height);
		}

		[NativeName(NativeNameType.Func, "rlSetClipPlanes")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetClipPlanesNative([NativeName(NativeNameType.Param, "nearPlane")] [NativeName(NativeNameType.Type, "double")] double nearPlane, [NativeName(NativeNameType.Param, "farPlane")] [NativeName(NativeNameType.Type, "double")] double farPlane)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, void>)vt[597])(nearPlane, farPlane);
			#else
			((delegate* unmanaged[Cdecl]<double, double, void>)vt[597])(nearPlane, farPlane);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetClipPlanes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetClipPlanes([NativeName(NativeNameType.Param, "nearPlane")] [NativeName(NativeNameType.Type, "double")] double nearPlane, [NativeName(NativeNameType.Param, "farPlane")] [NativeName(NativeNameType.Type, "double")] double farPlane)
		{
			RlSetClipPlanesNative(nearPlane, farPlane);
		}

		[NativeName(NativeNameType.Func, "rlGetCullDistanceNear")]
		[return: NativeName(NativeNameType.Type, "double")]
		internal static double RlGetCullDistanceNearNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double>)vt[598])();
			#else
			return (double)((delegate* unmanaged[Cdecl]<double>)vt[598])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetCullDistanceNear")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double RlGetCullDistanceNear()
		{
			double ret = RlGetCullDistanceNearNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetCullDistanceFar")]
		[return: NativeName(NativeNameType.Type, "double")]
		internal static double RlGetCullDistanceFarNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double>)vt[599])();
			#else
			return (double)((delegate* unmanaged[Cdecl]<double>)vt[599])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetCullDistanceFar")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double RlGetCullDistanceFar()
		{
			double ret = RlGetCullDistanceFarNative();
			return ret;
		}

		/// <summary>
		/// ------------------------------------------------------------------------------------<br/>
		/// Functions Declaration - Vertex level operations<br/>
		/// ------------------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlBegin")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlBeginNative([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[600])(mode);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[600])(mode);
			#endif
		}

		/// <summary>
		/// ------------------------------------------------------------------------------------<br/>
		/// Functions Declaration - Vertex level operations<br/>
		/// ------------------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlBegin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlBegin([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			RlBeginNative(mode);
		}

		[NativeName(NativeNameType.Func, "rlEnd")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEndNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[601])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[601])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnd")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnd()
		{
			RlEndNative();
		}

		[NativeName(NativeNameType.Func, "rlVertex2i")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlVertex2INative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[602])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[602])(x, y);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlVertex2i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlVertex2I([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			RlVertex2INative(x, y);
		}

		[NativeName(NativeNameType.Func, "rlVertex2f")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlVertex2FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)vt[603])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)vt[603])(x, y);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlVertex2f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlVertex2F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			RlVertex2FNative(x, y);
		}

		[NativeName(NativeNameType.Func, "rlVertex3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlVertex3FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[604])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[604])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlVertex3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlVertex3F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			RlVertex3FNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "rlTexCoord2f")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlTexCoord2FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)vt[605])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)vt[605])(x, y);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlTexCoord2f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlTexCoord2F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			RlTexCoord2FNative(x, y);
		}

		[NativeName(NativeNameType.Func, "rlNormal3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlNormal3FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[606])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[606])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlNormal3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlNormal3F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			RlNormal3FNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "rlColor4ub")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlColor4UbNative([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "unsigned char")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "unsigned char")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "unsigned char")] byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "unsigned char")] byte a)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)vt[607])(r, g, b, a);
			#else
			((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)vt[607])(r, g, b, a);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlColor4ub")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlColor4Ub([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "unsigned char")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "unsigned char")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "unsigned char")] byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "unsigned char")] byte a)
		{
			RlColor4UbNative(r, g, b, a);
		}

		[NativeName(NativeNameType.Func, "rlColor3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlColor3FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[608])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[608])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlColor3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlColor3F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			RlColor3FNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "rlColor4f")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlColor4FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "float")] float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vt[609])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vt[609])(x, y, z, w);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlColor4f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlColor4F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "float")] float w)
		{
			RlColor4FNative(x, y, z, w);
		}

		/// <summary>
		/// Vertex buffers state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableVertexArray")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte RlEnableVertexArrayNative([NativeName(NativeNameType.Param, "vaoId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vaoId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)vt[610])(vaoId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)vt[610])(vaoId);
			#endif
		}

		/// <summary>
		/// Vertex buffers state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableVertexArray")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RlEnableVertexArray([NativeName(NativeNameType.Param, "vaoId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vaoId)
		{
			byte ret = RlEnableVertexArrayNative(vaoId);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableVertexArrayNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[611])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[611])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableVertexArray()
		{
			RlDisableVertexArrayNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableVertexBufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[612])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[612])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableVertexBuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlEnableVertexBufferNative(id);
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableVertexBufferNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[613])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[613])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableVertexBuffer()
		{
			RlDisableVertexBufferNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableVertexBufferElement")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableVertexBufferElementNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[614])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[614])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableVertexBufferElement")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableVertexBufferElement([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlEnableVertexBufferElementNative(id);
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexBufferElement")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableVertexBufferElementNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[615])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[615])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexBufferElement")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableVertexBufferElement()
		{
			RlDisableVertexBufferElementNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableVertexAttribute")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableVertexAttributeNative([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[616])(index);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[616])(index);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableVertexAttribute")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableVertexAttribute([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			RlEnableVertexAttributeNative(index);
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexAttribute")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableVertexAttributeNative([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[617])(index);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[617])(index);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexAttribute")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableVertexAttribute([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			RlDisableVertexAttributeNative(index);
		}

		/// <summary>
		/// Textures state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlActiveTextureSlot")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlActiveTextureSlotNative([NativeName(NativeNameType.Param, "slot")] [NativeName(NativeNameType.Type, "int")] int slot)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[618])(slot);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[618])(slot);
			#endif
		}

		/// <summary>
		/// Textures state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlActiveTextureSlot")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlActiveTextureSlot([NativeName(NativeNameType.Param, "slot")] [NativeName(NativeNameType.Type, "int")] int slot)
		{
			RlActiveTextureSlotNative(slot);
		}

		[NativeName(NativeNameType.Func, "rlEnableTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableTextureNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[619])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[619])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableTexture([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlEnableTextureNative(id);
		}

		[NativeName(NativeNameType.Func, "rlDisableTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableTextureNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[620])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[620])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableTexture()
		{
			RlDisableTextureNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableTextureCubemapNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[621])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[621])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableTextureCubemap([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlEnableTextureCubemapNative(id);
		}

		[NativeName(NativeNameType.Func, "rlDisableTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableTextureCubemapNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[622])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[622])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableTextureCubemap()
		{
			RlDisableTextureCubemapNative();
		}

		[NativeName(NativeNameType.Func, "rlTextureParameters")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlTextureParametersNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "int")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)vt[623])(id, param, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)vt[623])(id, param, value);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlTextureParameters")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlTextureParameters([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "int")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value)
		{
			RlTextureParametersNative(id, param, value);
		}

		[NativeName(NativeNameType.Func, "rlCubemapParameters")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlCubemapParametersNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "int")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)vt[624])(id, param, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)vt[624])(id, param, value);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlCubemapParameters")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlCubemapParameters([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "int")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value)
		{
			RlCubemapParametersNative(id, param, value);
		}

		/// <summary>
		/// Shader state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableShaderNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[625])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[625])(id);
			#endif
		}

		/// <summary>
		/// Shader state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableShader([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlEnableShaderNative(id);
		}

		[NativeName(NativeNameType.Func, "rlDisableShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableShaderNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[626])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[626])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableShader()
		{
			RlDisableShaderNative();
		}

		/// <summary>
		/// Framebuffer state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableFramebufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[627])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[627])(id);
			#endif
		}

		/// <summary>
		/// Framebuffer state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableFramebuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlEnableFramebufferNative(id);
		}

		[NativeName(NativeNameType.Func, "rlDisableFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableFramebufferNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[628])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[628])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableFramebuffer()
		{
			RlDisableFramebufferNative();
		}

		[NativeName(NativeNameType.Func, "rlGetActiveFramebuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlGetActiveFramebufferNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)vt[629])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)vt[629])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetActiveFramebuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlGetActiveFramebuffer()
		{
			uint ret = RlGetActiveFramebufferNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlActiveDrawBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlActiveDrawBuffersNative([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[630])(count);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[630])(count);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlActiveDrawBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlActiveDrawBuffers([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			RlActiveDrawBuffersNative(count);
		}

		[NativeName(NativeNameType.Func, "rlBlitFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlBlitFramebufferNative([NativeName(NativeNameType.Param, "srcX")] [NativeName(NativeNameType.Type, "int")] int srcX, [NativeName(NativeNameType.Param, "srcY")] [NativeName(NativeNameType.Type, "int")] int srcY, [NativeName(NativeNameType.Param, "srcWidth")] [NativeName(NativeNameType.Type, "int")] int srcWidth, [NativeName(NativeNameType.Param, "srcHeight")] [NativeName(NativeNameType.Type, "int")] int srcHeight, [NativeName(NativeNameType.Param, "dstX")] [NativeName(NativeNameType.Type, "int")] int dstX, [NativeName(NativeNameType.Param, "dstY")] [NativeName(NativeNameType.Type, "int")] int dstY, [NativeName(NativeNameType.Param, "dstWidth")] [NativeName(NativeNameType.Type, "int")] int dstWidth, [NativeName(NativeNameType.Param, "dstHeight")] [NativeName(NativeNameType.Type, "int")] int dstHeight, [NativeName(NativeNameType.Param, "bufferMask")] [NativeName(NativeNameType.Type, "int")] int bufferMask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, int, int, int, void>)vt[631])(srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight, bufferMask);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, int, int, int, void>)vt[631])(srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight, bufferMask);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlBlitFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlBlitFramebuffer([NativeName(NativeNameType.Param, "srcX")] [NativeName(NativeNameType.Type, "int")] int srcX, [NativeName(NativeNameType.Param, "srcY")] [NativeName(NativeNameType.Type, "int")] int srcY, [NativeName(NativeNameType.Param, "srcWidth")] [NativeName(NativeNameType.Type, "int")] int srcWidth, [NativeName(NativeNameType.Param, "srcHeight")] [NativeName(NativeNameType.Type, "int")] int srcHeight, [NativeName(NativeNameType.Param, "dstX")] [NativeName(NativeNameType.Type, "int")] int dstX, [NativeName(NativeNameType.Param, "dstY")] [NativeName(NativeNameType.Type, "int")] int dstY, [NativeName(NativeNameType.Param, "dstWidth")] [NativeName(NativeNameType.Type, "int")] int dstWidth, [NativeName(NativeNameType.Param, "dstHeight")] [NativeName(NativeNameType.Type, "int")] int dstHeight, [NativeName(NativeNameType.Param, "bufferMask")] [NativeName(NativeNameType.Type, "int")] int bufferMask)
		{
			RlBlitFramebufferNative(srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight, bufferMask);
		}

		[NativeName(NativeNameType.Func, "rlBindFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlBindFramebufferNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "unsigned int")] uint target, [NativeName(NativeNameType.Param, "framebuffer")] [NativeName(NativeNameType.Type, "unsigned int")] uint framebuffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)vt[632])(target, framebuffer);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)vt[632])(target, framebuffer);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlBindFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlBindFramebuffer([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "unsigned int")] uint target, [NativeName(NativeNameType.Param, "framebuffer")] [NativeName(NativeNameType.Type, "unsigned int")] uint framebuffer)
		{
			RlBindFramebufferNative(target, framebuffer);
		}

		/// <summary>
		/// General render state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableColorBlend")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableColorBlendNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[633])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[633])();
			#endif
		}

		/// <summary>
		/// General render state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableColorBlend")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableColorBlend()
		{
			RlEnableColorBlendNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableColorBlend")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableColorBlendNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[634])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[634])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableColorBlend")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableColorBlend()
		{
			RlDisableColorBlendNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableDepthTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableDepthTestNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[635])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[635])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableDepthTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableDepthTest()
		{
			RlEnableDepthTestNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableDepthTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableDepthTestNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[636])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[636])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableDepthTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableDepthTest()
		{
			RlDisableDepthTestNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableDepthMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableDepthMaskNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[637])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[637])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableDepthMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableDepthMask()
		{
			RlEnableDepthMaskNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableDepthMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableDepthMaskNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[638])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[638])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableDepthMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableDepthMask()
		{
			RlDisableDepthMaskNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableBackfaceCulling")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableBackfaceCullingNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[639])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[639])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableBackfaceCulling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableBackfaceCulling()
		{
			RlEnableBackfaceCullingNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableBackfaceCulling")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableBackfaceCullingNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[640])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[640])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableBackfaceCulling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableBackfaceCulling()
		{
			RlDisableBackfaceCullingNative();
		}

		[NativeName(NativeNameType.Func, "rlColorMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlColorMaskNative([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "bool")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "bool")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "bool")] byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "bool")] byte a)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)vt[641])(r, g, b, a);
			#else
			((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)vt[641])(r, g, b, a);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlColorMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlColorMask([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "bool")] bool r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "bool")] bool g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "bool")] bool b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "bool")] bool a)
		{
			RlColorMaskNative(r ? (byte)1 : (byte)0, g ? (byte)1 : (byte)0, b ? (byte)1 : (byte)0, a ? (byte)1 : (byte)0);
		}

		[NativeName(NativeNameType.Func, "rlSetCullFace")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetCullFaceNative([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[642])(mode);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[642])(mode);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetCullFace")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetCullFace([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			RlSetCullFaceNative(mode);
		}

		[NativeName(NativeNameType.Func, "rlEnableScissorTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableScissorTestNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[643])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[643])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableScissorTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableScissorTest()
		{
			RlEnableScissorTestNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableScissorTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableScissorTestNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[644])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[644])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableScissorTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableScissorTest()
		{
			RlDisableScissorTestNative();
		}

		[NativeName(NativeNameType.Func, "rlScissor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlScissorNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vt[645])(x, y, width, height);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vt[645])(x, y, width, height);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlScissor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlScissor([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			RlScissorNative(x, y, width, height);
		}

		[NativeName(NativeNameType.Func, "rlEnableWireMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableWireModeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[646])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[646])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableWireMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableWireMode()
		{
			RlEnableWireModeNative();
		}

		[NativeName(NativeNameType.Func, "rlEnablePointMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnablePointModeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[647])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[647])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnablePointMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnablePointMode()
		{
			RlEnablePointModeNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableWireMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableWireModeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[648])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[648])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableWireMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableWireMode()
		{
			RlDisableWireModeNative();
		}

		[NativeName(NativeNameType.Func, "rlSetLineWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetLineWidthNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)vt[649])(width);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)vt[649])(width);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetLineWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetLineWidth([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			RlSetLineWidthNative(width);
		}

		[NativeName(NativeNameType.Func, "rlGetLineWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float RlGetLineWidthNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)vt[650])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)vt[650])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetLineWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float RlGetLineWidth()
		{
			float ret = RlGetLineWidthNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlEnableSmoothLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableSmoothLinesNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[651])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[651])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableSmoothLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableSmoothLines()
		{
			RlEnableSmoothLinesNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableSmoothLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableSmoothLinesNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[652])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[652])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableSmoothLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableSmoothLines()
		{
			RlDisableSmoothLinesNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableStereoRender")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableStereoRenderNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[653])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[653])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableStereoRender")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableStereoRender()
		{
			RlEnableStereoRenderNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableStereoRender")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableStereoRenderNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[654])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[654])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableStereoRender")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableStereoRender()
		{
			RlDisableStereoRenderNative();
		}

		[NativeName(NativeNameType.Func, "rlIsStereoRenderEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte RlIsStereoRenderEnabledNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[655])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[655])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlIsStereoRenderEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RlIsStereoRenderEnabled()
		{
			byte ret = RlIsStereoRenderEnabledNative();
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "rlClearColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlClearColorNative([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "unsigned char")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "unsigned char")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "unsigned char")] byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "unsigned char")] byte a)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)vt[656])(r, g, b, a);
			#else
			((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)vt[656])(r, g, b, a);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlClearColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlClearColor([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "unsigned char")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "unsigned char")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "unsigned char")] byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "unsigned char")] byte a)
		{
			RlClearColorNative(r, g, b, a);
		}

		[NativeName(NativeNameType.Func, "rlClearScreenBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlClearScreenBuffersNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[657])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[657])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlClearScreenBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlClearScreenBuffers()
		{
			RlClearScreenBuffersNative();
		}

		[NativeName(NativeNameType.Func, "rlCheckErrors")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlCheckErrorsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[658])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[658])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlCheckErrors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlCheckErrors()
		{
			RlCheckErrorsNative();
		}

		[NativeName(NativeNameType.Func, "rlSetBlendMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetBlendModeNative([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[659])(mode);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[659])(mode);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetBlendMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetBlendMode([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			RlSetBlendModeNative(mode);
		}

		[NativeName(NativeNameType.Func, "rlSetBlendFactors")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetBlendFactorsNative([NativeName(NativeNameType.Param, "glSrcFactor")] [NativeName(NativeNameType.Type, "int")] int glSrcFactor, [NativeName(NativeNameType.Param, "glDstFactor")] [NativeName(NativeNameType.Type, "int")] int glDstFactor, [NativeName(NativeNameType.Param, "glEquation")] [NativeName(NativeNameType.Type, "int")] int glEquation)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)vt[660])(glSrcFactor, glDstFactor, glEquation);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)vt[660])(glSrcFactor, glDstFactor, glEquation);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetBlendFactors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetBlendFactors([NativeName(NativeNameType.Param, "glSrcFactor")] [NativeName(NativeNameType.Type, "int")] int glSrcFactor, [NativeName(NativeNameType.Param, "glDstFactor")] [NativeName(NativeNameType.Type, "int")] int glDstFactor, [NativeName(NativeNameType.Param, "glEquation")] [NativeName(NativeNameType.Type, "int")] int glEquation)
		{
			RlSetBlendFactorsNative(glSrcFactor, glDstFactor, glEquation);
		}

		[NativeName(NativeNameType.Func, "rlSetBlendFactorsSeparate")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetBlendFactorsSeparateNative([NativeName(NativeNameType.Param, "glSrcRGB")] [NativeName(NativeNameType.Type, "int")] int glSrcRGB, [NativeName(NativeNameType.Param, "glDstRGB")] [NativeName(NativeNameType.Type, "int")] int glDstRGB, [NativeName(NativeNameType.Param, "glSrcAlpha")] [NativeName(NativeNameType.Type, "int")] int glSrcAlpha, [NativeName(NativeNameType.Param, "glDstAlpha")] [NativeName(NativeNameType.Type, "int")] int glDstAlpha, [NativeName(NativeNameType.Param, "glEqRGB")] [NativeName(NativeNameType.Type, "int")] int glEqRGB, [NativeName(NativeNameType.Param, "glEqAlpha")] [NativeName(NativeNameType.Type, "int")] int glEqAlpha)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, void>)vt[661])(glSrcRGB, glDstRGB, glSrcAlpha, glDstAlpha, glEqRGB, glEqAlpha);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, void>)vt[661])(glSrcRGB, glDstRGB, glSrcAlpha, glDstAlpha, glEqRGB, glEqAlpha);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetBlendFactorsSeparate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetBlendFactorsSeparate([NativeName(NativeNameType.Param, "glSrcRGB")] [NativeName(NativeNameType.Type, "int")] int glSrcRGB, [NativeName(NativeNameType.Param, "glDstRGB")] [NativeName(NativeNameType.Type, "int")] int glDstRGB, [NativeName(NativeNameType.Param, "glSrcAlpha")] [NativeName(NativeNameType.Type, "int")] int glSrcAlpha, [NativeName(NativeNameType.Param, "glDstAlpha")] [NativeName(NativeNameType.Type, "int")] int glDstAlpha, [NativeName(NativeNameType.Param, "glEqRGB")] [NativeName(NativeNameType.Type, "int")] int glEqRGB, [NativeName(NativeNameType.Param, "glEqAlpha")] [NativeName(NativeNameType.Type, "int")] int glEqAlpha)
		{
			RlSetBlendFactorsSeparateNative(glSrcRGB, glDstRGB, glSrcAlpha, glDstAlpha, glEqRGB, glEqAlpha);
		}

		/// <summary>
		/// ------------------------------------------------------------------------------------<br/>
		/// Functions Declaration - rlgl functionality<br/>
		/// ------------------------------------------------------------------------------------<br/>
		/// rlgl initialization functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlglInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlglInitNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[662])(width, height);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[662])(width, height);
			#endif
		}

		/// <summary>
		/// ------------------------------------------------------------------------------------<br/>
		/// Functions Declaration - rlgl functionality<br/>
		/// ------------------------------------------------------------------------------------<br/>
		/// rlgl initialization functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlglInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlglInit([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			RlglInitNative(width, height);
		}

		[NativeName(NativeNameType.Func, "rlglClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlglCloseNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[663])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[663])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlglClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlglClose()
		{
			RlglCloseNative();
		}

		[NativeName(NativeNameType.Func, "rlLoadExtensions")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlLoadExtensionsNative([NativeName(NativeNameType.Param, "loader")] [NativeName(NativeNameType.Type, "void*")] void* loader)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, void>)vt[664])(loader);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[664])((nint)loader);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadExtensions")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlLoadExtensions([NativeName(NativeNameType.Param, "loader")] [NativeName(NativeNameType.Type, "void*")] void* loader)
		{
			RlLoadExtensionsNative(loader);
		}

		[NativeName(NativeNameType.Func, "rlGetVersion")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int RlGetVersionNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[665])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[665])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetVersion")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetVersion()
		{
			int ret = RlGetVersionNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlSetFramebufferWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetFramebufferWidthNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[666])(width);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[666])(width);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetFramebufferWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetFramebufferWidth([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width)
		{
			RlSetFramebufferWidthNative(width);
		}

		[NativeName(NativeNameType.Func, "rlGetFramebufferWidth")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int RlGetFramebufferWidthNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[667])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[667])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetFramebufferWidth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetFramebufferWidth()
		{
			int ret = RlGetFramebufferWidthNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlSetFramebufferHeight")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetFramebufferHeightNative([NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[668])(height);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[668])(height);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetFramebufferHeight")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetFramebufferHeight([NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			RlSetFramebufferHeightNative(height);
		}

		[NativeName(NativeNameType.Func, "rlGetFramebufferHeight")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int RlGetFramebufferHeightNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[669])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[669])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetFramebufferHeight")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetFramebufferHeight()
		{
			int ret = RlGetFramebufferHeightNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetTextureIdDefault")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlGetTextureIdDefaultNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)vt[670])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)vt[670])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetTextureIdDefault")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlGetTextureIdDefault()
		{
			uint ret = RlGetTextureIdDefaultNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetShaderIdDefault")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlGetShaderIdDefaultNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)vt[671])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)vt[671])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetShaderIdDefault")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlGetShaderIdDefault()
		{
			uint ret = RlGetShaderIdDefaultNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetShaderLocsDefault")]
		[return: NativeName(NativeNameType.Type, "int*")]
		internal static int* RlGetShaderLocsDefaultNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int*>)vt[672])();
			#else
			return (int*)((delegate* unmanaged[Cdecl]<nint>)vt[672])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetShaderLocsDefault")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public static int* RlGetShaderLocsDefault()
		{
			int* ret = RlGetShaderLocsDefaultNative();
			return ret;
		}

		/// <summary>
		/// Render batch management<br/>
		/// NOTE: rlgl provides a default render batch to behave like OpenGL 1.1 immediate mode<br/>
		/// but this render batch API is exposed in case of custom batches are required<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadRenderBatch")]
		[return: NativeName(NativeNameType.Type, "rlRenderBatch")]
		internal static RlRenderBatch RlLoadRenderBatchNative([NativeName(NativeNameType.Param, "numBuffers")] [NativeName(NativeNameType.Type, "int")] int numBuffers, [NativeName(NativeNameType.Param, "bufferElements")] [NativeName(NativeNameType.Type, "int")] int bufferElements)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, RlRenderBatch>)vt[673])(numBuffers, bufferElements);
			#else
			return (RlRenderBatch)((delegate* unmanaged[Cdecl]<int, int, RlRenderBatch>)vt[673])(numBuffers, bufferElements);
			#endif
		}

		/// <summary>
		/// Render batch management<br/>
		/// NOTE: rlgl provides a default render batch to behave like OpenGL 1.1 immediate mode<br/>
		/// but this render batch API is exposed in case of custom batches are required<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadRenderBatch")]
		[return: NativeName(NativeNameType.Type, "rlRenderBatch")]
		public static RlRenderBatch RlLoadRenderBatch([NativeName(NativeNameType.Param, "numBuffers")] [NativeName(NativeNameType.Type, "int")] int numBuffers, [NativeName(NativeNameType.Param, "bufferElements")] [NativeName(NativeNameType.Type, "int")] int bufferElements)
		{
			RlRenderBatch ret = RlLoadRenderBatchNative(numBuffers, bufferElements);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUnloadRenderBatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUnloadRenderBatchNative([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch")] RlRenderBatch batch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<RlRenderBatch, void>)vt[674])(batch);
			#else
			((delegate* unmanaged[Cdecl]<RlRenderBatch, void>)vt[674])(batch);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadRenderBatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadRenderBatch([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch")] RlRenderBatch batch)
		{
			RlUnloadRenderBatchNative(batch);
		}

		[NativeName(NativeNameType.Func, "rlDrawRenderBatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDrawRenderBatchNative([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch*")] RlRenderBatch* batch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<RlRenderBatch*, void>)vt[675])(batch);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[675])((nint)batch);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawRenderBatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawRenderBatch([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch*")] RlRenderBatch* batch)
		{
			RlDrawRenderBatchNative(batch);
		}

		[NativeName(NativeNameType.Func, "rlDrawRenderBatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawRenderBatch([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch*")] ref RlRenderBatch batch)
		{
			fixed (RlRenderBatch* pbatch = &batch)
			{
				RlDrawRenderBatchNative((RlRenderBatch*)pbatch);
			}
		}

		[NativeName(NativeNameType.Func, "rlSetRenderBatchActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetRenderBatchActiveNative([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch*")] RlRenderBatch* batch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<RlRenderBatch*, void>)vt[676])(batch);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[676])((nint)batch);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetRenderBatchActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetRenderBatchActive([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch*")] RlRenderBatch* batch)
		{
			RlSetRenderBatchActiveNative(batch);
		}

		[NativeName(NativeNameType.Func, "rlSetRenderBatchActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetRenderBatchActive([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch*")] ref RlRenderBatch batch)
		{
			fixed (RlRenderBatch* pbatch = &batch)
			{
				RlSetRenderBatchActiveNative((RlRenderBatch*)pbatch);
			}
		}

		[NativeName(NativeNameType.Func, "rlDrawRenderBatchActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDrawRenderBatchActiveNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[677])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[677])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawRenderBatchActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawRenderBatchActive()
		{
			RlDrawRenderBatchActiveNative();
		}

		[NativeName(NativeNameType.Func, "rlCheckRenderBatchLimit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte RlCheckRenderBatchLimitNative([NativeName(NativeNameType.Param, "vCount")] [NativeName(NativeNameType.Type, "int")] int vCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)vt[678])(vCount);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)vt[678])(vCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlCheckRenderBatchLimit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RlCheckRenderBatchLimit([NativeName(NativeNameType.Param, "vCount")] [NativeName(NativeNameType.Type, "int")] int vCount)
		{
			byte ret = RlCheckRenderBatchLimitNative(vCount);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "rlSetTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetTextureNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[679])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[679])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetTexture([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlSetTextureNative(id);
		}

		/// <summary>
		/// Vertex buffers management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadVertexArray")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadVertexArrayNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)vt[680])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)vt[680])();
			#endif
		}

		/// <summary>
		/// Vertex buffers management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadVertexArray")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadVertexArray()
		{
			uint ret = RlLoadVertexArrayNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlLoadVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadVertexBufferNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "dynamic")] [NativeName(NativeNameType.Type, "bool")] byte dynamic)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, byte, uint>)vt[681])(buffer, size, dynamic);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, byte, uint>)vt[681])((nint)buffer, size, dynamic);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadVertexBuffer([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "dynamic")] [NativeName(NativeNameType.Type, "bool")] bool dynamic)
		{
			uint ret = RlLoadVertexBufferNative(buffer, size, dynamic ? (byte)1 : (byte)0);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlLoadVertexBufferElement")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadVertexBufferElementNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "dynamic")] [NativeName(NativeNameType.Type, "bool")] byte dynamic)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, byte, uint>)vt[682])(buffer, size, dynamic);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, byte, uint>)vt[682])((nint)buffer, size, dynamic);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadVertexBufferElement")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadVertexBufferElement([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "dynamic")] [NativeName(NativeNameType.Type, "bool")] bool dynamic)
		{
			uint ret = RlLoadVertexBufferElementNative(buffer, size, dynamic ? (byte)1 : (byte)0);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUpdateVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUpdateVertexBufferNative([NativeName(NativeNameType.Param, "bufferId")] [NativeName(NativeNameType.Type, "unsigned int")] uint bufferId, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void*, int, int, void>)vt[683])(bufferId, data, dataSize, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, int, int, void>)vt[683])(bufferId, (nint)data, dataSize, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUpdateVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUpdateVertexBuffer([NativeName(NativeNameType.Param, "bufferId")] [NativeName(NativeNameType.Type, "unsigned int")] uint bufferId, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			RlUpdateVertexBufferNative(bufferId, data, dataSize, offset);
		}

		[NativeName(NativeNameType.Func, "rlUpdateVertexBufferElements")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUpdateVertexBufferElementsNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void*, int, int, void>)vt[684])(id, data, dataSize, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, int, int, void>)vt[684])(id, (nint)data, dataSize, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUpdateVertexBufferElements")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUpdateVertexBufferElements([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			RlUpdateVertexBufferElementsNative(id, data, dataSize, offset);
		}

		[NativeName(NativeNameType.Func, "rlUnloadVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUnloadVertexArrayNative([NativeName(NativeNameType.Param, "vaoId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vaoId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[685])(vaoId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[685])(vaoId);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadVertexArray([NativeName(NativeNameType.Param, "vaoId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vaoId)
		{
			RlUnloadVertexArrayNative(vaoId);
		}

		[NativeName(NativeNameType.Func, "rlUnloadVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUnloadVertexBufferNative([NativeName(NativeNameType.Param, "vboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vboId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[686])(vboId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[686])(vboId);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadVertexBuffer([NativeName(NativeNameType.Param, "vboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vboId)
		{
			RlUnloadVertexBufferNative(vboId);
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttribute")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetVertexAttributeNative([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "compSize")] [NativeName(NativeNameType.Type, "int")] int compSize, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type, [NativeName(NativeNameType.Param, "normalized")] [NativeName(NativeNameType.Type, "bool")] byte normalized, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, int, int, void>)vt[687])(index, compSize, type, normalized, stride, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, int, int, void>)vt[687])(index, compSize, type, normalized, stride, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttribute")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetVertexAttribute([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "compSize")] [NativeName(NativeNameType.Type, "int")] int compSize, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type, [NativeName(NativeNameType.Param, "normalized")] [NativeName(NativeNameType.Type, "bool")] bool normalized, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			RlSetVertexAttributeNative(index, compSize, type, normalized ? (byte)1 : (byte)0, stride, offset);
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttributeDivisor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetVertexAttributeDivisorNative([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "divisor")] [NativeName(NativeNameType.Type, "int")] int divisor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void>)vt[688])(index, divisor);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, void>)vt[688])(index, divisor);
			#endif
		}
	}
}
