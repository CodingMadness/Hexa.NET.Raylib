// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Raylib
{
	public unsafe partial class Raylib
	{

		[NativeName(NativeNameType.Func, "LoadSound")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		internal static Sound LoadSoundNative([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Sound>)vt[493])(fileName);
			#else
			return (Sound)((delegate* unmanaged[Cdecl]<nint, Sound>)vt[493])((nint)fileName);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadSound")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		public static Sound LoadSound([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			Sound ret = LoadSoundNative(fileName);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadSound")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		public static Sound LoadSound([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				Sound ret = LoadSoundNative((byte*)pfileName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadSound")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		public static Sound LoadSound([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				Sound ret = LoadSoundNative((byte*)pfileName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadSound")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		public static Sound LoadSound([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Sound ret = LoadSoundNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadSoundFromWave")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		internal static Sound LoadSoundFromWaveNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Wave, Sound>)vt[494])(wave);
			#else
			return (Sound)((delegate* unmanaged[Cdecl]<Wave, Sound>)vt[494])(wave);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadSoundFromWave")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		public static Sound LoadSoundFromWave([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			Sound ret = LoadSoundFromWaveNative(wave);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadSoundAlias")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		internal static Sound LoadSoundAliasNative([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "Sound")] Sound source)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Sound, Sound>)vt[495])(source);
			#else
			return (Sound)((delegate* unmanaged[Cdecl]<Sound, Sound>)vt[495])(source);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadSoundAlias")]
		[return: NativeName(NativeNameType.Type, "Sound")]
		public static Sound LoadSoundAlias([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "Sound")] Sound source)
		{
			Sound ret = LoadSoundAliasNative(source);
			return ret;
		}

		[NativeName(NativeNameType.Func, "IsSoundReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsSoundReadyNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Sound, byte>)vt[496])(sound);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Sound, byte>)vt[496])(sound);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsSoundReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsSoundReady([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			byte ret = IsSoundReadyNative(sound);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "UpdateSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateSoundNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "sampleCount")] [NativeName(NativeNameType.Type, "int")] int sampleCount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, void*, int, void>)vt[497])(sound, data, sampleCount);
			#else
			((delegate* unmanaged[Cdecl]<Sound, nint, int, void>)vt[497])(sound, (nint)data, sampleCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "UpdateSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateSound([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "sampleCount")] [NativeName(NativeNameType.Type, "int")] int sampleCount)
		{
			UpdateSoundNative(sound, data, sampleCount);
		}

		[NativeName(NativeNameType.Func, "UnloadWave")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadWaveNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Wave, void>)vt[498])(wave);
			#else
			((delegate* unmanaged[Cdecl]<Wave, void>)vt[498])(wave);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadWave")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadWave([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			UnloadWaveNative(wave);
		}

		[NativeName(NativeNameType.Func, "UnloadSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadSoundNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[499])(sound);
			#else
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[499])(sound);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadSound([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			UnloadSoundNative(sound);
		}

		[NativeName(NativeNameType.Func, "UnloadSoundAlias")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadSoundAliasNative([NativeName(NativeNameType.Param, "alias")] [NativeName(NativeNameType.Type, "Sound")] Sound alias)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[500])(alias);
			#else
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[500])(alias);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadSoundAlias")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadSoundAlias([NativeName(NativeNameType.Param, "alias")] [NativeName(NativeNameType.Type, "Sound")] Sound alias)
		{
			UnloadSoundAliasNative(alias);
		}

		[NativeName(NativeNameType.Func, "ExportWave")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ExportWaveNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Wave, byte*, byte>)vt[501])(wave, fileName);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Wave, nint, byte>)vt[501])(wave, (nint)fileName);
			#endif
		}

		[NativeName(NativeNameType.Func, "ExportWave")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWave([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			byte ret = ExportWaveNative(wave, fileName);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "ExportWave")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWave([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				byte ret = ExportWaveNative(wave, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportWave")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWave([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				byte ret = ExportWaveNative(wave, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportWave")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWave([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ExportWaveNative(wave, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "ExportWaveAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ExportWaveAsCodeNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Wave, byte*, byte>)vt[502])(wave, fileName);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Wave, nint, byte>)vt[502])(wave, (nint)fileName);
			#endif
		}

		[NativeName(NativeNameType.Func, "ExportWaveAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWaveAsCode([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			byte ret = ExportWaveAsCodeNative(wave, fileName);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "ExportWaveAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWaveAsCode([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				byte ret = ExportWaveAsCodeNative(wave, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportWaveAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWaveAsCode([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				byte ret = ExportWaveAsCodeNative(wave, (byte*)pfileName);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ExportWaveAsCode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ExportWaveAsCode([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave, [NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ExportWaveAsCodeNative(wave, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Wave/Sound management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "PlaySound")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PlaySoundNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[503])(sound);
			#else
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[503])(sound);
			#endif
		}

		/// <summary>
		/// Wave/Sound management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "PlaySound")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlaySound([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			PlaySoundNative(sound);
		}

		[NativeName(NativeNameType.Func, "StopSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void StopSoundNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[504])(sound);
			#else
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[504])(sound);
			#endif
		}

		[NativeName(NativeNameType.Func, "StopSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void StopSound([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			StopSoundNative(sound);
		}

		[NativeName(NativeNameType.Func, "PauseSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PauseSoundNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[505])(sound);
			#else
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[505])(sound);
			#endif
		}

		[NativeName(NativeNameType.Func, "PauseSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PauseSound([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			PauseSoundNative(sound);
		}

		[NativeName(NativeNameType.Func, "ResumeSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ResumeSoundNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[506])(sound);
			#else
			((delegate* unmanaged[Cdecl]<Sound, void>)vt[506])(sound);
			#endif
		}

		[NativeName(NativeNameType.Func, "ResumeSound")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ResumeSound([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			ResumeSoundNative(sound);
		}

		[NativeName(NativeNameType.Func, "IsSoundPlaying")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsSoundPlayingNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Sound, byte>)vt[507])(sound);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Sound, byte>)vt[507])(sound);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsSoundPlaying")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsSoundPlaying([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound)
		{
			byte ret = IsSoundPlayingNative(sound);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "SetSoundVolume")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetSoundVolumeNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "volume")] [NativeName(NativeNameType.Type, "float")] float volume)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, float, void>)vt[508])(sound, volume);
			#else
			((delegate* unmanaged[Cdecl]<Sound, float, void>)vt[508])(sound, volume);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetSoundVolume")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetSoundVolume([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "volume")] [NativeName(NativeNameType.Type, "float")] float volume)
		{
			SetSoundVolumeNative(sound, volume);
		}

		[NativeName(NativeNameType.Func, "SetSoundPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetSoundPitchNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "float")] float pitch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, float, void>)vt[509])(sound, pitch);
			#else
			((delegate* unmanaged[Cdecl]<Sound, float, void>)vt[509])(sound, pitch);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetSoundPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetSoundPitch([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "float")] float pitch)
		{
			SetSoundPitchNative(sound, pitch);
		}

		[NativeName(NativeNameType.Func, "SetSoundPan")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetSoundPanNative([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "pan")] [NativeName(NativeNameType.Type, "float")] float pan)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Sound, float, void>)vt[510])(sound, pan);
			#else
			((delegate* unmanaged[Cdecl]<Sound, float, void>)vt[510])(sound, pan);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetSoundPan")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetSoundPan([NativeName(NativeNameType.Param, "sound")] [NativeName(NativeNameType.Type, "Sound")] Sound sound, [NativeName(NativeNameType.Param, "pan")] [NativeName(NativeNameType.Type, "float")] float pan)
		{
			SetSoundPanNative(sound, pan);
		}

		[NativeName(NativeNameType.Func, "WaveCopy")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		internal static Wave WaveCopyNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Wave, Wave>)vt[511])(wave);
			#else
			return (Wave)((delegate* unmanaged[Cdecl]<Wave, Wave>)vt[511])(wave);
			#endif
		}

		[NativeName(NativeNameType.Func, "WaveCopy")]
		[return: NativeName(NativeNameType.Type, "Wave")]
		public static Wave WaveCopy([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			Wave ret = WaveCopyNative(wave);
			return ret;
		}

		[NativeName(NativeNameType.Func, "WaveCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void WaveCropNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave*")] Wave* wave, [NativeName(NativeNameType.Param, "initSample")] [NativeName(NativeNameType.Type, "int")] int initSample, [NativeName(NativeNameType.Param, "finalSample")] [NativeName(NativeNameType.Type, "int")] int finalSample)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Wave*, int, int, void>)vt[512])(wave, initSample, finalSample);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)vt[512])((nint)wave, initSample, finalSample);
			#endif
		}

		[NativeName(NativeNameType.Func, "WaveCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WaveCrop([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave*")] Wave* wave, [NativeName(NativeNameType.Param, "initSample")] [NativeName(NativeNameType.Type, "int")] int initSample, [NativeName(NativeNameType.Param, "finalSample")] [NativeName(NativeNameType.Type, "int")] int finalSample)
		{
			WaveCropNative(wave, initSample, finalSample);
		}

		[NativeName(NativeNameType.Func, "WaveCrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WaveCrop([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave*")] ref Wave wave, [NativeName(NativeNameType.Param, "initSample")] [NativeName(NativeNameType.Type, "int")] int initSample, [NativeName(NativeNameType.Param, "finalSample")] [NativeName(NativeNameType.Type, "int")] int finalSample)
		{
			fixed (Wave* pwave = &wave)
			{
				WaveCropNative((Wave*)pwave, initSample, finalSample);
			}
		}

		[NativeName(NativeNameType.Func, "WaveFormat")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void WaveFormatNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave*")] Wave* wave, [NativeName(NativeNameType.Param, "sampleRate")] [NativeName(NativeNameType.Type, "int")] int sampleRate, [NativeName(NativeNameType.Param, "sampleSize")] [NativeName(NativeNameType.Type, "int")] int sampleSize, [NativeName(NativeNameType.Param, "channels")] [NativeName(NativeNameType.Type, "int")] int channels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Wave*, int, int, int, void>)vt[513])(wave, sampleRate, sampleSize, channels);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, void>)vt[513])((nint)wave, sampleRate, sampleSize, channels);
			#endif
		}

		[NativeName(NativeNameType.Func, "WaveFormat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WaveFormat([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave*")] Wave* wave, [NativeName(NativeNameType.Param, "sampleRate")] [NativeName(NativeNameType.Type, "int")] int sampleRate, [NativeName(NativeNameType.Param, "sampleSize")] [NativeName(NativeNameType.Type, "int")] int sampleSize, [NativeName(NativeNameType.Param, "channels")] [NativeName(NativeNameType.Type, "int")] int channels)
		{
			WaveFormatNative(wave, sampleRate, sampleSize, channels);
		}

		[NativeName(NativeNameType.Func, "WaveFormat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WaveFormat([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave*")] ref Wave wave, [NativeName(NativeNameType.Param, "sampleRate")] [NativeName(NativeNameType.Type, "int")] int sampleRate, [NativeName(NativeNameType.Param, "sampleSize")] [NativeName(NativeNameType.Type, "int")] int sampleSize, [NativeName(NativeNameType.Param, "channels")] [NativeName(NativeNameType.Type, "int")] int channels)
		{
			fixed (Wave* pwave = &wave)
			{
				WaveFormatNative((Wave*)pwave, sampleRate, sampleSize, channels);
			}
		}

		[NativeName(NativeNameType.Func, "LoadWaveSamples")]
		[return: NativeName(NativeNameType.Type, "float*")]
		internal static float* LoadWaveSamplesNative([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Wave, float*>)vt[514])(wave);
			#else
			return (float*)((delegate* unmanaged[Cdecl]<Wave, nint>)vt[514])(wave);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadWaveSamples")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadWaveSamples([NativeName(NativeNameType.Param, "wave")] [NativeName(NativeNameType.Type, "Wave")] Wave wave)
		{
			float* ret = LoadWaveSamplesNative(wave);
			return ret;
		}

		[NativeName(NativeNameType.Func, "UnloadWaveSamples")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadWaveSamplesNative([NativeName(NativeNameType.Param, "samples")] [NativeName(NativeNameType.Type, "float*")] float* samples)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)vt[515])(samples);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[515])((nint)samples);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadWaveSamples")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadWaveSamples([NativeName(NativeNameType.Param, "samples")] [NativeName(NativeNameType.Type, "float*")] float* samples)
		{
			UnloadWaveSamplesNative(samples);
		}

		[NativeName(NativeNameType.Func, "UnloadWaveSamples")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadWaveSamples([NativeName(NativeNameType.Param, "samples")] [NativeName(NativeNameType.Type, "float*")] ref float samples)
		{
			fixed (float* psamples = &samples)
			{
				UnloadWaveSamplesNative((float*)psamples);
			}
		}

		/// <summary>
		/// Music management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMusicStream")]
		[return: NativeName(NativeNameType.Type, "Music")]
		internal static Music LoadMusicStreamNative([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Music>)vt[516])(fileName);
			#else
			return (Music)((delegate* unmanaged[Cdecl]<nint, Music>)vt[516])((nint)fileName);
			#endif
		}

		/// <summary>
		/// Music management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMusicStream")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStream([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] byte* fileName)
		{
			Music ret = LoadMusicStreamNative(fileName);
			return ret;
		}

		/// <summary>
		/// Music management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMusicStream")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStream([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				Music ret = LoadMusicStreamNative((byte*)pfileName);
				return ret;
			}
		}

		/// <summary>
		/// Music management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMusicStream")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStream([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileName)
		{
			fixed (byte* pfileName = fileName)
			{
				Music ret = LoadMusicStreamNative((byte*)pfileName);
				return ret;
			}
		}

		/// <summary>
		/// Music management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadMusicStream")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStream([NativeName(NativeNameType.Param, "fileName")] [NativeName(NativeNameType.Type, "const char*")] string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Music ret = LoadMusicStreamNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		internal static Music LoadMusicStreamFromMemoryNative([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] byte* fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int, Music>)vt[517])(fileType, data, dataSize);
			#else
			return (Music)((delegate* unmanaged[Cdecl]<nint, nint, int, Music>)vt[517])((nint)fileType, (nint)data, dataSize);
			#endif
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] byte* fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			Music ret = LoadMusicStreamFromMemoryNative(fileType, data, dataSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = &fileType)
			{
				Music ret = LoadMusicStreamFromMemoryNative((byte*)pfileType, data, dataSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = fileType)
			{
				Music ret = LoadMusicStreamFromMemoryNative((byte*)pfileType, data, dataSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] string fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Music ret = LoadMusicStreamFromMemoryNative(pStr0, data, dataSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] byte* fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pdata = &data)
			{
				Music ret = LoadMusicStreamFromMemoryNative(fileType, (byte*)pdata, dataSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ref byte fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = &fileType)
			{
				fixed (byte* pdata = &data)
				{
					Music ret = LoadMusicStreamFromMemoryNative((byte*)pfileType, (byte*)pdata, dataSize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			fixed (byte* pfileType = fileType)
			{
				fixed (byte* pdata = &data)
				{
					Music ret = LoadMusicStreamFromMemoryNative((byte*)pfileType, (byte*)pdata, dataSize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadMusicStreamFromMemory")]
		[return: NativeName(NativeNameType.Type, "Music")]
		public static Music LoadMusicStreamFromMemory([NativeName(NativeNameType.Param, "fileType")] [NativeName(NativeNameType.Type, "const char*")] string fileType, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileType != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileType, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pdata = &data)
			{
				Music ret = LoadMusicStreamFromMemoryNative(pStr0, (byte*)pdata, dataSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "IsMusicReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsMusicReadyNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Music, byte>)vt[518])(music);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Music, byte>)vt[518])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsMusicReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsMusicReady([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			byte ret = IsMusicReadyNative(music);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "UnloadMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadMusicStreamNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, void>)vt[519])(music);
			#else
			((delegate* unmanaged[Cdecl]<Music, void>)vt[519])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadMusicStream([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			UnloadMusicStreamNative(music);
		}

		[NativeName(NativeNameType.Func, "PlayMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PlayMusicStreamNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, void>)vt[520])(music);
			#else
			((delegate* unmanaged[Cdecl]<Music, void>)vt[520])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "PlayMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlayMusicStream([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			PlayMusicStreamNative(music);
		}

		[NativeName(NativeNameType.Func, "IsMusicStreamPlaying")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsMusicStreamPlayingNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Music, byte>)vt[521])(music);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Music, byte>)vt[521])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsMusicStreamPlaying")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsMusicStreamPlaying([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			byte ret = IsMusicStreamPlayingNative(music);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "UpdateMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateMusicStreamNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, void>)vt[522])(music);
			#else
			((delegate* unmanaged[Cdecl]<Music, void>)vt[522])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "UpdateMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateMusicStream([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			UpdateMusicStreamNative(music);
		}

		[NativeName(NativeNameType.Func, "StopMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void StopMusicStreamNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, void>)vt[523])(music);
			#else
			((delegate* unmanaged[Cdecl]<Music, void>)vt[523])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "StopMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void StopMusicStream([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			StopMusicStreamNative(music);
		}

		[NativeName(NativeNameType.Func, "PauseMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PauseMusicStreamNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, void>)vt[524])(music);
			#else
			((delegate* unmanaged[Cdecl]<Music, void>)vt[524])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "PauseMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PauseMusicStream([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			PauseMusicStreamNative(music);
		}

		[NativeName(NativeNameType.Func, "ResumeMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ResumeMusicStreamNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, void>)vt[525])(music);
			#else
			((delegate* unmanaged[Cdecl]<Music, void>)vt[525])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "ResumeMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ResumeMusicStream([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			ResumeMusicStreamNative(music);
		}

		[NativeName(NativeNameType.Func, "SeekMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SeekMusicStreamNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "float")] float position)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[526])(music, position);
			#else
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[526])(music, position);
			#endif
		}

		[NativeName(NativeNameType.Func, "SeekMusicStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeekMusicStream([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "position")] [NativeName(NativeNameType.Type, "float")] float position)
		{
			SeekMusicStreamNative(music, position);
		}

		[NativeName(NativeNameType.Func, "SetMusicVolume")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetMusicVolumeNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "volume")] [NativeName(NativeNameType.Type, "float")] float volume)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[527])(music, volume);
			#else
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[527])(music, volume);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetMusicVolume")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetMusicVolume([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "volume")] [NativeName(NativeNameType.Type, "float")] float volume)
		{
			SetMusicVolumeNative(music, volume);
		}

		[NativeName(NativeNameType.Func, "SetMusicPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetMusicPitchNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "float")] float pitch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[528])(music, pitch);
			#else
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[528])(music, pitch);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetMusicPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetMusicPitch([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "float")] float pitch)
		{
			SetMusicPitchNative(music, pitch);
		}

		[NativeName(NativeNameType.Func, "SetMusicPan")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetMusicPanNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "pan")] [NativeName(NativeNameType.Type, "float")] float pan)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[529])(music, pan);
			#else
			((delegate* unmanaged[Cdecl]<Music, float, void>)vt[529])(music, pan);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetMusicPan")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetMusicPan([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music, [NativeName(NativeNameType.Param, "pan")] [NativeName(NativeNameType.Type, "float")] float pan)
		{
			SetMusicPanNative(music, pan);
		}

		[NativeName(NativeNameType.Func, "GetMusicTimeLength")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GetMusicTimeLengthNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Music, float>)vt[530])(music);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Music, float>)vt[530])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetMusicTimeLength")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetMusicTimeLength([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			float ret = GetMusicTimeLengthNative(music);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetMusicTimePlayed")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GetMusicTimePlayedNative([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Music, float>)vt[531])(music);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Music, float>)vt[531])(music);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetMusicTimePlayed")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetMusicTimePlayed([NativeName(NativeNameType.Param, "music")] [NativeName(NativeNameType.Type, "Music")] Music music)
		{
			float ret = GetMusicTimePlayedNative(music);
			return ret;
		}

		/// <summary>
		/// AudioStream management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadAudioStream")]
		[return: NativeName(NativeNameType.Type, "AudioStream")]
		internal static AudioStream LoadAudioStreamNative([NativeName(NativeNameType.Param, "sampleRate")] [NativeName(NativeNameType.Type, "unsigned int")] uint sampleRate, [NativeName(NativeNameType.Param, "sampleSize")] [NativeName(NativeNameType.Type, "unsigned int")] uint sampleSize, [NativeName(NativeNameType.Param, "channels")] [NativeName(NativeNameType.Type, "unsigned int")] uint channels)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint, uint, AudioStream>)vt[532])(sampleRate, sampleSize, channels);
			#else
			return (AudioStream)((delegate* unmanaged[Cdecl]<uint, uint, uint, AudioStream>)vt[532])(sampleRate, sampleSize, channels);
			#endif
		}

		/// <summary>
		/// AudioStream management functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "LoadAudioStream")]
		[return: NativeName(NativeNameType.Type, "AudioStream")]
		public static AudioStream LoadAudioStream([NativeName(NativeNameType.Param, "sampleRate")] [NativeName(NativeNameType.Type, "unsigned int")] uint sampleRate, [NativeName(NativeNameType.Param, "sampleSize")] [NativeName(NativeNameType.Type, "unsigned int")] uint sampleSize, [NativeName(NativeNameType.Param, "channels")] [NativeName(NativeNameType.Type, "unsigned int")] uint channels)
		{
			AudioStream ret = LoadAudioStreamNative(sampleRate, sampleSize, channels);
			return ret;
		}

		[NativeName(NativeNameType.Func, "IsAudioStreamReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsAudioStreamReadyNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<AudioStream, byte>)vt[533])(stream);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<AudioStream, byte>)vt[533])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsAudioStreamReady")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsAudioStreamReady([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			byte ret = IsAudioStreamReadyNative(stream);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "UnloadAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnloadAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[534])(stream);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[534])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "UnloadAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnloadAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			UnloadAudioStreamNative(stream);
		}

		[NativeName(NativeNameType.Func, "UpdateAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "frameCount")] [NativeName(NativeNameType.Type, "int")] int frameCount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, void*, int, void>)vt[535])(stream, data, frameCount);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, nint, int, void>)vt[535])(stream, (nint)data, frameCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "UpdateAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "frameCount")] [NativeName(NativeNameType.Type, "int")] int frameCount)
		{
			UpdateAudioStreamNative(stream, data, frameCount);
		}

		[NativeName(NativeNameType.Func, "IsAudioStreamProcessed")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsAudioStreamProcessedNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<AudioStream, byte>)vt[536])(stream);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<AudioStream, byte>)vt[536])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsAudioStreamProcessed")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsAudioStreamProcessed([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			byte ret = IsAudioStreamProcessedNative(stream);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "PlayAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PlayAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[537])(stream);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[537])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "PlayAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlayAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			PlayAudioStreamNative(stream);
		}

		[NativeName(NativeNameType.Func, "PauseAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PauseAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[538])(stream);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[538])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "PauseAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PauseAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			PauseAudioStreamNative(stream);
		}

		[NativeName(NativeNameType.Func, "ResumeAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ResumeAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[539])(stream);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[539])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "ResumeAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ResumeAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			ResumeAudioStreamNative(stream);
		}

		[NativeName(NativeNameType.Func, "IsAudioStreamPlaying")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsAudioStreamPlayingNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<AudioStream, byte>)vt[540])(stream);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<AudioStream, byte>)vt[540])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "IsAudioStreamPlaying")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsAudioStreamPlaying([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			byte ret = IsAudioStreamPlayingNative(stream);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "StopAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void StopAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[541])(stream);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, void>)vt[541])(stream);
			#endif
		}

		[NativeName(NativeNameType.Func, "StopAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void StopAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream)
		{
			StopAudioStreamNative(stream);
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamVolume")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetAudioStreamVolumeNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "volume")] [NativeName(NativeNameType.Type, "float")] float volume)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, float, void>)vt[542])(stream, volume);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, float, void>)vt[542])(stream, volume);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamVolume")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAudioStreamVolume([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "volume")] [NativeName(NativeNameType.Type, "float")] float volume)
		{
			SetAudioStreamVolumeNative(stream, volume);
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetAudioStreamPitchNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "float")] float pitch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, float, void>)vt[543])(stream, pitch);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, float, void>)vt[543])(stream, pitch);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAudioStreamPitch([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "float")] float pitch)
		{
			SetAudioStreamPitchNative(stream, pitch);
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamPan")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetAudioStreamPanNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "pan")] [NativeName(NativeNameType.Type, "float")] float pan)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, float, void>)vt[544])(stream, pan);
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, float, void>)vt[544])(stream, pan);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamPan")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAudioStreamPan([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "pan")] [NativeName(NativeNameType.Type, "float")] float pan)
		{
			SetAudioStreamPanNative(stream, pan);
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamBufferSizeDefault")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetAudioStreamBufferSizeDefaultNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[545])(size);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[545])(size);
			#endif
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamBufferSizeDefault")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAudioStreamBufferSizeDefault([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			SetAudioStreamBufferSizeDefaultNative(size);
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamCallback")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetAudioStreamCallbackNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback callback)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, delegate*<void*, uint, void>, void>)vt[546])(stream, (delegate*<void*, uint, void>)Utils.GetFunctionPointerForDelegate(callback));
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, nint, void>)vt[546])(stream, (nint)Utils.GetFunctionPointerForDelegate(callback));
			#endif
		}

		[NativeName(NativeNameType.Func, "SetAudioStreamCallback")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAudioStreamCallback([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback callback)
		{
			SetAudioStreamCallbackNative(stream, callback);
		}

		[NativeName(NativeNameType.Func, "AttachAudioStreamProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AttachAudioStreamProcessorNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, delegate*<void*, uint, void>, void>)vt[547])(stream, (delegate*<void*, uint, void>)Utils.GetFunctionPointerForDelegate(processor));
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, nint, void>)vt[547])(stream, (nint)Utils.GetFunctionPointerForDelegate(processor));
			#endif
		}

		[NativeName(NativeNameType.Func, "AttachAudioStreamProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AttachAudioStreamProcessor([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			AttachAudioStreamProcessorNative(stream, processor);
		}

		[NativeName(NativeNameType.Func, "DetachAudioStreamProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DetachAudioStreamProcessorNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<AudioStream, delegate*<void*, uint, void>, void>)vt[548])(stream, (delegate*<void*, uint, void>)Utils.GetFunctionPointerForDelegate(processor));
			#else
			((delegate* unmanaged[Cdecl]<AudioStream, nint, void>)vt[548])(stream, (nint)Utils.GetFunctionPointerForDelegate(processor));
			#endif
		}

		[NativeName(NativeNameType.Func, "DetachAudioStreamProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DetachAudioStreamProcessor([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "AudioStream")] AudioStream stream, [NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			DetachAudioStreamProcessorNative(stream, processor);
		}

		[NativeName(NativeNameType.Func, "AttachAudioMixedProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AttachAudioMixedProcessorNative([NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<void*, uint, void>, void>)vt[549])((delegate*<void*, uint, void>)Utils.GetFunctionPointerForDelegate(processor));
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[549])((nint)Utils.GetFunctionPointerForDelegate(processor));
			#endif
		}

		[NativeName(NativeNameType.Func, "AttachAudioMixedProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AttachAudioMixedProcessor([NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			AttachAudioMixedProcessorNative(processor);
		}

		[NativeName(NativeNameType.Func, "DetachAudioMixedProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DetachAudioMixedProcessorNative([NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<void*, uint, void>, void>)vt[550])((delegate*<void*, uint, void>)Utils.GetFunctionPointerForDelegate(processor));
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[550])((nint)Utils.GetFunctionPointerForDelegate(processor));
			#endif
		}

		[NativeName(NativeNameType.Func, "DetachAudioMixedProcessor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DetachAudioMixedProcessor([NativeName(NativeNameType.Param, "processor")] [NativeName(NativeNameType.Type, "AudioCallback")] AudioCallback processor)
		{
			DetachAudioMixedProcessorNative(processor);
		}

		[NativeName(NativeNameType.Func, "GetCameraForward")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		internal static Vector3 GetCameraForwardNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Camera3D*, Vector3>)vt[551])(camera);
			#else
			return (Vector3)((delegate* unmanaged[Cdecl]<nint, Vector3>)vt[551])((nint)camera);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetCameraForward")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		public static Vector3 GetCameraForward([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			Vector3 ret = GetCameraForwardNative(camera);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCameraForward")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		public static Vector3 GetCameraForward([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				Vector3 ret = GetCameraForwardNative((Camera3D*)pcamera);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCameraUp")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		internal static Vector3 GetCameraUpNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Camera3D*, Vector3>)vt[552])(camera);
			#else
			return (Vector3)((delegate* unmanaged[Cdecl]<nint, Vector3>)vt[552])((nint)camera);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetCameraUp")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		public static Vector3 GetCameraUp([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			Vector3 ret = GetCameraUpNative(camera);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCameraUp")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		public static Vector3 GetCameraUp([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				Vector3 ret = GetCameraUpNative((Camera3D*)pcamera);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCameraRight")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		internal static Vector3 GetCameraRightNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Camera3D*, Vector3>)vt[553])(camera);
			#else
			return (Vector3)((delegate* unmanaged[Cdecl]<nint, Vector3>)vt[553])((nint)camera);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetCameraRight")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		public static Vector3 GetCameraRight([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			Vector3 ret = GetCameraRightNative(camera);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCameraRight")]
		[return: NativeName(NativeNameType.Type, "Vector3")]
		public static Vector3 GetCameraRight([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				Vector3 ret = GetCameraRightNative((Camera3D*)pcamera);
				return ret;
			}
		}

		/// <summary>
		/// Camera movement<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CameraMoveForward")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CameraMoveForwardNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance, [NativeName(NativeNameType.Param, "moveInWorldPlane")] [NativeName(NativeNameType.Type, "bool")] byte moveInWorldPlane)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Camera3D*, float, byte, void>)vt[554])(camera, distance, moveInWorldPlane);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, byte, void>)vt[554])((nint)camera, distance, moveInWorldPlane);
			#endif
		}

		/// <summary>
		/// Camera movement<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CameraMoveForward")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveForward([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance, [NativeName(NativeNameType.Param, "moveInWorldPlane")] [NativeName(NativeNameType.Type, "bool")] bool moveInWorldPlane)
		{
			CameraMoveForwardNative(camera, distance, moveInWorldPlane ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Camera movement<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CameraMoveForward")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveForward([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance, [NativeName(NativeNameType.Param, "moveInWorldPlane")] [NativeName(NativeNameType.Type, "bool")] bool moveInWorldPlane)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				CameraMoveForwardNative((Camera3D*)pcamera, distance, moveInWorldPlane ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "CameraMoveUp")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CameraMoveUpNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Camera3D*, float, void>)vt[555])(camera, distance);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[555])((nint)camera, distance);
			#endif
		}

		[NativeName(NativeNameType.Func, "CameraMoveUp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveUp([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance)
		{
			CameraMoveUpNative(camera, distance);
		}

		[NativeName(NativeNameType.Func, "CameraMoveUp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveUp([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				CameraMoveUpNative((Camera3D*)pcamera, distance);
			}
		}

		[NativeName(NativeNameType.Func, "CameraMoveRight")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CameraMoveRightNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance, [NativeName(NativeNameType.Param, "moveInWorldPlane")] [NativeName(NativeNameType.Type, "bool")] byte moveInWorldPlane)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Camera3D*, float, byte, void>)vt[556])(camera, distance, moveInWorldPlane);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, byte, void>)vt[556])((nint)camera, distance, moveInWorldPlane);
			#endif
		}

		[NativeName(NativeNameType.Func, "CameraMoveRight")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveRight([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance, [NativeName(NativeNameType.Param, "moveInWorldPlane")] [NativeName(NativeNameType.Type, "bool")] bool moveInWorldPlane)
		{
			CameraMoveRightNative(camera, distance, moveInWorldPlane ? (byte)1 : (byte)0);
		}

		[NativeName(NativeNameType.Func, "CameraMoveRight")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveRight([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "distance")] [NativeName(NativeNameType.Type, "float")] float distance, [NativeName(NativeNameType.Param, "moveInWorldPlane")] [NativeName(NativeNameType.Type, "bool")] bool moveInWorldPlane)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				CameraMoveRightNative((Camera3D*)pcamera, distance, moveInWorldPlane ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "CameraMoveToTarget")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CameraMoveToTargetNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "delta")] [NativeName(NativeNameType.Type, "float")] float delta)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Camera3D*, float, void>)vt[557])(camera, delta);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[557])((nint)camera, delta);
			#endif
		}

		[NativeName(NativeNameType.Func, "CameraMoveToTarget")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveToTarget([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "delta")] [NativeName(NativeNameType.Type, "float")] float delta)
		{
			CameraMoveToTargetNative(camera, delta);
		}

		[NativeName(NativeNameType.Func, "CameraMoveToTarget")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraMoveToTarget([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "delta")] [NativeName(NativeNameType.Type, "float")] float delta)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				CameraMoveToTargetNative((Camera3D*)pcamera, delta);
			}
		}

		/// <summary>
		/// Camera rotation<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CameraYaw")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CameraYawNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "rotateAroundTarget")] [NativeName(NativeNameType.Type, "bool")] byte rotateAroundTarget)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Camera3D*, float, byte, void>)vt[558])(camera, angle, rotateAroundTarget);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, byte, void>)vt[558])((nint)camera, angle, rotateAroundTarget);
			#endif
		}

		/// <summary>
		/// Camera rotation<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CameraYaw")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraYaw([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "rotateAroundTarget")] [NativeName(NativeNameType.Type, "bool")] bool rotateAroundTarget)
		{
			CameraYawNative(camera, angle, rotateAroundTarget ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Camera rotation<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "CameraYaw")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraYaw([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "rotateAroundTarget")] [NativeName(NativeNameType.Type, "bool")] bool rotateAroundTarget)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				CameraYawNative((Camera3D*)pcamera, angle, rotateAroundTarget ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "CameraPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CameraPitchNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "lockView")] [NativeName(NativeNameType.Type, "bool")] byte lockView, [NativeName(NativeNameType.Param, "rotateAroundTarget")] [NativeName(NativeNameType.Type, "bool")] byte rotateAroundTarget, [NativeName(NativeNameType.Param, "rotateUp")] [NativeName(NativeNameType.Type, "bool")] byte rotateUp)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Camera3D*, float, byte, byte, byte, void>)vt[559])(camera, angle, lockView, rotateAroundTarget, rotateUp);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, byte, byte, byte, void>)vt[559])((nint)camera, angle, lockView, rotateAroundTarget, rotateUp);
			#endif
		}

		[NativeName(NativeNameType.Func, "CameraPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraPitch([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "lockView")] [NativeName(NativeNameType.Type, "bool")] bool lockView, [NativeName(NativeNameType.Param, "rotateAroundTarget")] [NativeName(NativeNameType.Type, "bool")] bool rotateAroundTarget, [NativeName(NativeNameType.Param, "rotateUp")] [NativeName(NativeNameType.Type, "bool")] bool rotateUp)
		{
			CameraPitchNative(camera, angle, lockView ? (byte)1 : (byte)0, rotateAroundTarget ? (byte)1 : (byte)0, rotateUp ? (byte)1 : (byte)0);
		}

		[NativeName(NativeNameType.Func, "CameraPitch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraPitch([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "lockView")] [NativeName(NativeNameType.Type, "bool")] bool lockView, [NativeName(NativeNameType.Param, "rotateAroundTarget")] [NativeName(NativeNameType.Type, "bool")] bool rotateAroundTarget, [NativeName(NativeNameType.Param, "rotateUp")] [NativeName(NativeNameType.Type, "bool")] bool rotateUp)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				CameraPitchNative((Camera3D*)pcamera, angle, lockView ? (byte)1 : (byte)0, rotateAroundTarget ? (byte)1 : (byte)0, rotateUp ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "CameraRoll")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CameraRollNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Camera3D*, float, void>)vt[560])(camera, angle);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[560])((nint)camera, angle);
			#endif
		}

		[NativeName(NativeNameType.Func, "CameraRoll")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraRoll([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle)
		{
			CameraRollNative(camera, angle);
		}

		[NativeName(NativeNameType.Func, "CameraRoll")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CameraRoll([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				CameraRollNative((Camera3D*)pcamera, angle);
			}
		}

		[NativeName(NativeNameType.Func, "GetCameraViewMatrix")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		internal static Matrix4x4 GetCameraViewMatrixNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Camera3D*, Matrix4x4>)vt[561])(camera);
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<nint, Matrix4x4>)vt[561])((nint)camera);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetCameraViewMatrix")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 GetCameraViewMatrix([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera)
		{
			Matrix4x4 ret = GetCameraViewMatrixNative(camera);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCameraViewMatrix")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 GetCameraViewMatrix([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				Matrix4x4 ret = GetCameraViewMatrixNative((Camera3D*)pcamera);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCameraProjectionMatrix")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		internal static Matrix4x4 GetCameraProjectionMatrixNative([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "aspect")] [NativeName(NativeNameType.Type, "float")] float aspect)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Camera3D*, float, Matrix4x4>)vt[562])(camera, aspect);
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<nint, float, Matrix4x4>)vt[562])((nint)camera, aspect);
			#endif
		}

		[NativeName(NativeNameType.Func, "GetCameraProjectionMatrix")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 GetCameraProjectionMatrix([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] Camera3D* camera, [NativeName(NativeNameType.Param, "aspect")] [NativeName(NativeNameType.Type, "float")] float aspect)
		{
			Matrix4x4 ret = GetCameraProjectionMatrixNative(camera, aspect);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCameraProjectionMatrix")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 GetCameraProjectionMatrix([NativeName(NativeNameType.Param, "camera")] [NativeName(NativeNameType.Type, "Camera*")] ref Camera3D camera, [NativeName(NativeNameType.Param, "aspect")] [NativeName(NativeNameType.Type, "float")] float aspect)
		{
			fixed (Camera3D* pcamera = &camera)
			{
				Matrix4x4 ret = GetCameraProjectionMatrixNative((Camera3D*)pcamera, aspect);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ProcessGestureEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ProcessGestureEventNative([NativeName(NativeNameType.Param, "event")] [NativeName(NativeNameType.Type, "GestureEvent")] GestureEvent evnt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GestureEvent, void>)vt[563])(evnt);
			#else
			((delegate* unmanaged[Cdecl]<GestureEvent, void>)vt[563])(evnt);
			#endif
		}

		[NativeName(NativeNameType.Func, "ProcessGestureEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ProcessGestureEvent([NativeName(NativeNameType.Param, "event")] [NativeName(NativeNameType.Type, "GestureEvent")] GestureEvent evnt)
		{
			ProcessGestureEventNative(evnt);
		}

		[NativeName(NativeNameType.Func, "UpdateGestures")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateGesturesNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[564])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[564])();
			#endif
		}

		[NativeName(NativeNameType.Func, "UpdateGestures")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateGestures()
		{
			UpdateGesturesNative();
		}

		[NativeName(NativeNameType.Func, "rlMatrixMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlMatrixModeNative([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[565])(mode);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[565])(mode);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlMatrixMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlMatrixMode([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			RlMatrixModeNative(mode);
		}

		[NativeName(NativeNameType.Func, "rlPushMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlPushMatrixNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[566])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[566])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlPushMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlPushMatrix()
		{
			RlPushMatrixNative();
		}

		[NativeName(NativeNameType.Func, "rlPopMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlPopMatrixNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[567])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[567])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlPopMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlPopMatrix()
		{
			RlPopMatrixNative();
		}

		[NativeName(NativeNameType.Func, "rlLoadIdentity")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlLoadIdentityNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[568])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[568])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadIdentity")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlLoadIdentity()
		{
			RlLoadIdentityNative();
		}

		[NativeName(NativeNameType.Func, "rlTranslatef")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlTranslatefNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[569])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[569])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlTranslatef")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlTranslatef([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			RlTranslatefNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "rlRotatef")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlRotatefNative([NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vt[570])(angle, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vt[570])(angle, x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlRotatef")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlRotatef([NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			RlRotatefNative(angle, x, y, z);
		}

		[NativeName(NativeNameType.Func, "rlScalef")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlScalefNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[571])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[571])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlScalef")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlScalef([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			RlScalefNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "rlMultMatrixf")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlMultMatrixfNative([NativeName(NativeNameType.Param, "matf")] [NativeName(NativeNameType.Type, "const float*")] float* matf)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)vt[572])(matf);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[572])((nint)matf);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlMultMatrixf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlMultMatrixf([NativeName(NativeNameType.Param, "matf")] [NativeName(NativeNameType.Type, "const float*")] float* matf)
		{
			RlMultMatrixfNative(matf);
		}

		[NativeName(NativeNameType.Func, "rlMultMatrixf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlMultMatrixf([NativeName(NativeNameType.Param, "matf")] [NativeName(NativeNameType.Type, "const float*")] ref float matf)
		{
			fixed (float* pmatf = &matf)
			{
				RlMultMatrixfNative((float*)pmatf);
			}
		}

		[NativeName(NativeNameType.Func, "rlFrustum")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlFrustumNative([NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "double")] double left, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "double")] double right, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "double")] double bottom, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "double")] double top, [NativeName(NativeNameType.Param, "znear")] [NativeName(NativeNameType.Type, "double")] double znear, [NativeName(NativeNameType.Param, "zfar")] [NativeName(NativeNameType.Type, "double")] double zfar)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, void>)vt[573])(left, right, bottom, top, znear, zfar);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, void>)vt[573])(left, right, bottom, top, znear, zfar);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlFrustum")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlFrustum([NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "double")] double left, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "double")] double right, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "double")] double bottom, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "double")] double top, [NativeName(NativeNameType.Param, "znear")] [NativeName(NativeNameType.Type, "double")] double znear, [NativeName(NativeNameType.Param, "zfar")] [NativeName(NativeNameType.Type, "double")] double zfar)
		{
			RlFrustumNative(left, right, bottom, top, znear, zfar);
		}

		[NativeName(NativeNameType.Func, "rlOrtho")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlOrthoNative([NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "double")] double left, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "double")] double right, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "double")] double bottom, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "double")] double top, [NativeName(NativeNameType.Param, "znear")] [NativeName(NativeNameType.Type, "double")] double znear, [NativeName(NativeNameType.Param, "zfar")] [NativeName(NativeNameType.Type, "double")] double zfar)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, void>)vt[574])(left, right, bottom, top, znear, zfar);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, void>)vt[574])(left, right, bottom, top, znear, zfar);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlOrtho")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlOrtho([NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "double")] double left, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "double")] double right, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "double")] double bottom, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "double")] double top, [NativeName(NativeNameType.Param, "znear")] [NativeName(NativeNameType.Type, "double")] double znear, [NativeName(NativeNameType.Param, "zfar")] [NativeName(NativeNameType.Type, "double")] double zfar)
		{
			RlOrthoNative(left, right, bottom, top, znear, zfar);
		}

		[NativeName(NativeNameType.Func, "rlViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlViewportNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vt[575])(x, y, width, height);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vt[575])(x, y, width, height);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlViewport([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			RlViewportNative(x, y, width, height);
		}

		/// <summary>
		/// ------------------------------------------------------------------------------------<br/>
		/// Functions Declaration - Vertex level operations<br/>
		/// ------------------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlBegin")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlBeginNative([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[576])(mode);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[576])(mode);
			#endif
		}

		/// <summary>
		/// ------------------------------------------------------------------------------------<br/>
		/// Functions Declaration - Vertex level operations<br/>
		/// ------------------------------------------------------------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlBegin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlBegin([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			RlBeginNative(mode);
		}

		[NativeName(NativeNameType.Func, "rlEnd")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEndNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[577])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[577])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnd")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnd()
		{
			RlEndNative();
		}

		[NativeName(NativeNameType.Func, "rlVertex2i")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlVertex2INative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[578])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[578])(x, y);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlVertex2i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlVertex2I([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			RlVertex2INative(x, y);
		}

		[NativeName(NativeNameType.Func, "rlVertex2f")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlVertex2FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)vt[579])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)vt[579])(x, y);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlVertex2f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlVertex2F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			RlVertex2FNative(x, y);
		}

		[NativeName(NativeNameType.Func, "rlVertex3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlVertex3FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[580])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[580])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlVertex3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlVertex3F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			RlVertex3FNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "rlTexCoord2f")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlTexCoord2FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)vt[581])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)vt[581])(x, y);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlTexCoord2f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlTexCoord2F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			RlTexCoord2FNative(x, y);
		}

		[NativeName(NativeNameType.Func, "rlNormal3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlNormal3FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[582])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[582])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlNormal3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlNormal3F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			RlNormal3FNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "rlColor4ub")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlColor4UbNative([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "unsigned char")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "unsigned char")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "unsigned char")] byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "unsigned char")] byte a)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)vt[583])(r, g, b, a);
			#else
			((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)vt[583])(r, g, b, a);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlColor4ub")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlColor4Ub([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "unsigned char")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "unsigned char")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "unsigned char")] byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "unsigned char")] byte a)
		{
			RlColor4UbNative(r, g, b, a);
		}

		[NativeName(NativeNameType.Func, "rlColor3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlColor3FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[584])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)vt[584])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlColor3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlColor3F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			RlColor3FNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "rlColor4f")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlColor4FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "float")] float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vt[585])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vt[585])(x, y, z, w);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlColor4f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlColor4F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "float")] float w)
		{
			RlColor4FNative(x, y, z, w);
		}

		/// <summary>
		/// Vertex buffers state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableVertexArray")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte RlEnableVertexArrayNative([NativeName(NativeNameType.Param, "vaoId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vaoId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)vt[586])(vaoId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)vt[586])(vaoId);
			#endif
		}

		/// <summary>
		/// Vertex buffers state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableVertexArray")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RlEnableVertexArray([NativeName(NativeNameType.Param, "vaoId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vaoId)
		{
			byte ret = RlEnableVertexArrayNative(vaoId);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableVertexArrayNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[587])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[587])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableVertexArray()
		{
			RlDisableVertexArrayNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableVertexBufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[588])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[588])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableVertexBuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlEnableVertexBufferNative(id);
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableVertexBufferNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[589])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[589])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableVertexBuffer()
		{
			RlDisableVertexBufferNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableVertexBufferElement")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableVertexBufferElementNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[590])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[590])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableVertexBufferElement")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableVertexBufferElement([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlEnableVertexBufferElementNative(id);
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexBufferElement")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableVertexBufferElementNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[591])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[591])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexBufferElement")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableVertexBufferElement()
		{
			RlDisableVertexBufferElementNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableVertexAttribute")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableVertexAttributeNative([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[592])(index);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[592])(index);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableVertexAttribute")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableVertexAttribute([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			RlEnableVertexAttributeNative(index);
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexAttribute")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableVertexAttributeNative([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[593])(index);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[593])(index);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableVertexAttribute")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableVertexAttribute([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			RlDisableVertexAttributeNative(index);
		}

		/// <summary>
		/// Textures state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlActiveTextureSlot")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlActiveTextureSlotNative([NativeName(NativeNameType.Param, "slot")] [NativeName(NativeNameType.Type, "int")] int slot)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[594])(slot);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[594])(slot);
			#endif
		}

		/// <summary>
		/// Textures state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlActiveTextureSlot")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlActiveTextureSlot([NativeName(NativeNameType.Param, "slot")] [NativeName(NativeNameType.Type, "int")] int slot)
		{
			RlActiveTextureSlotNative(slot);
		}

		[NativeName(NativeNameType.Func, "rlEnableTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableTextureNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[595])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[595])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableTexture([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlEnableTextureNative(id);
		}

		[NativeName(NativeNameType.Func, "rlDisableTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableTextureNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[596])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[596])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableTexture()
		{
			RlDisableTextureNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableTextureCubemapNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[597])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[597])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableTextureCubemap([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlEnableTextureCubemapNative(id);
		}

		[NativeName(NativeNameType.Func, "rlDisableTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableTextureCubemapNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[598])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[598])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableTextureCubemap()
		{
			RlDisableTextureCubemapNative();
		}

		[NativeName(NativeNameType.Func, "rlTextureParameters")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlTextureParametersNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "int")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)vt[599])(id, param, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)vt[599])(id, param, value);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlTextureParameters")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlTextureParameters([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "int")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value)
		{
			RlTextureParametersNative(id, param, value);
		}

		[NativeName(NativeNameType.Func, "rlCubemapParameters")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlCubemapParametersNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "int")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)vt[600])(id, param, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)vt[600])(id, param, value);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlCubemapParameters")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlCubemapParameters([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "int")] int param, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value)
		{
			RlCubemapParametersNative(id, param, value);
		}

		/// <summary>
		/// Shader state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableShaderNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[601])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[601])(id);
			#endif
		}

		/// <summary>
		/// Shader state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableShader([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlEnableShaderNative(id);
		}

		[NativeName(NativeNameType.Func, "rlDisableShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableShaderNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[602])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[602])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableShader()
		{
			RlDisableShaderNative();
		}

		/// <summary>
		/// Framebuffer state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableFramebufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[603])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[603])(id);
			#endif
		}

		/// <summary>
		/// Framebuffer state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableFramebuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlEnableFramebufferNative(id);
		}

		[NativeName(NativeNameType.Func, "rlDisableFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableFramebufferNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[604])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[604])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableFramebuffer()
		{
			RlDisableFramebufferNative();
		}

		[NativeName(NativeNameType.Func, "rlActiveDrawBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlActiveDrawBuffersNative([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[605])(count);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[605])(count);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlActiveDrawBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlActiveDrawBuffers([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			RlActiveDrawBuffersNative(count);
		}

		[NativeName(NativeNameType.Func, "rlBlitFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlBlitFramebufferNative([NativeName(NativeNameType.Param, "srcX")] [NativeName(NativeNameType.Type, "int")] int srcX, [NativeName(NativeNameType.Param, "srcY")] [NativeName(NativeNameType.Type, "int")] int srcY, [NativeName(NativeNameType.Param, "srcWidth")] [NativeName(NativeNameType.Type, "int")] int srcWidth, [NativeName(NativeNameType.Param, "srcHeight")] [NativeName(NativeNameType.Type, "int")] int srcHeight, [NativeName(NativeNameType.Param, "dstX")] [NativeName(NativeNameType.Type, "int")] int dstX, [NativeName(NativeNameType.Param, "dstY")] [NativeName(NativeNameType.Type, "int")] int dstY, [NativeName(NativeNameType.Param, "dstWidth")] [NativeName(NativeNameType.Type, "int")] int dstWidth, [NativeName(NativeNameType.Param, "dstHeight")] [NativeName(NativeNameType.Type, "int")] int dstHeight, [NativeName(NativeNameType.Param, "bufferMask")] [NativeName(NativeNameType.Type, "int")] int bufferMask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, int, int, int, void>)vt[606])(srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight, bufferMask);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, int, int, int, void>)vt[606])(srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight, bufferMask);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlBlitFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlBlitFramebuffer([NativeName(NativeNameType.Param, "srcX")] [NativeName(NativeNameType.Type, "int")] int srcX, [NativeName(NativeNameType.Param, "srcY")] [NativeName(NativeNameType.Type, "int")] int srcY, [NativeName(NativeNameType.Param, "srcWidth")] [NativeName(NativeNameType.Type, "int")] int srcWidth, [NativeName(NativeNameType.Param, "srcHeight")] [NativeName(NativeNameType.Type, "int")] int srcHeight, [NativeName(NativeNameType.Param, "dstX")] [NativeName(NativeNameType.Type, "int")] int dstX, [NativeName(NativeNameType.Param, "dstY")] [NativeName(NativeNameType.Type, "int")] int dstY, [NativeName(NativeNameType.Param, "dstWidth")] [NativeName(NativeNameType.Type, "int")] int dstWidth, [NativeName(NativeNameType.Param, "dstHeight")] [NativeName(NativeNameType.Type, "int")] int dstHeight, [NativeName(NativeNameType.Param, "bufferMask")] [NativeName(NativeNameType.Type, "int")] int bufferMask)
		{
			RlBlitFramebufferNative(srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight, bufferMask);
		}

		/// <summary>
		/// General render state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableColorBlend")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableColorBlendNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[607])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[607])();
			#endif
		}

		/// <summary>
		/// General render state<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlEnableColorBlend")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableColorBlend()
		{
			RlEnableColorBlendNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableColorBlend")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableColorBlendNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[608])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[608])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableColorBlend")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableColorBlend()
		{
			RlDisableColorBlendNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableDepthTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableDepthTestNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[609])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[609])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableDepthTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableDepthTest()
		{
			RlEnableDepthTestNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableDepthTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableDepthTestNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[610])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[610])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableDepthTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableDepthTest()
		{
			RlDisableDepthTestNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableDepthMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableDepthMaskNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[611])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[611])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableDepthMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableDepthMask()
		{
			RlEnableDepthMaskNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableDepthMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableDepthMaskNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[612])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[612])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableDepthMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableDepthMask()
		{
			RlDisableDepthMaskNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableBackfaceCulling")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableBackfaceCullingNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[613])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[613])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableBackfaceCulling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableBackfaceCulling()
		{
			RlEnableBackfaceCullingNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableBackfaceCulling")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableBackfaceCullingNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[614])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[614])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableBackfaceCulling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableBackfaceCulling()
		{
			RlDisableBackfaceCullingNative();
		}

		[NativeName(NativeNameType.Func, "rlSetCullFace")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetCullFaceNative([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[615])(mode);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[615])(mode);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetCullFace")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetCullFace([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			RlSetCullFaceNative(mode);
		}

		[NativeName(NativeNameType.Func, "rlEnableScissorTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableScissorTestNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[616])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[616])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableScissorTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableScissorTest()
		{
			RlEnableScissorTestNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableScissorTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableScissorTestNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[617])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[617])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableScissorTest")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableScissorTest()
		{
			RlDisableScissorTestNative();
		}

		[NativeName(NativeNameType.Func, "rlScissor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlScissorNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vt[618])(x, y, width, height);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vt[618])(x, y, width, height);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlScissor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlScissor([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			RlScissorNative(x, y, width, height);
		}

		[NativeName(NativeNameType.Func, "rlEnableWireMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableWireModeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[619])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[619])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableWireMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableWireMode()
		{
			RlEnableWireModeNative();
		}

		[NativeName(NativeNameType.Func, "rlEnablePointMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnablePointModeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[620])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[620])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnablePointMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnablePointMode()
		{
			RlEnablePointModeNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableWireMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableWireModeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[621])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[621])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableWireMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableWireMode()
		{
			RlDisableWireModeNative();
		}

		[NativeName(NativeNameType.Func, "rlSetLineWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetLineWidthNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)vt[622])(width);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)vt[622])(width);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetLineWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetLineWidth([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			RlSetLineWidthNative(width);
		}

		[NativeName(NativeNameType.Func, "rlGetLineWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float RlGetLineWidthNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)vt[623])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)vt[623])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetLineWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float RlGetLineWidth()
		{
			float ret = RlGetLineWidthNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlEnableSmoothLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableSmoothLinesNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[624])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[624])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableSmoothLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableSmoothLines()
		{
			RlEnableSmoothLinesNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableSmoothLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableSmoothLinesNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[625])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[625])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableSmoothLines")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableSmoothLines()
		{
			RlDisableSmoothLinesNative();
		}

		[NativeName(NativeNameType.Func, "rlEnableStereoRender")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlEnableStereoRenderNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[626])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[626])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlEnableStereoRender")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlEnableStereoRender()
		{
			RlEnableStereoRenderNative();
		}

		[NativeName(NativeNameType.Func, "rlDisableStereoRender")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDisableStereoRenderNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[627])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[627])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDisableStereoRender")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDisableStereoRender()
		{
			RlDisableStereoRenderNative();
		}

		[NativeName(NativeNameType.Func, "rlIsStereoRenderEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte RlIsStereoRenderEnabledNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[628])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[628])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlIsStereoRenderEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RlIsStereoRenderEnabled()
		{
			byte ret = RlIsStereoRenderEnabledNative();
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "rlClearColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlClearColorNative([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "unsigned char")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "unsigned char")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "unsigned char")] byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "unsigned char")] byte a)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)vt[629])(r, g, b, a);
			#else
			((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)vt[629])(r, g, b, a);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlClearColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlClearColor([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "unsigned char")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "unsigned char")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "unsigned char")] byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "unsigned char")] byte a)
		{
			RlClearColorNative(r, g, b, a);
		}

		[NativeName(NativeNameType.Func, "rlClearScreenBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlClearScreenBuffersNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[630])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[630])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlClearScreenBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlClearScreenBuffers()
		{
			RlClearScreenBuffersNative();
		}

		[NativeName(NativeNameType.Func, "rlCheckErrors")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlCheckErrorsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[631])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[631])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlCheckErrors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlCheckErrors()
		{
			RlCheckErrorsNative();
		}

		[NativeName(NativeNameType.Func, "rlSetBlendMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetBlendModeNative([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[632])(mode);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[632])(mode);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetBlendMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetBlendMode([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			RlSetBlendModeNative(mode);
		}

		[NativeName(NativeNameType.Func, "rlSetBlendFactors")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetBlendFactorsNative([NativeName(NativeNameType.Param, "glSrcFactor")] [NativeName(NativeNameType.Type, "int")] int glSrcFactor, [NativeName(NativeNameType.Param, "glDstFactor")] [NativeName(NativeNameType.Type, "int")] int glDstFactor, [NativeName(NativeNameType.Param, "glEquation")] [NativeName(NativeNameType.Type, "int")] int glEquation)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)vt[633])(glSrcFactor, glDstFactor, glEquation);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)vt[633])(glSrcFactor, glDstFactor, glEquation);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetBlendFactors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetBlendFactors([NativeName(NativeNameType.Param, "glSrcFactor")] [NativeName(NativeNameType.Type, "int")] int glSrcFactor, [NativeName(NativeNameType.Param, "glDstFactor")] [NativeName(NativeNameType.Type, "int")] int glDstFactor, [NativeName(NativeNameType.Param, "glEquation")] [NativeName(NativeNameType.Type, "int")] int glEquation)
		{
			RlSetBlendFactorsNative(glSrcFactor, glDstFactor, glEquation);
		}

		[NativeName(NativeNameType.Func, "rlSetBlendFactorsSeparate")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetBlendFactorsSeparateNative([NativeName(NativeNameType.Param, "glSrcRGB")] [NativeName(NativeNameType.Type, "int")] int glSrcRGB, [NativeName(NativeNameType.Param, "glDstRGB")] [NativeName(NativeNameType.Type, "int")] int glDstRGB, [NativeName(NativeNameType.Param, "glSrcAlpha")] [NativeName(NativeNameType.Type, "int")] int glSrcAlpha, [NativeName(NativeNameType.Param, "glDstAlpha")] [NativeName(NativeNameType.Type, "int")] int glDstAlpha, [NativeName(NativeNameType.Param, "glEqRGB")] [NativeName(NativeNameType.Type, "int")] int glEqRGB, [NativeName(NativeNameType.Param, "glEqAlpha")] [NativeName(NativeNameType.Type, "int")] int glEqAlpha)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, void>)vt[634])(glSrcRGB, glDstRGB, glSrcAlpha, glDstAlpha, glEqRGB, glEqAlpha);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, void>)vt[634])(glSrcRGB, glDstRGB, glSrcAlpha, glDstAlpha, glEqRGB, glEqAlpha);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetBlendFactorsSeparate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetBlendFactorsSeparate([NativeName(NativeNameType.Param, "glSrcRGB")] [NativeName(NativeNameType.Type, "int")] int glSrcRGB, [NativeName(NativeNameType.Param, "glDstRGB")] [NativeName(NativeNameType.Type, "int")] int glDstRGB, [NativeName(NativeNameType.Param, "glSrcAlpha")] [NativeName(NativeNameType.Type, "int")] int glSrcAlpha, [NativeName(NativeNameType.Param, "glDstAlpha")] [NativeName(NativeNameType.Type, "int")] int glDstAlpha, [NativeName(NativeNameType.Param, "glEqRGB")] [NativeName(NativeNameType.Type, "int")] int glEqRGB, [NativeName(NativeNameType.Param, "glEqAlpha")] [NativeName(NativeNameType.Type, "int")] int glEqAlpha)
		{
			RlSetBlendFactorsSeparateNative(glSrcRGB, glDstRGB, glSrcAlpha, glDstAlpha, glEqRGB, glEqAlpha);
		}

		/// <summary>
		/// ------------------------------------------------------------------------------------<br/>
		/// Functions Declaration - rlgl functionality<br/>
		/// ------------------------------------------------------------------------------------<br/>
		/// rlgl initialization functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlglInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlglInitNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[635])(width, height);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[635])(width, height);
			#endif
		}

		/// <summary>
		/// ------------------------------------------------------------------------------------<br/>
		/// Functions Declaration - rlgl functionality<br/>
		/// ------------------------------------------------------------------------------------<br/>
		/// rlgl initialization functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlglInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlglInit([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			RlglInitNative(width, height);
		}

		[NativeName(NativeNameType.Func, "rlglClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlglCloseNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[636])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[636])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlglClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlglClose()
		{
			RlglCloseNative();
		}

		[NativeName(NativeNameType.Func, "rlLoadExtensions")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlLoadExtensionsNative([NativeName(NativeNameType.Param, "loader")] [NativeName(NativeNameType.Type, "void*")] void* loader)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, void>)vt[637])(loader);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[637])((nint)loader);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadExtensions")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlLoadExtensions([NativeName(NativeNameType.Param, "loader")] [NativeName(NativeNameType.Type, "void*")] void* loader)
		{
			RlLoadExtensionsNative(loader);
		}

		[NativeName(NativeNameType.Func, "rlGetVersion")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int RlGetVersionNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[638])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[638])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetVersion")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetVersion()
		{
			int ret = RlGetVersionNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlSetFramebufferWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetFramebufferWidthNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[639])(width);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[639])(width);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetFramebufferWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetFramebufferWidth([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width)
		{
			RlSetFramebufferWidthNative(width);
		}

		[NativeName(NativeNameType.Func, "rlGetFramebufferWidth")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int RlGetFramebufferWidthNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[640])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[640])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetFramebufferWidth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetFramebufferWidth()
		{
			int ret = RlGetFramebufferWidthNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlSetFramebufferHeight")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetFramebufferHeightNative([NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[641])(height);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[641])(height);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetFramebufferHeight")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetFramebufferHeight([NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			RlSetFramebufferHeightNative(height);
		}

		[NativeName(NativeNameType.Func, "rlGetFramebufferHeight")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int RlGetFramebufferHeightNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[642])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[642])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetFramebufferHeight")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetFramebufferHeight()
		{
			int ret = RlGetFramebufferHeightNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetTextureIdDefault")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlGetTextureIdDefaultNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)vt[643])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)vt[643])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetTextureIdDefault")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlGetTextureIdDefault()
		{
			uint ret = RlGetTextureIdDefaultNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetShaderIdDefault")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlGetShaderIdDefaultNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)vt[644])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)vt[644])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetShaderIdDefault")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlGetShaderIdDefault()
		{
			uint ret = RlGetShaderIdDefaultNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetShaderLocsDefault")]
		[return: NativeName(NativeNameType.Type, "int*")]
		internal static int* RlGetShaderLocsDefaultNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int*>)vt[645])();
			#else
			return (int*)((delegate* unmanaged[Cdecl]<nint>)vt[645])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetShaderLocsDefault")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public static int* RlGetShaderLocsDefault()
		{
			int* ret = RlGetShaderLocsDefaultNative();
			return ret;
		}

		/// <summary>
		/// Render batch management<br/>
		/// NOTE: rlgl provides a default render batch to behave like OpenGL 1.1 immediate mode<br/>
		/// but this render batch API is exposed in case of custom batches are required<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadRenderBatch")]
		[return: NativeName(NativeNameType.Type, "rlRenderBatch")]
		internal static RlRenderBatch RlLoadRenderBatchNative([NativeName(NativeNameType.Param, "numBuffers")] [NativeName(NativeNameType.Type, "int")] int numBuffers, [NativeName(NativeNameType.Param, "bufferElements")] [NativeName(NativeNameType.Type, "int")] int bufferElements)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, RlRenderBatch>)vt[646])(numBuffers, bufferElements);
			#else
			return (RlRenderBatch)((delegate* unmanaged[Cdecl]<int, int, RlRenderBatch>)vt[646])(numBuffers, bufferElements);
			#endif
		}

		/// <summary>
		/// Render batch management<br/>
		/// NOTE: rlgl provides a default render batch to behave like OpenGL 1.1 immediate mode<br/>
		/// but this render batch API is exposed in case of custom batches are required<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadRenderBatch")]
		[return: NativeName(NativeNameType.Type, "rlRenderBatch")]
		public static RlRenderBatch RlLoadRenderBatch([NativeName(NativeNameType.Param, "numBuffers")] [NativeName(NativeNameType.Type, "int")] int numBuffers, [NativeName(NativeNameType.Param, "bufferElements")] [NativeName(NativeNameType.Type, "int")] int bufferElements)
		{
			RlRenderBatch ret = RlLoadRenderBatchNative(numBuffers, bufferElements);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUnloadRenderBatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUnloadRenderBatchNative([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch")] RlRenderBatch batch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<RlRenderBatch, void>)vt[647])(batch);
			#else
			((delegate* unmanaged[Cdecl]<RlRenderBatch, void>)vt[647])(batch);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadRenderBatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadRenderBatch([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch")] RlRenderBatch batch)
		{
			RlUnloadRenderBatchNative(batch);
		}

		[NativeName(NativeNameType.Func, "rlDrawRenderBatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDrawRenderBatchNative([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch*")] RlRenderBatch* batch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<RlRenderBatch*, void>)vt[648])(batch);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[648])((nint)batch);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawRenderBatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawRenderBatch([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch*")] RlRenderBatch* batch)
		{
			RlDrawRenderBatchNative(batch);
		}

		[NativeName(NativeNameType.Func, "rlDrawRenderBatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawRenderBatch([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch*")] ref RlRenderBatch batch)
		{
			fixed (RlRenderBatch* pbatch = &batch)
			{
				RlDrawRenderBatchNative((RlRenderBatch*)pbatch);
			}
		}

		[NativeName(NativeNameType.Func, "rlSetRenderBatchActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetRenderBatchActiveNative([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch*")] RlRenderBatch* batch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<RlRenderBatch*, void>)vt[649])(batch);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[649])((nint)batch);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetRenderBatchActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetRenderBatchActive([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch*")] RlRenderBatch* batch)
		{
			RlSetRenderBatchActiveNative(batch);
		}

		[NativeName(NativeNameType.Func, "rlSetRenderBatchActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetRenderBatchActive([NativeName(NativeNameType.Param, "batch")] [NativeName(NativeNameType.Type, "rlRenderBatch*")] ref RlRenderBatch batch)
		{
			fixed (RlRenderBatch* pbatch = &batch)
			{
				RlSetRenderBatchActiveNative((RlRenderBatch*)pbatch);
			}
		}

		[NativeName(NativeNameType.Func, "rlDrawRenderBatchActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDrawRenderBatchActiveNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[650])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[650])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawRenderBatchActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawRenderBatchActive()
		{
			RlDrawRenderBatchActiveNative();
		}

		[NativeName(NativeNameType.Func, "rlCheckRenderBatchLimit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte RlCheckRenderBatchLimitNative([NativeName(NativeNameType.Param, "vCount")] [NativeName(NativeNameType.Type, "int")] int vCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)vt[651])(vCount);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)vt[651])(vCount);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlCheckRenderBatchLimit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RlCheckRenderBatchLimit([NativeName(NativeNameType.Param, "vCount")] [NativeName(NativeNameType.Type, "int")] int vCount)
		{
			byte ret = RlCheckRenderBatchLimitNative(vCount);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "rlSetTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetTextureNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[652])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[652])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetTexture([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlSetTextureNative(id);
		}

		/// <summary>
		/// Vertex buffers management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadVertexArray")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadVertexArrayNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)vt[653])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)vt[653])();
			#endif
		}

		/// <summary>
		/// Vertex buffers management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadVertexArray")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadVertexArray()
		{
			uint ret = RlLoadVertexArrayNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlLoadVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadVertexBufferNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "dynamic")] [NativeName(NativeNameType.Type, "bool")] byte dynamic)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, byte, uint>)vt[654])(buffer, size, dynamic);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, byte, uint>)vt[654])((nint)buffer, size, dynamic);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadVertexBuffer([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "dynamic")] [NativeName(NativeNameType.Type, "bool")] bool dynamic)
		{
			uint ret = RlLoadVertexBufferNative(buffer, size, dynamic ? (byte)1 : (byte)0);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlLoadVertexBufferElement")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadVertexBufferElementNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "dynamic")] [NativeName(NativeNameType.Type, "bool")] byte dynamic)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, byte, uint>)vt[655])(buffer, size, dynamic);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, byte, uint>)vt[655])((nint)buffer, size, dynamic);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadVertexBufferElement")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadVertexBufferElement([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "dynamic")] [NativeName(NativeNameType.Type, "bool")] bool dynamic)
		{
			uint ret = RlLoadVertexBufferElementNative(buffer, size, dynamic ? (byte)1 : (byte)0);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUpdateVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUpdateVertexBufferNative([NativeName(NativeNameType.Param, "bufferId")] [NativeName(NativeNameType.Type, "unsigned int")] uint bufferId, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void*, int, int, void>)vt[656])(bufferId, data, dataSize, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, int, int, void>)vt[656])(bufferId, (nint)data, dataSize, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUpdateVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUpdateVertexBuffer([NativeName(NativeNameType.Param, "bufferId")] [NativeName(NativeNameType.Type, "unsigned int")] uint bufferId, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			RlUpdateVertexBufferNative(bufferId, data, dataSize, offset);
		}

		[NativeName(NativeNameType.Func, "rlUpdateVertexBufferElements")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUpdateVertexBufferElementsNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void*, int, int, void>)vt[657])(id, data, dataSize, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, int, int, void>)vt[657])(id, (nint)data, dataSize, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUpdateVertexBufferElements")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUpdateVertexBufferElements([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "int")] int dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			RlUpdateVertexBufferElementsNative(id, data, dataSize, offset);
		}

		[NativeName(NativeNameType.Func, "rlUnloadVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUnloadVertexArrayNative([NativeName(NativeNameType.Param, "vaoId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vaoId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[658])(vaoId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[658])(vaoId);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadVertexArray([NativeName(NativeNameType.Param, "vaoId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vaoId)
		{
			RlUnloadVertexArrayNative(vaoId);
		}

		[NativeName(NativeNameType.Func, "rlUnloadVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUnloadVertexBufferNative([NativeName(NativeNameType.Param, "vboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vboId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[659])(vboId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[659])(vboId);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadVertexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadVertexBuffer([NativeName(NativeNameType.Param, "vboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vboId)
		{
			RlUnloadVertexBufferNative(vboId);
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttribute")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetVertexAttributeNative([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "compSize")] [NativeName(NativeNameType.Type, "int")] int compSize, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type, [NativeName(NativeNameType.Param, "normalized")] [NativeName(NativeNameType.Type, "bool")] byte normalized, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride, [NativeName(NativeNameType.Param, "pointer")] [NativeName(NativeNameType.Type, "const void*")] void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, int, void*, void>)vt[660])(index, compSize, type, normalized, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, int, nint, void>)vt[660])(index, compSize, type, normalized, stride, (nint)pointer);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttribute")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetVertexAttribute([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "compSize")] [NativeName(NativeNameType.Type, "int")] int compSize, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type, [NativeName(NativeNameType.Param, "normalized")] [NativeName(NativeNameType.Type, "bool")] bool normalized, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride, [NativeName(NativeNameType.Param, "pointer")] [NativeName(NativeNameType.Type, "const void*")] void* pointer)
		{
			RlSetVertexAttributeNative(index, compSize, type, normalized ? (byte)1 : (byte)0, stride, pointer);
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttributeDivisor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetVertexAttributeDivisorNative([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "divisor")] [NativeName(NativeNameType.Type, "int")] int divisor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void>)vt[661])(index, divisor);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, void>)vt[661])(index, divisor);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttributeDivisor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetVertexAttributeDivisor([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "divisor")] [NativeName(NativeNameType.Type, "int")] int divisor)
		{
			RlSetVertexAttributeDivisorNative(index, divisor);
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttributeDefault")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetVertexAttributeDefaultNative([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const void*")] void* value, [NativeName(NativeNameType.Param, "attribType")] [NativeName(NativeNameType.Type, "int")] int attribType, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void*, int, int, void>)vt[662])(locIndex, value, attribType, count);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, int, int, void>)vt[662])(locIndex, (nint)value, attribType, count);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetVertexAttributeDefault")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetVertexAttributeDefault([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const void*")] void* value, [NativeName(NativeNameType.Param, "attribType")] [NativeName(NativeNameType.Type, "int")] int attribType, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			RlSetVertexAttributeDefaultNative(locIndex, value, attribType, count);
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDrawVertexArrayNative([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[663])(offset, count);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[663])(offset, count);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArray")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawVertexArray([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			RlDrawVertexArrayNative(offset, count);
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayElements")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDrawVertexArrayElementsNative([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void*, void>)vt[664])(offset, count, buffer);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)vt[664])(offset, count, (nint)buffer);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayElements")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawVertexArrayElements([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer)
		{
			RlDrawVertexArrayElementsNative(offset, count, buffer);
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayInstanced")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDrawVertexArrayInstancedNative([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "instances")] [NativeName(NativeNameType.Type, "int")] int instances)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)vt[665])(offset, count, instances);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)vt[665])(offset, count, instances);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayInstanced")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawVertexArrayInstanced([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "instances")] [NativeName(NativeNameType.Type, "int")] int instances)
		{
			RlDrawVertexArrayInstancedNative(offset, count, instances);
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayElementsInstanced")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlDrawVertexArrayElementsInstancedNative([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer, [NativeName(NativeNameType.Param, "instances")] [NativeName(NativeNameType.Type, "int")] int instances)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void*, int, void>)vt[666])(offset, count, buffer, instances);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, int, void>)vt[666])(offset, count, (nint)buffer, instances);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlDrawVertexArrayElementsInstanced")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlDrawVertexArrayElementsInstanced([NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const void*")] void* buffer, [NativeName(NativeNameType.Param, "instances")] [NativeName(NativeNameType.Type, "int")] int instances)
		{
			RlDrawVertexArrayElementsInstancedNative(offset, count, buffer, instances);
		}

		/// <summary>
		/// Textures management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadTexture")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadTextureNative([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmapCount")] [NativeName(NativeNameType.Type, "int")] int mipmapCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, int, int, int, uint>)vt[667])(data, width, height, format, mipmapCount);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, int, int, int, uint>)vt[667])((nint)data, width, height, format, mipmapCount);
			#endif
		}

		/// <summary>
		/// Textures management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadTexture")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadTexture([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmapCount")] [NativeName(NativeNameType.Type, "int")] int mipmapCount)
		{
			uint ret = RlLoadTextureNative(data, width, height, format, mipmapCount);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlLoadTextureDepth")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadTextureDepthNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "useRenderBuffer")] [NativeName(NativeNameType.Type, "bool")] byte useRenderBuffer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, byte, uint>)vt[668])(width, height, useRenderBuffer);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<int, int, byte, uint>)vt[668])(width, height, useRenderBuffer);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadTextureDepth")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadTextureDepth([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "useRenderBuffer")] [NativeName(NativeNameType.Type, "bool")] bool useRenderBuffer)
		{
			uint ret = RlLoadTextureDepthNative(width, height, useRenderBuffer ? (byte)1 : (byte)0);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlLoadTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadTextureCubemapNative([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, int, uint>)vt[669])(data, size, format);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, int, uint>)vt[669])((nint)data, size, format);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadTextureCubemap")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadTextureCubemap([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			uint ret = RlLoadTextureCubemapNative(data, size, format);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUpdateTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUpdateTextureNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void*, void>)vt[670])(id, offsetX, offsetY, width, height, format, data);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, nint, void>)vt[670])(id, offsetX, offsetY, width, height, format, (nint)data);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUpdateTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUpdateTexture([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "offsetX")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offsetY")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			RlUpdateTextureNative(id, offsetX, offsetY, width, height, format, data);
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlGetGlTextureFormatsNative([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glType)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, uint*, uint*, void>)vt[671])(format, glInternalFormat, glFormat, glType);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, nint, nint, void>)vt[671])(format, (nint)glInternalFormat, (nint)glFormat, (nint)glType);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glType)
		{
			RlGetGlTextureFormatsNative(format, glInternalFormat, glFormat, glType);
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glType)
		{
			fixed (uint* pglInternalFormat = &glInternalFormat)
			{
				RlGetGlTextureFormatsNative(format, (uint*)pglInternalFormat, glFormat, glType);
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glType)
		{
			fixed (uint* pglFormat = &glFormat)
			{
				RlGetGlTextureFormatsNative(format, glInternalFormat, (uint*)pglFormat, glType);
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glType)
		{
			fixed (uint* pglInternalFormat = &glInternalFormat)
			{
				fixed (uint* pglFormat = &glFormat)
				{
					RlGetGlTextureFormatsNative(format, (uint*)pglInternalFormat, (uint*)pglFormat, glType);
				}
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glType)
		{
			fixed (uint* pglType = &glType)
			{
				RlGetGlTextureFormatsNative(format, glInternalFormat, glFormat, (uint*)pglType);
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glType)
		{
			fixed (uint* pglInternalFormat = &glInternalFormat)
			{
				fixed (uint* pglType = &glType)
				{
					RlGetGlTextureFormatsNative(format, (uint*)pglInternalFormat, glFormat, (uint*)pglType);
				}
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glType)
		{
			fixed (uint* pglFormat = &glFormat)
			{
				fixed (uint* pglType = &glType)
				{
					RlGetGlTextureFormatsNative(format, glInternalFormat, (uint*)pglFormat, (uint*)pglType);
				}
			}
		}

		[NativeName(NativeNameType.Func, "rlGetGlTextureFormats")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGetGlTextureFormats([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "glInternalFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glInternalFormat, [NativeName(NativeNameType.Param, "glFormat")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glFormat, [NativeName(NativeNameType.Param, "glType")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint glType)
		{
			fixed (uint* pglInternalFormat = &glInternalFormat)
			{
				fixed (uint* pglFormat = &glFormat)
				{
					fixed (uint* pglType = &glType)
					{
						RlGetGlTextureFormatsNative(format, (uint*)pglInternalFormat, (uint*)pglFormat, (uint*)pglType);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "rlGetPixelFormatName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* RlGetPixelFormatNameNative([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "unsigned int")] uint format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte*>)vt[672])(format);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<uint, nint>)vt[672])(format);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetPixelFormatName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* RlGetPixelFormatName([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "unsigned int")] uint format)
		{
			byte* ret = RlGetPixelFormatNameNative(format);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetPixelFormatName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string RlGetPixelFormatNameS([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "unsigned int")] uint format)
		{
			string ret = Utils.DecodeStringUTF8(RlGetPixelFormatNameNative(format));
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUnloadTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUnloadTextureNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[673])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[673])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadTexture([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlUnloadTextureNative(id);
		}

		[NativeName(NativeNameType.Func, "rlGenTextureMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlGenTextureMipmapsNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmaps")] [NativeName(NativeNameType.Type, "int*")] int* mipmaps)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int*, void>)vt[674])(id, width, height, format, mipmaps);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, nint, void>)vt[674])(id, width, height, format, (nint)mipmaps);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGenTextureMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGenTextureMipmaps([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmaps")] [NativeName(NativeNameType.Type, "int*")] int* mipmaps)
		{
			RlGenTextureMipmapsNative(id, width, height, format, mipmaps);
		}

		[NativeName(NativeNameType.Func, "rlGenTextureMipmaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlGenTextureMipmaps([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "mipmaps")] [NativeName(NativeNameType.Type, "int*")] ref int mipmaps)
		{
			fixed (int* pmipmaps = &mipmaps)
			{
				RlGenTextureMipmapsNative(id, width, height, format, (int*)pmipmaps);
			}
		}

		[NativeName(NativeNameType.Func, "rlReadTexturePixels")]
		[return: NativeName(NativeNameType.Type, "void*")]
		internal static void* RlReadTexturePixelsNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, int, int, int, void*>)vt[675])(id, width, height, format);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<uint, int, int, int, nint>)vt[675])(id, width, height, format);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlReadTexturePixels")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* RlReadTexturePixels([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format)
		{
			void* ret = RlReadTexturePixelsNative(id, width, height, format);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlReadScreenPixels")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		internal static byte* RlReadScreenPixelsNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, byte*>)vt[676])(width, height);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, int, nint>)vt[676])(width, height);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlReadScreenPixels")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* RlReadScreenPixels([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			byte* ret = RlReadScreenPixelsNative(width, height);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlReadScreenPixels")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string RlReadScreenPixelsS([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			string ret = Utils.DecodeStringUTF8(RlReadScreenPixelsNative(width, height));
			return ret;
		}

		/// <summary>
		/// Framebuffer management (fbo)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadFramebuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadFramebufferNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, uint>)vt[677])(width, height);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<int, int, uint>)vt[677])(width, height);
			#endif
		}

		/// <summary>
		/// Framebuffer management (fbo)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadFramebuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadFramebuffer([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			uint ret = RlLoadFramebufferNative(width, height);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlFramebufferAttach")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlFramebufferAttachNative([NativeName(NativeNameType.Param, "fboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint fboId, [NativeName(NativeNameType.Param, "texId")] [NativeName(NativeNameType.Type, "unsigned int")] uint texId, [NativeName(NativeNameType.Param, "attachType")] [NativeName(NativeNameType.Type, "int")] int attachType, [NativeName(NativeNameType.Param, "texType")] [NativeName(NativeNameType.Type, "int")] int texType, [NativeName(NativeNameType.Param, "mipLevel")] [NativeName(NativeNameType.Type, "int")] int mipLevel)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, void>)vt[678])(fboId, texId, attachType, texType, mipLevel);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, void>)vt[678])(fboId, texId, attachType, texType, mipLevel);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlFramebufferAttach")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlFramebufferAttach([NativeName(NativeNameType.Param, "fboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint fboId, [NativeName(NativeNameType.Param, "texId")] [NativeName(NativeNameType.Type, "unsigned int")] uint texId, [NativeName(NativeNameType.Param, "attachType")] [NativeName(NativeNameType.Type, "int")] int attachType, [NativeName(NativeNameType.Param, "texType")] [NativeName(NativeNameType.Type, "int")] int texType, [NativeName(NativeNameType.Param, "mipLevel")] [NativeName(NativeNameType.Type, "int")] int mipLevel)
		{
			RlFramebufferAttachNative(fboId, texId, attachType, texType, mipLevel);
		}

		[NativeName(NativeNameType.Func, "rlFramebufferComplete")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte RlFramebufferCompleteNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)vt[679])(id);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)vt[679])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlFramebufferComplete")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RlFramebufferComplete([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			byte ret = RlFramebufferCompleteNative(id);
			return ret != 0;
		}

		[NativeName(NativeNameType.Func, "rlUnloadFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUnloadFramebufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[680])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[680])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadFramebuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadFramebuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlUnloadFramebufferNative(id);
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadShaderCodeNative([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* fsCode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, uint>)vt[681])(vsCode, fsCode);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, uint>)vt[681])((nint)vsCode, (nint)fsCode);
			#endif
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* fsCode)
		{
			uint ret = RlLoadShaderCodeNative(vsCode, fsCode);
			return ret;
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] ref byte vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* fsCode)
		{
			fixed (byte* pvsCode = &vsCode)
			{
				uint ret = RlLoadShaderCodeNative((byte*)pvsCode, fsCode);
				return ret;
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* fsCode)
		{
			fixed (byte* pvsCode = vsCode)
			{
				uint ret = RlLoadShaderCodeNative((byte*)pvsCode, fsCode);
				return ret;
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] string vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* fsCode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (vsCode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(vsCode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(vsCode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = RlLoadShaderCodeNative(pStr0, fsCode);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] ref byte fsCode)
		{
			fixed (byte* pfsCode = &fsCode)
			{
				uint ret = RlLoadShaderCodeNative(vsCode, (byte*)pfsCode);
				return ret;
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fsCode)
		{
			fixed (byte* pfsCode = fsCode)
			{
				uint ret = RlLoadShaderCodeNative(vsCode, (byte*)pfsCode);
				return ret;
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] byte* vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] string fsCode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fsCode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fsCode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fsCode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = RlLoadShaderCodeNative(vsCode, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] ref byte vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] ref byte fsCode)
		{
			fixed (byte* pvsCode = &vsCode)
			{
				fixed (byte* pfsCode = &fsCode)
				{
					uint ret = RlLoadShaderCodeNative((byte*)pvsCode, (byte*)pfsCode);
					return ret;
				}
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fsCode)
		{
			fixed (byte* pvsCode = vsCode)
			{
				fixed (byte* pfsCode = fsCode)
				{
					uint ret = RlLoadShaderCodeNative((byte*)pvsCode, (byte*)pfsCode);
					return ret;
				}
			}
		}

		/// <summary>
		/// Shaders management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderCode")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderCode([NativeName(NativeNameType.Param, "vsCode")] [NativeName(NativeNameType.Type, "const char*")] string vsCode, [NativeName(NativeNameType.Param, "fsCode")] [NativeName(NativeNameType.Type, "const char*")] string fsCode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (vsCode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(vsCode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(vsCode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (fsCode != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(fsCode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(fsCode, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			uint ret = RlLoadShaderCodeNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlCompileShader")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlCompileShaderNative([NativeName(NativeNameType.Param, "shaderCode")] [NativeName(NativeNameType.Type, "const char*")] byte* shaderCode, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, uint>)vt[682])(shaderCode, type);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, uint>)vt[682])((nint)shaderCode, type);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlCompileShader")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlCompileShader([NativeName(NativeNameType.Param, "shaderCode")] [NativeName(NativeNameType.Type, "const char*")] byte* shaderCode, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			uint ret = RlCompileShaderNative(shaderCode, type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlCompileShader")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlCompileShader([NativeName(NativeNameType.Param, "shaderCode")] [NativeName(NativeNameType.Type, "const char*")] ref byte shaderCode, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pshaderCode = &shaderCode)
			{
				uint ret = RlCompileShaderNative((byte*)pshaderCode, type);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlCompileShader")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlCompileShader([NativeName(NativeNameType.Param, "shaderCode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> shaderCode, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pshaderCode = shaderCode)
			{
				uint ret = RlCompileShaderNative((byte*)pshaderCode, type);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlCompileShader")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlCompileShader([NativeName(NativeNameType.Param, "shaderCode")] [NativeName(NativeNameType.Type, "const char*")] string shaderCode, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (shaderCode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(shaderCode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(shaderCode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = RlCompileShaderNative(pStr0, type);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlLoadShaderProgram")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadShaderProgramNative([NativeName(NativeNameType.Param, "vShaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vShaderId, [NativeName(NativeNameType.Param, "fShaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint fShaderId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint, uint>)vt[683])(vShaderId, fShaderId);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, uint, uint>)vt[683])(vShaderId, fShaderId);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlLoadShaderProgram")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderProgram([NativeName(NativeNameType.Param, "vShaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint vShaderId, [NativeName(NativeNameType.Param, "fShaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint fShaderId)
		{
			uint ret = RlLoadShaderProgramNative(vShaderId, fShaderId);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUnloadShaderProgram")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUnloadShaderProgramNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[684])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[684])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadShaderProgram")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadShaderProgram([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			RlUnloadShaderProgramNative(id);
		}

		[NativeName(NativeNameType.Func, "rlGetLocationUniform")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int RlGetLocationUniformNative([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "uniformName")] [NativeName(NativeNameType.Type, "const char*")] byte* uniformName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte*, int>)vt[685])(shaderId, uniformName);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, nint, int>)vt[685])(shaderId, (nint)uniformName);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetLocationUniform")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationUniform([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "uniformName")] [NativeName(NativeNameType.Type, "const char*")] byte* uniformName)
		{
			int ret = RlGetLocationUniformNative(shaderId, uniformName);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetLocationUniform")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationUniform([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "uniformName")] [NativeName(NativeNameType.Type, "const char*")] ref byte uniformName)
		{
			fixed (byte* puniformName = &uniformName)
			{
				int ret = RlGetLocationUniformNative(shaderId, (byte*)puniformName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlGetLocationUniform")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationUniform([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "uniformName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> uniformName)
		{
			fixed (byte* puniformName = uniformName)
			{
				int ret = RlGetLocationUniformNative(shaderId, (byte*)puniformName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlGetLocationUniform")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationUniform([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "uniformName")] [NativeName(NativeNameType.Type, "const char*")] string uniformName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (uniformName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(uniformName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(uniformName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = RlGetLocationUniformNative(shaderId, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetLocationAttrib")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int RlGetLocationAttribNative([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "attribName")] [NativeName(NativeNameType.Type, "const char*")] byte* attribName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte*, int>)vt[686])(shaderId, attribName);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, nint, int>)vt[686])(shaderId, (nint)attribName);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetLocationAttrib")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationAttrib([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "attribName")] [NativeName(NativeNameType.Type, "const char*")] byte* attribName)
		{
			int ret = RlGetLocationAttribNative(shaderId, attribName);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetLocationAttrib")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationAttrib([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "attribName")] [NativeName(NativeNameType.Type, "const char*")] ref byte attribName)
		{
			fixed (byte* pattribName = &attribName)
			{
				int ret = RlGetLocationAttribNative(shaderId, (byte*)pattribName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlGetLocationAttrib")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationAttrib([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "attribName")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> attribName)
		{
			fixed (byte* pattribName = attribName)
			{
				int ret = RlGetLocationAttribNative(shaderId, (byte*)pattribName);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "rlGetLocationAttrib")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RlGetLocationAttrib([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId, [NativeName(NativeNameType.Param, "attribName")] [NativeName(NativeNameType.Type, "const char*")] string attribName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (attribName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(attribName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(attribName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = RlGetLocationAttribNative(shaderId, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlSetUniform")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetUniformNative([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const void*")] void* value, [NativeName(NativeNameType.Param, "uniformType")] [NativeName(NativeNameType.Type, "int")] int uniformType, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void*, int, int, void>)vt[687])(locIndex, value, uniformType, count);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, int, int, void>)vt[687])(locIndex, (nint)value, uniformType, count);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetUniform")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetUniform([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const void*")] void* value, [NativeName(NativeNameType.Param, "uniformType")] [NativeName(NativeNameType.Type, "int")] int uniformType, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			RlSetUniformNative(locIndex, value, uniformType, count);
		}

		[NativeName(NativeNameType.Func, "rlSetUniformMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetUniformMatrixNative([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "mat")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 mat)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, Matrix4x4, void>)vt[688])(locIndex, mat);
			#else
			((delegate* unmanaged[Cdecl]<int, Matrix4x4, void>)vt[688])(locIndex, mat);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetUniformMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetUniformMatrix([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "mat")] [NativeName(NativeNameType.Type, "Matrix")] Matrix4x4 mat)
		{
			RlSetUniformMatrixNative(locIndex, mat);
		}

		[NativeName(NativeNameType.Func, "rlSetUniformSampler")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetUniformSamplerNative([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "textureId")] [NativeName(NativeNameType.Type, "unsigned int")] uint textureId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint, void>)vt[689])(locIndex, textureId);
			#else
			((delegate* unmanaged[Cdecl]<int, uint, void>)vt[689])(locIndex, textureId);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetUniformSampler")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetUniformSampler([NativeName(NativeNameType.Param, "locIndex")] [NativeName(NativeNameType.Type, "int")] int locIndex, [NativeName(NativeNameType.Param, "textureId")] [NativeName(NativeNameType.Type, "unsigned int")] uint textureId)
		{
			RlSetUniformSamplerNative(locIndex, textureId);
		}

		[NativeName(NativeNameType.Func, "rlSetShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlSetShaderNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "locs")] [NativeName(NativeNameType.Type, "int*")] int* locs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)vt[690])(id, locs);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)vt[690])(id, (nint)locs);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlSetShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetShader([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "locs")] [NativeName(NativeNameType.Type, "int*")] int* locs)
		{
			RlSetShaderNative(id, locs);
		}

		[NativeName(NativeNameType.Func, "rlSetShader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlSetShader([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "locs")] [NativeName(NativeNameType.Type, "int*")] ref int locs)
		{
			fixed (int* plocs = &locs)
			{
				RlSetShaderNative(id, (int*)plocs);
			}
		}

		/// <summary>
		/// Compute shader management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadComputeShaderProgram")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadComputeShaderProgramNative([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint>)vt[691])(shaderId);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, uint>)vt[691])(shaderId);
			#endif
		}

		/// <summary>
		/// Compute shader management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadComputeShaderProgram")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadComputeShaderProgram([NativeName(NativeNameType.Param, "shaderId")] [NativeName(NativeNameType.Type, "unsigned int")] uint shaderId)
		{
			uint ret = RlLoadComputeShaderProgramNative(shaderId);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlComputeShaderDispatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlComputeShaderDispatchNative([NativeName(NativeNameType.Param, "groupX")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupX, [NativeName(NativeNameType.Param, "groupY")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupY, [NativeName(NativeNameType.Param, "groupZ")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupZ)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vt[692])(groupX, groupY, groupZ);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vt[692])(groupX, groupY, groupZ);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlComputeShaderDispatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlComputeShaderDispatch([NativeName(NativeNameType.Param, "groupX")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupX, [NativeName(NativeNameType.Param, "groupY")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupY, [NativeName(NativeNameType.Param, "groupZ")] [NativeName(NativeNameType.Type, "unsigned int")] uint groupZ)
		{
			RlComputeShaderDispatchNative(groupX, groupY, groupZ);
		}

		/// <summary>
		/// Shader buffer storage object management (ssbo)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlLoadShaderBufferNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "unsigned int")] uint size, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "usageHint")] [NativeName(NativeNameType.Type, "int")] int usageHint)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, void*, int, uint>)vt[693])(size, data, usageHint);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, nint, int, uint>)vt[693])(size, (nint)data, usageHint);
			#endif
		}

		/// <summary>
		/// Shader buffer storage object management (ssbo)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlLoadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlLoadShaderBuffer([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "unsigned int")] uint size, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "usageHint")] [NativeName(NativeNameType.Type, "int")] int usageHint)
		{
			uint ret = RlLoadShaderBufferNative(size, data, usageHint);
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlUnloadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUnloadShaderBufferNative([NativeName(NativeNameType.Param, "ssboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint ssboId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[694])(ssboId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[694])(ssboId);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUnloadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUnloadShaderBuffer([NativeName(NativeNameType.Param, "ssboId")] [NativeName(NativeNameType.Type, "unsigned int")] uint ssboId)
		{
			RlUnloadShaderBufferNative(ssboId);
		}

		[NativeName(NativeNameType.Func, "rlUpdateShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlUpdateShaderBufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "unsigned int")] uint dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int")] uint offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void*, uint, uint, void>)vt[695])(id, data, dataSize, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, uint, uint, void>)vt[695])(id, (nint)data, dataSize, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlUpdateShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlUpdateShaderBuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "dataSize")] [NativeName(NativeNameType.Type, "unsigned int")] uint dataSize, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int")] uint offset)
		{
			RlUpdateShaderBufferNative(id, data, dataSize, offset);
		}

		[NativeName(NativeNameType.Func, "rlBindShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlBindShaderBufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)vt[696])(id, index);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)vt[696])(id, index);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlBindShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlBindShaderBuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			RlBindShaderBufferNative(id, index);
		}

		[NativeName(NativeNameType.Func, "rlReadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlReadShaderBufferNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "void*")] void* dest, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "unsigned int")] uint count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int")] uint offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void*, uint, uint, void>)vt[697])(id, dest, count, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, uint, uint, void>)vt[697])(id, (nint)dest, count, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlReadShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlReadShaderBuffer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "void*")] void* dest, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "unsigned int")] uint count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int")] uint offset)
		{
			RlReadShaderBufferNative(id, dest, count, offset);
		}

		[NativeName(NativeNameType.Func, "rlCopyShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlCopyShaderBufferNative([NativeName(NativeNameType.Param, "destId")] [NativeName(NativeNameType.Type, "unsigned int")] uint destId, [NativeName(NativeNameType.Param, "srcId")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcId, [NativeName(NativeNameType.Param, "destOffset")] [NativeName(NativeNameType.Type, "unsigned int")] uint destOffset, [NativeName(NativeNameType.Param, "srcOffset")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcOffset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "unsigned int")] uint count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)vt[698])(destId, srcId, destOffset, srcOffset, count);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)vt[698])(destId, srcId, destOffset, srcOffset, count);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlCopyShaderBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlCopyShaderBuffer([NativeName(NativeNameType.Param, "destId")] [NativeName(NativeNameType.Type, "unsigned int")] uint destId, [NativeName(NativeNameType.Param, "srcId")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcId, [NativeName(NativeNameType.Param, "destOffset")] [NativeName(NativeNameType.Type, "unsigned int")] uint destOffset, [NativeName(NativeNameType.Param, "srcOffset")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcOffset, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "unsigned int")] uint count)
		{
			RlCopyShaderBufferNative(destId, srcId, destOffset, srcOffset, count);
		}

		[NativeName(NativeNameType.Func, "rlGetShaderBufferSize")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint RlGetShaderBufferSizeNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint>)vt[699])(id);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, uint>)vt[699])(id);
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetShaderBufferSize")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint RlGetShaderBufferSize([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id)
		{
			uint ret = RlGetShaderBufferSizeNative(id);
			return ret;
		}

		/// <summary>
		/// Buffer management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlBindImageTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RlBindImageTextureNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "readonly")] [NativeName(NativeNameType.Type, "bool")] byte @readonly)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, byte, void>)vt[700])(id, index, format, @readonly);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, byte, void>)vt[700])(id, index, format, @readonly);
			#endif
		}

		/// <summary>
		/// Buffer management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlBindImageTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RlBindImageTexture([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "unsigned int")] uint id, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "int")] int format, [NativeName(NativeNameType.Param, "readonly")] [NativeName(NativeNameType.Type, "bool")] bool @readonly)
		{
			RlBindImageTextureNative(id, index, format, @readonly ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Matrix state management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlGetMatrixModelview")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		internal static Matrix4x4 RlGetMatrixModelviewNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Matrix4x4>)vt[701])();
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<Matrix4x4>)vt[701])();
			#endif
		}

		/// <summary>
		/// Matrix state management<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "rlGetMatrixModelview")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 RlGetMatrixModelview()
		{
			Matrix4x4 ret = RlGetMatrixModelviewNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixProjection")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		internal static Matrix4x4 RlGetMatrixProjectionNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Matrix4x4>)vt[702])();
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<Matrix4x4>)vt[702])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixProjection")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 RlGetMatrixProjection()
		{
			Matrix4x4 ret = RlGetMatrixProjectionNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixTransform")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		internal static Matrix4x4 RlGetMatrixTransformNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Matrix4x4>)vt[703])();
			#else
			return (Matrix4x4)((delegate* unmanaged[Cdecl]<Matrix4x4>)vt[703])();
			#endif
		}

		[NativeName(NativeNameType.Func, "rlGetMatrixTransform")]
		[return: NativeName(NativeNameType.Type, "Matrix")]
		public static Matrix4x4 RlGetMatrixTransform()
		{
			Matrix4x4 ret = RlGetMatrixTransformNative();
			return ret;
		}
	}
}
