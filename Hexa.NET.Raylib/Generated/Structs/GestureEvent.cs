// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Raylib
{
	/// <summary>
	/// Gesture event<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "GestureEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GestureEvent
	{
		[NativeName(NativeNameType.Field, "touchAction")]
		[NativeName(NativeNameType.Type, "int")]
		public int TouchAction;
		[NativeName(NativeNameType.Field, "pointCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int PointCount;
		[NativeName(NativeNameType.Field, "pointId")]
		[NativeName(NativeNameType.Type, "int[8]")]
		public int PointId_0;
		public int PointId_1;
		public int PointId_2;
		public int PointId_3;
		public int PointId_4;
		public int PointId_5;
		public int PointId_6;
		public int PointId_7;
		[NativeName(NativeNameType.Field, "position")]
		[NativeName(NativeNameType.Type, "Vector2[8]")]
		public Vector2 Position_0;
		public Vector2 Position_1;
		public Vector2 Position_2;
		public Vector2 Position_3;
		public Vector2 Position_4;
		public Vector2 Position_5;
		public Vector2 Position_6;
		public Vector2 Position_7;

		public unsafe GestureEvent(int touchAction = default, int pointCount = default, int* pointId = default, Vector2* position = default)
		{
			TouchAction = touchAction;
			PointCount = pointCount;
			if (pointId != default(int*))
			{
				PointId_0 = pointId[0];
				PointId_1 = pointId[1];
				PointId_2 = pointId[2];
				PointId_3 = pointId[3];
				PointId_4 = pointId[4];
				PointId_5 = pointId[5];
				PointId_6 = pointId[6];
				PointId_7 = pointId[7];
			}
			if (position != default(Vector2*))
			{
				Position_0 = position[0];
				Position_1 = position[1];
				Position_2 = position[2];
				Position_3 = position[3];
				Position_4 = position[4];
				Position_5 = position[5];
				Position_6 = position[6];
				Position_7 = position[7];
			}
		}

		public unsafe GestureEvent(int touchAction = default, int pointCount = default, Span<int> pointId = default, Span<Vector2> position = default)
		{
			TouchAction = touchAction;
			PointCount = pointCount;
			if (pointId != default(Span<int>))
			{
				PointId_0 = pointId[0];
				PointId_1 = pointId[1];
				PointId_2 = pointId[2];
				PointId_3 = pointId[3];
				PointId_4 = pointId[4];
				PointId_5 = pointId[5];
				PointId_6 = pointId[6];
				PointId_7 = pointId[7];
			}
			if (position != default(Span<Vector2>))
			{
				Position_0 = position[0];
				Position_1 = position[1];
				Position_2 = position[2];
				Position_3 = position[3];
				Position_4 = position[4];
				Position_5 = position[5];
				Position_6 = position[6];
				Position_7 = position[7];
			}
		}


		public unsafe Span<Vector2> Position
		
		{
			get
			{
				fixed (Vector2* p = &this.Position_0)
				{
					return new Span<Vector2>(p, 8);
				}
			}
		}
	}

}
