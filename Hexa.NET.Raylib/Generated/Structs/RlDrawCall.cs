// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Raylib
{
	/// <summary>
	/// Draw call type<br/>
	/// NOTE: Only texture changes register a new draw, other state-change-related elements are not<br/>
	/// used at this moment (vaoId, shaderId, matrices), raylib just forces a batch draw call if any<br/>
	/// of those state-change happens (this is done in core module)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "rlDrawCall")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct RlDrawCall
	{
		/// <summary>
		/// Drawing mode: LINES, TRIANGLES, QUADS<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mode")]
		[NativeName(NativeNameType.Type, "int")]
		public int Mode;

		/// <summary>
		/// Number of vertex of the draw<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "vertexCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int VertexCount;

		/// <summary>
		/// Number of vertex required for index alignment (LINES, TRIANGLES)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "vertexAlignment")]
		[NativeName(NativeNameType.Type, "int")]
		public int VertexAlignment;

		/// <summary>
		/// Texture id to be used on the draw -> Use to create new draw call if changes<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "textureId")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint TextureId;


		public unsafe RlDrawCall(int mode = default, int vertexCount = default, int vertexAlignment = default, uint textureId = default)
		{
			Mode = mode;
			VertexCount = vertexCount;
			VertexAlignment = vertexAlignment;
			TextureId = textureId;
		}


	}

}
