// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Raylib
{
	/// <summary>
	/// AudioStream, custom audio stream<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "AudioStream")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AudioStream
	{
		/// <summary>
		/// Pointer to internal data used by the audio system<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "buffer")]
		[NativeName(NativeNameType.Type, "rAudioBuffer*")]
		public unsafe RAudioBuffer* Buffer;

		/// <summary>
		/// Pointer to internal data processor, useful for audio effects<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "processor")]
		[NativeName(NativeNameType.Type, "rAudioProcessor*")]
		public unsafe RAudioProcessor* Processor;

		/// <summary>
		/// Frequency (samples per second)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "sampleRate")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint SampleRate;

		/// <summary>
		/// Bit depth (bits per sample): 8, 16, 32 (24 not supported)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "sampleSize")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint SampleSize;

		/// <summary>
		/// Number of channels (1-mono, 2-stereo, ...)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "channels")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Channels;


		public unsafe AudioStream(RAudioBuffer* buffer = default, RAudioProcessor* processor = default, uint sampleRate = default, uint sampleSize = default, uint channels = default)
		{
			Buffer = buffer;
			Processor = processor;
			SampleRate = sampleRate;
			SampleSize = sampleSize;
			Channels = channels;
		}


	}

}
